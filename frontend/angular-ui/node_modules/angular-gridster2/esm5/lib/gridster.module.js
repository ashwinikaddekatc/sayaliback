/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
import { CommonModule } from '@angular/common';
import { NgModule } from '@angular/core';
import { GridsterComponent } from './gridster.component';
import { GridsterItemComponent } from './gridsterItem.component';
import { GridsterPreviewComponent } from './gridsterPreview.component';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';
var GridsterModule = /** @class */ (function () {
    function GridsterModule() {
    }
GridsterModule.ɵfac = function GridsterModule_Factory(t) { return new (t || GridsterModule)(); };
GridsterModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: GridsterModule });
GridsterModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [], imports: [[
            CommonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(GridsterModule, { declarations: function () { return [GridsterComponent,
        GridsterItemComponent,
        GridsterPreviewComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [GridsterComponent, GridsterItemComponent]; } }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridsterModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    GridsterComponent,
                    GridsterItemComponent,
                    GridsterPreviewComponent
                ],
                imports: [
                    CommonModule
                ],
                exports: [GridsterComponent, GridsterItemComponent],
                providers: [],
                bootstrap: []
            }]
    }], function () { return []; }, null); })();
ɵngcc0.ɵɵsetComponentScope(GridsterComponent, [ɵngcc1.NgForOf, ɵngcc1.NgStyle, GridsterPreviewComponent], []);
    return GridsterModule;
}());
export { GridsterModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZHN0ZXIubW9kdWxlLmpzIiwic291cmNlcyI6WyJhbmd1bGFyLWdyaWRzdGVyMi9saWIvZ3JpZHN0ZXIubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDN0MsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV2QyxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUN2RCxPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUMvRCxPQUFPLEVBQUMsd0JBQXdCLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQzs7O0FBRXJFO0FBRXFCO0FBRWpCO29EQUpILFFBQVEsU0FBQyx1QkFDUjtNQUFZLEVBQUUsMkJBQ1osaUJBQWlCO01BQ2pCLHFCQUFxQiwyQkFDckI7R0FBd0I7Q0FDekI7U0FDRCxPQUFPLEVBQUUsMkJBQ1AsWUFBWSx1QkFDYix1QkFDRCxPQUFPLEVBQUUsQ0FBQyxpQkFBaUIsRUFBRSxxQkFBcUIsQ0FBQztZQUNuRCxTQUFTLEVBQUUsRUFBRTtpQkFDYixTQUFTLEVBQUUsRUFBRSxtQkFDZDs7Ozs7Ozs7Ozs7Ozs7Ozs7OEdBQ1U7QUFBRSx5QkFwQmI7QUFBRzs7O0FBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFuQkEsQUFvQkEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tbW9uTW9kdWxlfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtOZ01vZHVsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7R3JpZHN0ZXJDb21wb25lbnR9IGZyb20gJy4vZ3JpZHN0ZXIuY29tcG9uZW50JztcbmltcG9ydCB7R3JpZHN0ZXJJdGVtQ29tcG9uZW50fSBmcm9tICcuL2dyaWRzdGVySXRlbS5jb21wb25lbnQnO1xuaW1wb3J0IHtHcmlkc3RlclByZXZpZXdDb21wb25lbnR9IGZyb20gJy4vZ3JpZHN0ZXJQcmV2aWV3LmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1xuICAgIEdyaWRzdGVyQ29tcG9uZW50LFxuICAgIEdyaWRzdGVySXRlbUNvbXBvbmVudCxcbiAgICBHcmlkc3RlclByZXZpZXdDb21wb25lbnRcbiAgXSxcbiAgaW1wb3J0czogW1xuICAgIENvbW1vbk1vZHVsZVxuICBdLFxuICBleHBvcnRzOiBbR3JpZHN0ZXJDb21wb25lbnQsIEdyaWRzdGVySXRlbUNvbXBvbmVudF0sXG4gIHByb3ZpZGVyczogW10sXG4gIGJvb3RzdHJhcDogW11cbn0pXG5leHBvcnQgY2xhc3MgR3JpZHN0ZXJNb2R1bGUge1xufVxuIl19