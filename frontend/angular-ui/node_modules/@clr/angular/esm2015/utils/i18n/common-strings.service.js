/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Injectable } from '@angular/core';
import { commonStringsDefault } from './../../utils/i18n/common-strings.default';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
export class ClrCommonStringsService {
    constructor() {
        this._strings = commonStringsDefault;
    }
    /**
     * Allows you to pass in new overrides for localization
     */
    localize(overrides) {
        this._strings = Object.assign(Object.assign({}, this._strings), overrides);
    }
    /**
     * Access to all of the keys as strings
     */
    get keys() {
        return this._strings;
    }
    /**
     * Parse a string with a set of tokens to replace
     */
    parse(source, tokens = {}) {
        const names = Object.keys(tokens);
        let output = source;
        if (names.length) {
            names.forEach(name => {
                output = output.replace(`{${name}}`, tokens[name]);
            });
        }
        return output;
    }
}
ClrCommonStringsService.ɵfac = function ClrCommonStringsService_Factory(t) { return new (t || ClrCommonStringsService)(); };
ClrCommonStringsService.ɵprov = i0.ɵɵdefineInjectable({ factory: function ClrCommonStringsService_Factory() { return new ClrCommonStringsService(); }, token: ClrCommonStringsService, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClrCommonStringsService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLXN0cmluZ3Muc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY2xyLWFuZ3VsYXIvc3JjL3V0aWxzL2kxOG4vY29tbW9uLXN0cmluZ3Muc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFFSCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDJDQUEyQyxDQUFDO0FBQ2pGOztBQUtBLE1BQU0sT0FBTyx1QkFBdUI7QUFDcEMsSUFKQTtBQUNFLFFBR1EsYUFBUSxHQUFHLG9CQUFvQixDQUFDO0FBQzFDLEtBNEJDO0FBQ0QsSUE1QkU7QUFDRjtBQUNFLE9BQUc7QUFDTCxJQUFFLFFBQVEsQ0FBQyxTQUFvQztBQUMvQyxRQUFJLElBQUksQ0FBQyxRQUFRLG1DQUFRLElBQUksQ0FBQyxRQUFRLEdBQUssU0FBUyxDQUFFLENBQUM7QUFDdkQsSUFBRSxDQUFDO0FBQ0gsSUFDRTtBQUNGO0FBQ0UsT0FBRztBQUNMLElBQUUsSUFBSSxJQUFJO0FBQUssUUFDWCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUM7QUFDekIsSUFBRSxDQUFDO0FBQ0gsSUFDRTtBQUNGO0FBQ0UsT0FBRztBQUNMLElBQUUsS0FBSyxDQUFDLE1BQWMsRUFBRSxTQUFvQyxFQUFFO0FBQzlELFFBQUksTUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUN0QyxRQUFJLElBQUksTUFBTSxHQUFHLE1BQU0sQ0FBQztBQUN4QixRQUFJLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRTtBQUN0QixZQUFNLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDM0IsZ0JBQVEsTUFBTSxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLEdBQUcsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztBQUMzRCxZQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ1QsU0FBSztBQUNMLFFBQUksT0FBTyxNQUFNLENBQUM7QUFDbEIsSUFBRSxDQUFDO0FBQ0g7NEhBQUM7QUFDRDttREFsQ0MsVUFBVSxTQUFDLGtCQUNWLFVBQVUsRUFBRSxNQUFNO0VBQ25COzs7O2dEQUNJO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMjAgVk13YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgY29tbW9uU3RyaW5nc0RlZmF1bHQgfSBmcm9tICcuLy4uLy4uL3V0aWxzL2kxOG4vY29tbW9uLXN0cmluZ3MuZGVmYXVsdCc7XG5pbXBvcnQgeyBDbHJDb21tb25TdHJpbmdzIH0gZnJvbSAnLi8uLi8uLi91dGlscy9pMThuL2NvbW1vbi1zdHJpbmdzLmludGVyZmFjZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBDbHJDb21tb25TdHJpbmdzU2VydmljZSB7XG4gIHByaXZhdGUgX3N0cmluZ3MgPSBjb21tb25TdHJpbmdzRGVmYXVsdDtcblxuICAvKipcbiAgICogQWxsb3dzIHlvdSB0byBwYXNzIGluIG5ldyBvdmVycmlkZXMgZm9yIGxvY2FsaXphdGlvblxuICAgKi9cbiAgbG9jYWxpemUob3ZlcnJpZGVzOiBQYXJ0aWFsPENsckNvbW1vblN0cmluZ3M+KSB7XG4gICAgdGhpcy5fc3RyaW5ncyA9IHsgLi4udGhpcy5fc3RyaW5ncywgLi4ub3ZlcnJpZGVzIH07XG4gIH1cblxuICAvKipcbiAgICogQWNjZXNzIHRvIGFsbCBvZiB0aGUga2V5cyBhcyBzdHJpbmdzXG4gICAqL1xuICBnZXQga2V5cygpOiBSZWFkb25seTxDbHJDb21tb25TdHJpbmdzPiB7XG4gICAgcmV0dXJuIHRoaXMuX3N0cmluZ3M7XG4gIH1cblxuICAvKipcbiAgICogUGFyc2UgYSBzdHJpbmcgd2l0aCBhIHNldCBvZiB0b2tlbnMgdG8gcmVwbGFjZVxuICAgKi9cbiAgcGFyc2Uoc291cmNlOiBzdHJpbmcsIHRva2VuczogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfSA9IHt9KSB7XG4gICAgY29uc3QgbmFtZXMgPSBPYmplY3Qua2V5cyh0b2tlbnMpO1xuICAgIGxldCBvdXRwdXQgPSBzb3VyY2U7XG4gICAgaWYgKG5hbWVzLmxlbmd0aCkge1xuICAgICAgbmFtZXMuZm9yRWFjaChuYW1lID0+IHtcbiAgICAgICAgb3V0cHV0ID0gb3V0cHV0LnJlcGxhY2UoYHske25hbWV9fWAsIHRva2Vuc1tuYW1lXSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIG91dHB1dDtcbiAgfVxufVxuIl19