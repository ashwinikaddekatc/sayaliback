/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { ClrTimelineStepState } from '../enums/timeline-step-state.enum';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { Injectable } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../utils/i18n/common-strings.service';
export class TimelineIconAttributeService {
    constructor(commonStrings) {
        this.attributeMap = new Map();
        this.attributeMap.set(ClrTimelineStepState.NOT_STARTED, {
            iconShape: 'circle',
            iconStatus: null,
            ariaLabel: commonStrings.keys.timelineStepNotStarted,
        });
        this.attributeMap.set(ClrTimelineStepState.CURRENT, {
            iconShape: 'dot-circle',
            iconStatus: 'info',
            ariaLabel: commonStrings.keys.timelineStepCurrent,
        });
        this.attributeMap.set(ClrTimelineStepState.PROCESSING, {
            iconShape: undefined,
            iconStatus: null,
            ariaLabel: commonStrings.keys.timelineStepProcessing,
        });
        this.attributeMap.set(ClrTimelineStepState.SUCCESS, {
            iconShape: 'success-standard',
            iconStatus: 'success',
            ariaLabel: commonStrings.keys.timelineStepSuccess,
        });
        this.attributeMap.set(ClrTimelineStepState.ERROR, {
            iconShape: 'error-standard',
            iconStatus: 'danger',
            ariaLabel: commonStrings.keys.timelineStepError,
        });
    }
    getAriaLabel(step) {
        return this.attributeMap.get(step).ariaLabel;
    }
    getIconShape(step) {
        return this.attributeMap.get(step).iconShape;
    }
    getIconStatus(step) {
        return this.attributeMap.get(step).iconStatus;
    }
}
TimelineIconAttributeService.ɵfac = function TimelineIconAttributeService_Factory(t) { return new (t || TimelineIconAttributeService)(ɵngcc0.ɵɵinject(ɵngcc1.ClrCommonStringsService)); };
TimelineIconAttributeService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: TimelineIconAttributeService, factory: TimelineIconAttributeService.ɵfac });
TimelineIconAttributeService.ctorParameters = () => [
    { type: ClrCommonStringsService }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(TimelineIconAttributeService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.ClrCommonStringsService }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGltZWxpbmUtaWNvbi1hdHRyaWJ1dGUuc2VydmljZS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY2xyLWFuZ3VsYXIvc3JjL3RpbWVsaW5lL3Byb3ZpZGVycy90aW1lbGluZS1pY29uLWF0dHJpYnV0ZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUVILE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBRXpFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7OztBQUczQyxNQUFNLE9BQU8sNEJBQTRCO0FBQ3pDLElBRUUsWUFBWSxhQUFzQztBQUNwRCxRQUhVLGlCQUFZLEdBQThDLElBQUksR0FBRyxFQUF3QyxDQUFDO0FBQ3BILFFBRUksSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsV0FBVyxFQUFFO0FBQzVELFlBQU0sU0FBUyxFQUFFLFFBQVE7QUFDekIsWUFBTSxVQUFVLEVBQUUsSUFBSTtBQUN0QixZQUFNLFNBQVMsRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLHNCQUFzQjtBQUMxRCxTQUFLLENBQUMsQ0FBQztBQUNQLFFBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsT0FBTyxFQUFFO0FBQ3hELFlBQU0sU0FBUyxFQUFFLFlBQVk7QUFDN0IsWUFBTSxVQUFVLEVBQUUsTUFBTTtBQUN4QixZQUFNLFNBQVMsRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLG1CQUFtQjtBQUN2RCxTQUFLLENBQUMsQ0FBQztBQUNQLFFBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsVUFBVSxFQUFFO0FBQzNELFlBQU0sU0FBUyxFQUFFLFNBQVM7QUFDMUIsWUFBTSxVQUFVLEVBQUUsSUFBSTtBQUN0QixZQUFNLFNBQVMsRUFBRSxhQUFhLENBQUMsSUFBSSxDQUFDLHNCQUFzQjtBQUMxRCxTQUFLLENBQUMsQ0FBQztBQUNQLFFBQUksSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsT0FBTyxFQUFFO0FBQ3hELFlBQU0sU0FBUyxFQUFFLGtCQUFrQjtBQUNuQyxZQUFNLFVBQVUsRUFBRSxTQUFTO0FBQzNCLFlBQU0sU0FBUyxFQUFFLGFBQWEsQ0FBQyxJQUFJLENBQUMsbUJBQW1CO0FBQ3ZELFNBQUssQ0FBQyxDQUFDO0FBQ1AsUUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxLQUFLLEVBQUU7QUFDdEQsWUFBTSxTQUFTLEVBQUUsZ0JBQWdCO0FBQ2pDLFlBQU0sVUFBVSxFQUFFLFFBQVE7QUFDMUIsWUFBTSxTQUFTLEVBQUUsYUFBYSxDQUFDLElBQUksQ0FBQyxpQkFBaUI7QUFDckQsU0FBSyxDQUFDLENBQUM7QUFDUCxJQUFFLENBQUM7QUFDSCxJQUNTLFlBQVksQ0FBQyxJQUEwQjtBQUFJLFFBQ2hELE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsU0FBUyxDQUFDO0FBQ2pELElBQUUsQ0FBQztBQUNILElBQ1MsWUFBWSxDQUFDLElBQTBCO0FBQUksUUFDaEQsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxTQUFTLENBQUM7QUFDakQsSUFBRSxDQUFDO0FBQ0gsSUFDUyxhQUFhLENBQUMsSUFBMEI7QUFBSSxRQUNqRCxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLFVBQVUsQ0FBQztBQUNsRCxJQUFFLENBQUM7QUFDSDt3REEzQ0MsVUFBVTtvSkFDVDtBQUFDO0FBQ1UsWUFMSix1QkFBdUI7QUFBRzs7O3dGQUFFO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMjAgVk13YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICovXG5cbmltcG9ydCB7IENsclRpbWVsaW5lU3RlcFN0YXRlIH0gZnJvbSAnLi4vZW51bXMvdGltZWxpbmUtc3RlcC1zdGF0ZS5lbnVtJztcbmltcG9ydCB7IEljb25BdHRyaWJ1dGVzIH0gZnJvbSAnLi4vaW50ZXJmYWNlL2ljb24tYXR0cmlidXRlLmludGVyZmFjZSc7XG5pbXBvcnQgeyBDbHJDb21tb25TdHJpbmdzU2VydmljZSB9IGZyb20gJy4uLy4uL3V0aWxzL2kxOG4vY29tbW9uLXN0cmluZ3Muc2VydmljZSc7XG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUaW1lbGluZUljb25BdHRyaWJ1dGVTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBhdHRyaWJ1dGVNYXA6IE1hcDxDbHJUaW1lbGluZVN0ZXBTdGF0ZSwgSWNvbkF0dHJpYnV0ZXM+ID0gbmV3IE1hcDxDbHJUaW1lbGluZVN0ZXBTdGF0ZSwgSWNvbkF0dHJpYnV0ZXM+KCk7XG5cbiAgY29uc3RydWN0b3IoY29tbW9uU3RyaW5nczogQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2UpIHtcbiAgICB0aGlzLmF0dHJpYnV0ZU1hcC5zZXQoQ2xyVGltZWxpbmVTdGVwU3RhdGUuTk9UX1NUQVJURUQsIHtcbiAgICAgIGljb25TaGFwZTogJ2NpcmNsZScsXG4gICAgICBpY29uU3RhdHVzOiBudWxsLFxuICAgICAgYXJpYUxhYmVsOiBjb21tb25TdHJpbmdzLmtleXMudGltZWxpbmVTdGVwTm90U3RhcnRlZCxcbiAgICB9KTtcbiAgICB0aGlzLmF0dHJpYnV0ZU1hcC5zZXQoQ2xyVGltZWxpbmVTdGVwU3RhdGUuQ1VSUkVOVCwge1xuICAgICAgaWNvblNoYXBlOiAnZG90LWNpcmNsZScsXG4gICAgICBpY29uU3RhdHVzOiAnaW5mbycsXG4gICAgICBhcmlhTGFiZWw6IGNvbW1vblN0cmluZ3Mua2V5cy50aW1lbGluZVN0ZXBDdXJyZW50LFxuICAgIH0pO1xuICAgIHRoaXMuYXR0cmlidXRlTWFwLnNldChDbHJUaW1lbGluZVN0ZXBTdGF0ZS5QUk9DRVNTSU5HLCB7XG4gICAgICBpY29uU2hhcGU6IHVuZGVmaW5lZCxcbiAgICAgIGljb25TdGF0dXM6IG51bGwsXG4gICAgICBhcmlhTGFiZWw6IGNvbW1vblN0cmluZ3Mua2V5cy50aW1lbGluZVN0ZXBQcm9jZXNzaW5nLFxuICAgIH0pO1xuICAgIHRoaXMuYXR0cmlidXRlTWFwLnNldChDbHJUaW1lbGluZVN0ZXBTdGF0ZS5TVUNDRVNTLCB7XG4gICAgICBpY29uU2hhcGU6ICdzdWNjZXNzLXN0YW5kYXJkJyxcbiAgICAgIGljb25TdGF0dXM6ICdzdWNjZXNzJyxcbiAgICAgIGFyaWFMYWJlbDogY29tbW9uU3RyaW5ncy5rZXlzLnRpbWVsaW5lU3RlcFN1Y2Nlc3MsXG4gICAgfSk7XG4gICAgdGhpcy5hdHRyaWJ1dGVNYXAuc2V0KENsclRpbWVsaW5lU3RlcFN0YXRlLkVSUk9SLCB7XG4gICAgICBpY29uU2hhcGU6ICdlcnJvci1zdGFuZGFyZCcsXG4gICAgICBpY29uU3RhdHVzOiAnZGFuZ2VyJyxcbiAgICAgIGFyaWFMYWJlbDogY29tbW9uU3RyaW5ncy5rZXlzLnRpbWVsaW5lU3RlcEVycm9yLFxuICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGdldEFyaWFMYWJlbChzdGVwOiBDbHJUaW1lbGluZVN0ZXBTdGF0ZSk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlTWFwLmdldChzdGVwKS5hcmlhTGFiZWw7XG4gIH1cblxuICBwdWJsaWMgZ2V0SWNvblNoYXBlKHN0ZXA6IENsclRpbWVsaW5lU3RlcFN0YXRlKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVNYXAuZ2V0KHN0ZXApLmljb25TaGFwZTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRJY29uU3RhdHVzKHN0ZXA6IENsclRpbWVsaW5lU3RlcFN0YXRlKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5hdHRyaWJ1dGVNYXAuZ2V0KHN0ZXApLmljb25TdGF0dXM7XG4gIH1cbn1cbiJdfQ==