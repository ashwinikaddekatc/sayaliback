/*
 * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, Input, HostBinding } from '@angular/core';
import { isBooleanAttributeSet } from '../../utils/component/is-boolean-attribute-set';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function ClrProgressBar_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.displayValue);
} }
export class ClrProgressBar {
    constructor() {
        this.externalId = '';
        // Progress
        this.max = 100;
        this._value = 0;
    }
    set id(value) {
        this._ID = value;
        this.externalId = null;
    }
    get id() {
        return this._ID;
    }
    get value() {
        return this._value;
    }
    set value(value) {
        /**
         * No need to convert to `number` cause we could have
         * floating point and parseInt will round the numbers
         *
         * working with string won't have any side-effects,
         * we don't do any math so string will do the job.
         */
        this._value = value;
    }
    // Styles
    get progressClass() {
        return true;
    }
    get labeledClass() {
        return this._labeled;
    }
    set clrLabeled(value) {
        this._labeled = isBooleanAttributeSet(value);
    }
    get fadeClass() {
        return this._fade;
    }
    set clrFade(value) {
        this._fade = isBooleanAttributeSet(value);
    }
    get loopClass() {
        return this._loop;
    }
    set clrLoop(value) {
        this._loop = isBooleanAttributeSet(value);
    }
    get successClass() {
        return this._success;
    }
    /** @deprecated since 2.0, remove in 4.0 */
    set clrSuccess(value) {
        this._success = isBooleanAttributeSet(value);
    }
    get dangerClass() {
        return this._danger;
    }
    /** @deprecated since 2.0, remove in 4.0 */
    set clrDanger(value) {
        this._danger = isBooleanAttributeSet(value);
    }
    get flashClass() {
        return this._flash;
    }
    set clrFlash(value) {
        this._flash = isBooleanAttributeSet(value);
    }
    get flashDangerClass() {
        return this._flashDanger;
    }
    /** @deprecated since 2.0, remove in 4.0 */
    set clrFlashDanger(value) {
        this._flashDanger = isBooleanAttributeSet(value);
    }
    /**
     * Display optional text only when labeled is eneabled
     */
    displayStringValue() {
        return this._labeled;
    }
    /**
     * Make sure that we always will have something that is readable
     * for the screen reader
     */
    get displayValue() {
        if (this.displayval) {
            return this.displayval;
        }
        return `${this.value || 0}%`;
    }
}
ClrProgressBar.ɵfac = function ClrProgressBar_Factory(t) { return new (t || ClrProgressBar)(); };
ClrProgressBar.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrProgressBar, selectors: [["clr-progress-bar"]], hostVars: 17, hostBindings: function ClrProgressBar_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("id", ctx.externalId);
        ɵngcc0.ɵɵclassProp("progress", ctx.progressClass)("labeled", ctx.labeledClass)("progress-fade", ctx.fadeClass)("loop", ctx.loopClass)("success", ctx.successClass)("danger", ctx.dangerClass)("flash", ctx.flashClass)("flash-danger", ctx.flashDangerClass);
    } }, inputs: { max: ["clrMax", "max"], id: "id", value: ["clrValue", "value"], clrLabeled: "clrLabeled", clrFade: "clrFade", clrLoop: "clrLoop", clrSuccess: "clrSuccess", clrDanger: "clrDanger", clrFlash: "clrFlash", clrFlashDanger: "clrFlashDanger", displayval: ["clrDisplayval", "displayval"] }, decls: 2, vars: 5, consts: [[3, "id"], [4, "ngIf"]], template: function ClrProgressBar_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "progress", 0);
        ɵngcc0.ɵɵtemplate(1, ClrProgressBar_span_1_Template, 2, 1, "span", 1);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("id", ctx.id);
        ɵngcc0.ɵɵattribute("max", ctx.max)("value", ctx.value)("data-displayval", ctx.displayValue);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.displayStringValue());
    } }, directives: [ɵngcc1.NgIf], encapsulation: 2 });
ClrProgressBar.propDecorators = {
    externalId: [{ type: HostBinding, args: ['attr.id',] }],
    id: [{ type: Input }],
    max: [{ type: Input, args: ['clrMax',] }],
    displayval: [{ type: Input, args: ['clrDisplayval',] }],
    value: [{ type: Input, args: ['clrValue',] }],
    progressClass: [{ type: HostBinding, args: ['class.progress',] }],
    labeledClass: [{ type: HostBinding, args: ['class.labeled',] }],
    clrLabeled: [{ type: Input, args: ['clrLabeled',] }],
    fadeClass: [{ type: HostBinding, args: ['class.progress-fade',] }],
    clrFade: [{ type: Input, args: ['clrFade',] }],
    loopClass: [{ type: HostBinding, args: ['class.loop',] }],
    clrLoop: [{ type: Input, args: ['clrLoop',] }],
    successClass: [{ type: HostBinding, args: ['class.success',] }],
    clrSuccess: [{ type: Input, args: ['clrSuccess',] }],
    dangerClass: [{ type: HostBinding, args: ['class.danger',] }],
    clrDanger: [{ type: Input, args: ['clrDanger',] }],
    flashClass: [{ type: HostBinding, args: ['class.flash',] }],
    clrFlash: [{ type: Input, args: ['clrFlash',] }],
    flashDangerClass: [{ type: HostBinding, args: ['class.flash-danger',] }],
    clrFlashDanger: [{ type: Input, args: ['clrFlashDanger',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClrProgressBar, [{
        type: Component,
        args: [{
                selector: 'clr-progress-bar',
                template: `
    <progress [id]="id" [attr.max]="max" [attr.value]="value" [attr.data-displayval]="displayValue"></progress>
    <span *ngIf="displayStringValue()">{{ displayValue }}</span>
  `
            }]
    }], function () { return []; }, { externalId: [{
            type: HostBinding,
            args: ['attr.id']
        }], max: [{
            type: Input,
            args: ['clrMax']
        }], id: [{
            type: Input
        }], value: [{
            type: Input,
            args: ['clrValue']
        }], progressClass: [{
            type: HostBinding,
            args: ['class.progress']
        }], labeledClass: [{
            type: HostBinding,
            args: ['class.labeled']
        }], clrLabeled: [{
            type: Input,
            args: ['clrLabeled']
        }], fadeClass: [{
            type: HostBinding,
            args: ['class.progress-fade']
        }], clrFade: [{
            type: Input,
            args: ['clrFade']
        }], loopClass: [{
            type: HostBinding,
            args: ['class.loop']
        }], clrLoop: [{
            type: Input,
            args: ['clrLoop']
        }], successClass: [{
            type: HostBinding,
            args: ['class.success']
        }], clrSuccess: [{
            type: Input,
            args: ['clrSuccess']
        }], dangerClass: [{
            type: HostBinding,
            args: ['class.danger']
        }], clrDanger: [{
            type: Input,
            args: ['clrDanger']
        }], flashClass: [{
            type: HostBinding,
            args: ['class.flash']
        }], clrFlash: [{
            type: Input,
            args: ['clrFlash']
        }], flashDangerClass: [{
            type: HostBinding,
            args: ['class.flash-danger']
        }], clrFlashDanger: [{
            type: Input,
            args: ['clrFlashDanger']
        }], displayval: [{
            type: Input,
            args: ['clrDisplayval']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,