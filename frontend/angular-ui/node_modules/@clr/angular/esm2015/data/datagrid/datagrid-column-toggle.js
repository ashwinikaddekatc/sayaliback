/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, Inject, ContentChild, ElementRef, NgZone, PLATFORM_ID, ViewChild } from '@angular/core';
import { UNIQUE_ID, UNIQUE_ID_PROVIDER } from '../../utils/id-generator/id-generator.service';
import { ClrAxis } from '../../utils/popover/enums/axis.enum';
import { ClrAlignment } from '../../utils/popover/enums/alignment.enum';
import { ClrSide } from '../../utils/popover/enums/side.enum';
import { ClrPopoverEventsService } from '../../utils/popover/providers/popover-events.service';
import { ClrPopoverPositionService } from '../../utils/popover/providers/popover-position.service';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { ColumnsService } from './providers/columns.service';
import { DatagridColumnChanges } from './enums/column-changes.enum';
import { ClrDatagridColumnToggleTitle } from './datagrid-column-toggle-title';
import { ClrDatagridColumnToggleButton } from './datagrid-column-toggle-button';
/** @deprecated since 2.0, remove in 3.0 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../utils/i18n/common-strings.service';
import * as ɵngcc2 from './providers/columns.service';
import * as ɵngcc3 from '../../utils/popover/popover-anchor';
import * as ɵngcc4 from '../../utils/popover/popover-open-close-button';
import * as ɵngcc5 from '../../icon/icon';
import * as ɵngcc6 from '../../utils/popover/popover-content';
import * as ɵngcc7 from '../../utils/focus-trap/focus-trap.directive';
import * as ɵngcc8 from '@angular/common';
import * as ɵngcc9 from '../../utils/popover/popover-close-button';
import * as ɵngcc10 from './datagrid-items-trackby';
import * as ɵngcc11 from '../../forms/checkbox/checkbox-wrapper';
import * as ɵngcc12 from '@angular/forms';
import * as ɵngcc13 from '../../forms/checkbox/checkbox';
import * as ɵngcc14 from '../../forms/common/label';
import * as ɵngcc15 from './datagrid-column-toggle-button';

const _c0 = ["allSelected"];
function ClrDatagridColumnToggle_div_2_ng_container_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainerStart(0);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementContainerEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r2.commonStrings.keys.showColumns);
} }
function ClrDatagridColumnToggle_div_2_li_10_ng_template_4_Template(rf, ctx) { }
function ClrDatagridColumnToggle_div_2_li_10_Template(rf, ctx) { if (rf & 1) {
    const _r8 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "li");
    ɵngcc0.ɵɵelementStart(1, "clr-checkbox-wrapper");
    ɵngcc0.ɵɵelementStart(2, "input", 14);
    ɵngcc0.ɵɵlistener("ngModelChange", function ClrDatagridColumnToggle_div_2_li_10_Template_input_ngModelChange_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r8); const columnState_r5 = ctx.$implicit; const ctx_r7 = ɵngcc0.ɵɵnextContext(2); return ctx_r7.toggleColumnState(columnState_r5, !$event); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "label");
    ɵngcc0.ɵɵtemplate(4, ClrDatagridColumnToggle_div_2_li_10_ng_template_4_Template, 0, 0, "ng-template", 15);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const columnState_r5 = ctx.$implicit;
    const ctx_r3 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", ctx_r3.hasOnlyOneVisibleColumn && !columnState_r5.hidden)("ngModel", !columnState_r5.hidden);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", columnState_r5.titleTemplateRef);
} }
function ClrDatagridColumnToggle_div_2_clr_dg_column_toggle_button_13_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "clr-dg-column-toggle-button", 16);
    ɵngcc0.ɵɵlistener("clrAllSelected", function ClrDatagridColumnToggle_div_2_clr_dg_column_toggle_button_13_Template_clr_dg_column_toggle_button_clrAllSelected_0_listener() { ɵngcc0.ɵɵrestoreView(_r10); const ctx_r9 = ɵngcc0.ɵɵnextContext(2); return ctx_r9.allColumnsSelected(); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r4.commonStrings.keys.selectAll, " ");
} }
function ClrDatagridColumnToggle_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 3);
    ɵngcc0.ɵɵelementStart(1, "div", 4);
    ɵngcc0.ɵɵelementStart(2, "div", 5, 6);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵtemplate(5, ClrDatagridColumnToggle_div_2_ng_container_5_Template, 2, 1, "ng-container", 7);
    ɵngcc0.ɵɵprojection(6);
    ɵngcc0.ɵɵelementStart(7, "button", 8);
    ɵngcc0.ɵɵelement(8, "cds-icon", 9);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(9, "ul", 10);
    ɵngcc0.ɵɵtemplate(10, ClrDatagridColumnToggle_div_2_li_10_Template, 5, 3, "li", 11);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(11, "div", 12);
    ɵngcc0.ɵɵprojection(12, 1);
    ɵngcc0.ɵɵtemplate(13, ClrDatagridColumnToggle_div_2_clr_dg_column_toggle_button_13_Template, 2, 1, "clr-dg-column-toggle-button", 13);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("id", ctx_r0.popoverId);
    ɵngcc0.ɵɵattribute("aria-label", ctx_r0.commonStrings.keys.showColumnsMenuDescription);
    ɵngcc0.ɵɵadvance(4);
    ɵngcc0.ɵɵtextInterpolate(ctx_r0.commonStrings.keys.allColumnsSelected);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.customToggleTitle);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵattribute("aria-label", ctx_r0.commonStrings.keys.close)("title", ctx_r0.commonStrings.keys.close);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("title", ctx_r0.commonStrings.keys.close);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.hideableColumnStates)("ngForTrackBy", ctx_r0.trackByFn);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r0.customToggleButton);
} }
const _c1 = [[["clr-dg-column-toggle-title"]], [["clr-dg-column-toggle-button"]]];
const _c2 = ["clr-dg-column-toggle-title", "clr-dg-column-toggle-button"];
export class ClrDatagridColumnToggle {
    constructor(commonStrings, columnsService, columnSwitchId, platformId, zone, popoverId) {
        this.commonStrings = commonStrings;
        this.columnsService = columnsService;
        this.columnSwitchId = columnSwitchId;
        this.platformId = platformId;
        this.zone = zone;
        this.popoverId = popoverId;
        // Smart Popover
        this.smartPosition = {
            axis: ClrAxis.VERTICAL,
            side: ClrSide.BEFORE,
            anchor: ClrAlignment.START,
            content: ClrAlignment.START,
        };
    }
    get allColumnsVisible() {
        return this._allColumnsVisible;
    }
    set allColumnsVisible(value) {
        this._allColumnsVisible = value;
    }
    get hideableColumnStates() {
        const hideables = this.columnsService.columns.filter(column => column.value.hideable);
        return hideables.map(column => column.value);
    }
    get hasOnlyOneVisibleColumn() {
        const nbNonHideableColumns = this.columnsService.columns.length - this.hideableColumnStates.length;
        // this should only return true when there is no non-hideable columns.
        return (nbNonHideableColumns === 0 && this.hideableColumnStates.filter(columnState => !columnState.hidden).length === 1);
    }
    toggleColumnState(columnState, event) {
        const columnToToggle = this.columnsService.columns.filter(column => column.value === columnState)[0];
        this.columnsService.emitStateChange(columnToToggle, {
            hidden: event,
            changes: [DatagridColumnChanges.HIDDEN],
        });
    }
    toggleSwitchPanel() {
        this.openState = !this.openState;
    }
    allColumnsSelected() {
        this.allSelectedElement.nativeElement.focus();
    }
    // Without tracking the checkboxes get rerendered on model update, which leads
    // to loss of focus after checkbox toggle.
    trackByFn(index) {
        return index;
    }
}
ClrDatagridColumnToggle.ɵfac = function ClrDatagridColumnToggle_Factory(t) { return new (t || ClrDatagridColumnToggle)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ColumnsService), ɵngcc0.ɵɵdirectiveInject(UNIQUE_ID), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(UNIQUE_ID)); };
ClrDatagridColumnToggle.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrDatagridColumnToggle, selectors: [["clr-dg-column-toggle"]], contentQueries: function ClrDatagridColumnToggle_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrDatagridColumnToggleTitle, 1);
        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrDatagridColumnToggleButton, 1);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customToggleTitle = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.customToggleButton = _t.first);
    } }, viewQuery: function ClrDatagridColumnToggle_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 1, ElementRef);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.allSelectedElement = _t.first);
    } }, hostVars: 4, hostBindings: function ClrDatagridColumnToggle_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("column-switch-wrapper", true)("active", ctx.openState);
    } }, features: [ɵngcc0.ɵɵProvidersFeature([UNIQUE_ID_PROVIDER, ClrPopoverEventsService, ClrPopoverPositionService, ClrPopoverToggleService])], ngContentSelectors: _c2, decls: 3, vars: 8, consts: [["role", "button", "type", "button", "clrPopoverAnchor", "", "clrPopoverOpenCloseButton", "", 1, "btn", "btn-sm", "btn-link", "column-toggle--action"], ["shape", "view-columns", "aria-hidden", "true"], ["class", "column-switch", "role", "dialog", "clrFocusTrap", "", 3, "id", 4, "clrPopoverContent", "clrPopoverContentAt", "clrPopoverContentOutsideClickToClose", "clrPopoverContentScrollToClose"], ["role", "dialog", "clrFocusTrap", "", 1, "column-switch", 3, "id"], [1, "switch-header"], ["tabindex", "-1", 1, "clr-sr-only"], ["allSelected", ""], [4, "ngIf"], ["clrPopoverCloseButton", "", "type", "button", 1, "btn", "btn-sm", "btn-link", "toggle-switch-close-button"], ["shape", "window-close", "aria-hidden", "true"], [1, "switch-content", "list-unstyled"], [4, "ngFor", "ngForOf", "ngForTrackBy"], [1, "switch-footer"], [3, "clrAllSelected", 4, "ngIf"], ["clrCheckbox", "", "type", "checkbox", 3, "disabled", "ngModel", "ngModelChange"], [3, "ngTemplateOutlet"], [3, "clrAllSelected"]], template: function ClrDatagridColumnToggle_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c1);
        ɵngcc0.ɵɵelementStart(0, "button", 0);
        ɵngcc0.ɵɵelement(1, "cds-icon", 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(2, ClrDatagridColumnToggle_div_2_Template, 14, 10, "div", 2);
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-controls", ctx.popoverId)("aria-owns", ctx.popoverId)("title", ctx.commonStrings.keys.pickColumns);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵattribute("title", ctx.commonStrings.keys.pickColumns);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("clrPopoverContent", ctx.openState)("clrPopoverContentAt", ctx.smartPosition)("clrPopoverContentOutsideClickToClose", true)("clrPopoverContentScrollToClose", true);
    } }, directives: [ɵngcc3.ClrPopoverAnchor, ɵngcc4.ClrPopoverOpenCloseButton, ɵngcc5.CdsIconCustomTag, ɵngcc6.ClrPopoverContent, ɵngcc7.FocusTrapDirective, ɵngcc8.NgIf, ɵngcc9.ClrPopoverCloseButton, ɵngcc8.NgForOf, ɵngcc10.ClrDatagridItemsTrackBy, ɵngcc11.ClrCheckboxWrapper, ɵngcc12.CheckboxControlValueAccessor, ɵngcc13.ClrCheckbox, ɵngcc12.NgControlStatus, ɵngcc12.NgModel, ɵngcc14.ClrLabel, ɵngcc8.NgTemplateOutlet, ɵngcc15.ClrDatagridColumnToggleButton], encapsulation: 2 });
ClrDatagridColumnToggle.ctorParameters = () => [
    { type: ClrCommonStringsService },
    { type: ColumnsService },
    { type: String, decorators: [{ type: Inject, args: [UNIQUE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: NgZone },
    { type: String, decorators: [{ type: Inject, args: [UNIQUE_ID,] }] }
];
ClrDatagridColumnToggle.propDecorators = {
    customToggleTitle: [{ type: ContentChild, args: [ClrDatagridColumnToggleTitle,] }],
    customToggleButton: [{ type: ContentChild, args: [ClrDatagridColumnToggleButton,] }],
    allSelectedElement: [{ type: ViewChild, args: ['allSelected', { read: ElementRef },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClrDatagridColumnToggle, [{
        type: Component,
        args: [{
                selector: 'clr-dg-column-toggle',
                template: `
    <button
      role="button"
      type="button"
      class="btn btn-sm btn-link column-toggle--action"
      clrPopoverAnchor
      clrPopoverOpenCloseButton
      [attr.aria-controls]="popoverId"
      [attr.aria-owns]="popoverId"
      [attr.title]="commonStrings.keys.pickColumns"
    >
      <cds-icon shape="view-columns" aria-hidden="true" [attr.title]="commonStrings.keys.pickColumns"></cds-icon>
    </button>
    <div
      class="column-switch"
      role="dialog"
      [attr.aria-label]="commonStrings.keys.showColumnsMenuDescription"
      [id]="popoverId"
      clrFocusTrap
      *clrPopoverContent="openState; at: smartPosition; outsideClickToClose: true; scrollToClose: true"
    >
      <div class="switch-header">
        <div class="clr-sr-only" tabindex="-1" #allSelected>{{ commonStrings.keys.allColumnsSelected }}</div>
        <ng-container *ngIf="!customToggleTitle">{{ commonStrings.keys.showColumns }}</ng-container>
        <ng-content select="clr-dg-column-toggle-title"></ng-content>
        <button
          class="btn btn-sm btn-link toggle-switch-close-button"
          clrPopoverCloseButton
          type="button"
          [attr.aria-label]="commonStrings.keys.close"
          [attr.title]="commonStrings.keys.close"
        >
          <cds-icon shape="window-close" aria-hidden="true" [attr.title]="commonStrings.keys.close"></cds-icon>
        </button>
      </div>
      <ul class="switch-content list-unstyled">
        <li *ngFor="let columnState of hideableColumnStates; trackBy: trackByFn">
          <clr-checkbox-wrapper>
            <input
              clrCheckbox
              type="checkbox"
              [disabled]="hasOnlyOneVisibleColumn && !columnState.hidden"
              [ngModel]="!columnState.hidden"
              (ngModelChange)="toggleColumnState(columnState, !$event)"
            />
            <label>
              <ng-template [ngTemplateOutlet]="columnState.titleTemplateRef"></ng-template>
            </label>
          </clr-checkbox-wrapper>
        </li>
      </ul>
      <div class="switch-footer">
        <ng-content select="clr-dg-column-toggle-button"></ng-content>
        <clr-dg-column-toggle-button *ngIf="!customToggleButton" (clrAllSelected)="allColumnsSelected()">
          {{ commonStrings.keys.selectAll }}
        </clr-dg-column-toggle-button>
      </div>
    </div>
  `,
                host: { '[class.column-switch-wrapper]': 'true', '[class.active]': 'openState' },
                providers: [UNIQUE_ID_PROVIDER, ClrPopoverEventsService, ClrPopoverPositionService, ClrPopoverToggleService]
            }]
    }], function () { return [{ type: ɵngcc1.ClrCommonStringsService }, { type: ɵngcc2.ColumnsService }, { type: String, decorators: [{
                type: Inject,
                args: [UNIQUE_ID]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: ɵngcc0.NgZone }, { type: String, decorators: [{
                type: Inject,
                args: [UNIQUE_ID]
            }] }]; }, { customToggleTitle: [{
            type: ContentChild,
            args: [ClrDatagridColumnToggleTitle]
        }], customToggleButton: [{
            type: ContentChild,
            args: [ClrDatagridColumnToggleButton]
        }], allSelectedElement: [{
            type: ViewChild,
            args: ['allSelected', { read: ElementRef }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,