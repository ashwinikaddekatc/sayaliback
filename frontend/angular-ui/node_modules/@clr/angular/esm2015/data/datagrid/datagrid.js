/*
 * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, ContentChild, ContentChildren, ElementRef, EventEmitter, Inject, Input, Output, Renderer2, ViewChild, ViewContainerRef, } from '@angular/core';
import { ClrDatagridColumn } from './datagrid-column';
import { ClrDatagridItems } from './datagrid-items';
import { ClrDatagridPlaceholder } from './datagrid-placeholder';
import { ClrDatagridRow } from './datagrid-row';
import { DatagridDisplayMode } from './enums/display-mode.enum';
import { DisplayModeService } from './providers/display-mode.service';
import { FiltersProvider } from './providers/filters';
import { ExpandableRowsCount } from './providers/global-expandable-rows';
import { Items } from './providers/items';
import { Page } from './providers/page';
import { RowActionService } from './providers/row-action-service';
import { Selection } from './providers/selection';
import { Sort } from './providers/sort';
import { StateDebouncer } from './providers/state-debouncer.provider';
import { StateProvider } from './providers/state.provider';
import { TableSizeService } from './providers/table-size.service';
import { DatagridRenderOrganizer } from './render/render-organizer';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { SelectionType } from './enums/selection-type';
import { ColumnsService } from './providers/columns.service';
import { DetailService } from './providers/detail.service';
import { UNIQUE_ID, UNIQUE_ID_PROVIDER } from '../../utils/id-generator/id-generator.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './render/render-organizer';
import * as ɵngcc2 from './providers/items';
import * as ɵngcc3 from './providers/global-expandable-rows';
import * as ɵngcc4 from './providers/selection';
import * as ɵngcc5 from './providers/row-action-service';
import * as ɵngcc6 from './providers/state.provider';
import * as ɵngcc7 from './providers/display-mode.service';
import * as ɵngcc8 from './providers/detail.service';
import * as ɵngcc9 from './providers/page';
import * as ɵngcc10 from '../../utils/i18n/common-strings.service';
import * as ɵngcc11 from '@angular/common';
import * as ɵngcc12 from '@angular/forms';
import * as ɵngcc13 from '../../forms/common/label';
import * as ɵngcc14 from './datagrid-placeholder';
import * as ɵngcc15 from '../../progress/spinner/spinner';

const _c0 = ["scrollableColumns"];
const _c1 = ["datagridTable"];
const _c2 = ["projectedDisplayColumns"];
const _c3 = ["projectedCalculationColumns"];
const _c4 = ["displayedRows"];
const _c5 = ["calculationRows"];
function ClrDatagrid_div_12_Template(rf, ctx) { if (rf & 1) {
    const _r13 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 23);
    ɵngcc0.ɵɵelementStart(1, "div", 24);
    ɵngcc0.ɵɵelementStart(2, "input", 25);
    ɵngcc0.ɵɵlistener("ngModelChange", function ClrDatagrid_div_12_Template_input_ngModelChange_2_listener($event) { ɵngcc0.ɵɵrestoreView(_r13); const ctx_r12 = ɵngcc0.ɵɵnextContext(); return ctx_r12.allSelected = $event; });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "label", 26);
    ɵngcc0.ɵɵelementStart(4, "span", 27);
    ɵngcc0.ɵɵtext(5);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(6, "div", 28);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("id", ctx_r2.selectAllId)("ngModel", ctx_r2.allSelected);
    ɵngcc0.ɵɵattribute("aria-label", ctx_r2.commonStrings.keys.selectAll);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("for", ctx_r2.selectAllId);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(ctx_r2.commonStrings.keys.selectAll);
} }
function ClrDatagrid_div_13_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 23);
    ɵngcc0.ɵɵelement(1, "div", 28);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("aria-label", ctx_r3.clrDgSingleSelectionAriaLabel);
} }
function ClrDatagrid_div_14_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 29);
    ɵngcc0.ɵɵelement(1, "div", 28);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("aria-label", ctx_r4.clrDgSingleActionableAriaLabel);
} }
function ClrDatagrid_div_15_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 30);
    ɵngcc0.ɵɵelement(1, "div", 28);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r5 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("aria-label", ctx_r5.clrDetailExpandableAriaLabel);
} }
function ClrDatagrid_clr_dg_placeholder_22_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "clr-dg-placeholder");
} }
function ClrDatagrid_div_24_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 31);
    ɵngcc0.ɵɵelementStart(1, "clr-spinner", 32);
    ɵngcc0.ɵɵtext(2, "Loading");
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} }
const _c6 = [[["clr-dg-action-bar"]], [["clr-dg-placeholder"]], [["clr-dg-footer"]], [["", "clrIfDetail", ""], ["clr-dg-detail"]]];
const _c7 = ["clr-dg-action-bar", "clr-dg-placeholder", "clr-dg-footer", "[clrIfDetail],clr-dg-detail"];
export class ClrDatagrid {
    constructor(organizer, items, expandableRows, selection, rowActionService, stateProvider, displayMode, renderer, detailService, datagridId, el, page, commonStrings) {
        this.organizer = organizer;
        this.items = items;
        this.expandableRows = expandableRows;
        this.selection = selection;
        this.rowActionService = rowActionService;
        this.stateProvider = stateProvider;
        this.displayMode = displayMode;
        this.renderer = renderer;
        this.detailService = detailService;
        this.el = el;
        this.page = page;
        this.commonStrings = commonStrings;
        /* reference to the enum so that template can access */
        this.SELECTION_TYPE = SelectionType;
        /**
         * Output emitted whenever the data needs to be refreshed, based on user action or external ones
         */
        this.refresh = new EventEmitter(false);
        this.selectedChanged = new EventEmitter(false);
        this.singleSelectedChanged = new EventEmitter(false);
        this.clrDgSingleSelectionAriaLabel = this.commonStrings.keys.singleSelectionAriaLabel;
        this.clrDgSingleActionableAriaLabel = this.commonStrings.keys.singleActionableAriaLabel;
        this.clrDetailExpandableAriaLabel = this.commonStrings.keys.detailExpandableAriaLabel;
        // Allows disabling of the auto focus on page/state changes (excludes focus management inside of popups)
        this.clrDgDisablePageFocus = false;
        /**
         * Subscriptions to all the services and queries changes
         */
        this._subscriptions = [];
        this.selectAllId = 'clr-dg-select-all-' + datagridId;
        this.detailService.id = datagridId;
    }
    /**
     * Freezes the datagrid while data is loading
     */
    get loading() {
        return this.items.loading;
    }
    set loading(value) {
        this.items.loading = value;
    }
    /**
     * Public method to re-trigger the computation of displayed items manually
     */
    dataChanged() {
        this.items.refresh();
    }
    /**
     * Array of all selected items
     */
    set selected(value) {
        if (value) {
            this.selection.selectionType = SelectionType.Multi;
        }
        else {
            this.selection.selectionType = SelectionType.None;
        }
        this.selection.updateCurrent(value, false);
    }
    /**
     * Selected item in single-select mode
     */
    set singleSelected(value) {
        this.selection.selectionType = SelectionType.Single;
        // the clrDgSingleSelected is updated in one of two cases:
        // 1. an explicit value is passed
        // 2. is being set to null or undefined, where previously it had a value
        if (value) {
            this.selection.currentSingle = value;
        }
        else if (this.selection.currentSingle) {
            this.selection.currentSingle = null;
        }
    }
    set clrDgPreserveSelection(state) {
        this.selection.preserveSelection = state;
    }
    /**
     * @deprecated since 2.0, remove in 3.0
     *
     * Selection/Deselection on row click mode
     */
    set rowSelectionMode(value) {
        this.selection.rowSelectionMode = value;
    }
    /**
     * Indicates if all currently displayed items are selected
     */
    get allSelected() {
        return this.selection.isAllSelected();
    }
    /**
     * Selects/deselects all currently displayed items
     * @param value
     */
    set allSelected(_value) {
        /**
         * This is a setter but we ignore the value.
         * It's strange, but it lets us have an indeterminate state where only
         * some of the items are selected.
         */
        this.selection.toggleAll();
    }
    ngAfterContentInit() {
        if (!this.items.smart) {
            this.items.all = this.rows.map((row) => row.item);
        }
        this._subscriptions.push(this.rows.changes.subscribe(() => {
            if (!this.items.smart) {
                this.items.all = this.rows.map((row) => row.item);
            }
            // Remove any projected rows from the displayedRows container
            // Necessary with Ivy off. See https://github.com/vmware/clarity/issues/4692
            for (let i = this._displayedRows.length - 1; i >= 0; i--) {
                if (this._displayedRows.get(i).destroyed) {
                    this._displayedRows.remove(i);
                }
            }
            this.rows.forEach(row => {
                this._displayedRows.insert(row._view);
            });
            // Try to update only when there is something cached and its open.
            if (this.detailService.state && this.detailService.isOpen) {
                const row = this.rows.find((row, index) => {
                    return this.items.trackBy(index, row.item) === this.items.trackBy(index, this.detailService.state);
                });
                /**
                 * Reopen updated row or close it
                 */
                row ? this.detailService.open(row.item, row.detailButton) : this.detailService.close();
            }
        }));
    }
    /**
     * Our setup happens in the view of some of our components, so we wait for it to be done before starting
     */
    ngAfterViewInit() {
        // TODO: determine if we can get rid of provider wiring in view init so that subscriptions can be done earlier
        this.refresh.emit(this.stateProvider.state);
        this._subscriptions.push(this.stateProvider.change.subscribe(state => this.refresh.emit(state)), this.selection.change.subscribe(s => {
            if (this.selection.selectionType === SelectionType.Single) {
                this.singleSelectedChanged.emit(s);
            }
            else if (this.selection.selectionType === SelectionType.Multi) {
                this.selectedChanged.emit(s);
            }
        }), this.page.change.subscribe(() => {
            if (!this.clrDgDisablePageFocus) {
                this.datagridTable.nativeElement.focus();
            }
        }), 
        // A subscription that listens for displayMode changes on the datagrid
        this.displayMode.view.subscribe(viewChange => {
            // Remove any projected columns from the projectedDisplayColumns container
            for (let i = this._projectedDisplayColumns.length; i > 0; i--) {
                this._projectedDisplayColumns.detach();
            }
            // Remove any projected columns from the projectedCalculationColumns container
            for (let i = this._projectedCalculationColumns.length; i > 0; i--) {
                this._projectedCalculationColumns.detach();
            }
            // Remove any projected rows from the calculationRows container
            for (let i = this._calculationRows.length; i > 0; i--) {
                this._calculationRows.detach();
            }
            // Remove any projected rows from the displayedRows container
            for (let i = this._displayedRows.length; i > 0; i--) {
                this._displayedRows.detach();
            }
            if (viewChange === DatagridDisplayMode.DISPLAY) {
                // Set state, style for the datagrid to DISPLAY and insert row & columns into containers
                this.renderer.removeClass(this.el.nativeElement, 'datagrid-calculate-mode');
                this.columns.forEach(column => {
                    this._projectedDisplayColumns.insert(column._view);
                });
                this.rows.forEach(row => {
                    this._displayedRows.insert(row._view);
                });
            }
            else {
                // Set state, style for the datagrid to CALCULATE and insert row & columns into containers
                this.renderer.addClass(this.el.nativeElement, 'datagrid-calculate-mode');
                this.columns.forEach(column => {
                    this._projectedCalculationColumns.insert(column._view);
                });
                this.rows.forEach(row => {
                    this._calculationRows.insert(row._view);
                });
            }
        }));
    }
    ngOnDestroy() {
        this._subscriptions.forEach((sub) => sub.unsubscribe());
    }
    resize() {
        this.organizer.resize();
    }
}
ClrDatagrid.ɵfac = function ClrDatagrid_Factory(t) { return new (t || ClrDatagrid)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DatagridRenderOrganizer), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Items), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ExpandableRowsCount), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.Selection), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.RowActionService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.StateProvider), ɵngcc0.ɵɵdirectiveInject(ɵngcc7.DisplayModeService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc8.DetailService), ɵngcc0.ɵɵdirectiveInject(UNIQUE_ID), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc9.Page), ɵngcc0.ɵɵdirectiveInject(ɵngcc10.ClrCommonStringsService)); };
ClrDatagrid.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrDatagrid, selectors: [["clr-datagrid"]], contentQueries: function ClrDatagrid_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrDatagridItems, 1);
        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrDatagridPlaceholder, 1);
        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrDatagridColumn, 0);
        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrDatagridRow, 0);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.iterator = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.placeholder = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columns = _t);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.rows = _t);
    } }, viewQuery: function ClrDatagrid_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 1, ViewContainerRef);
        ɵngcc0.ɵɵviewQuery(_c1, 1, ElementRef);
        ɵngcc0.ɵɵviewQuery(_c2, 1, ViewContainerRef);
        ɵngcc0.ɵɵviewQuery(_c3, 1, ViewContainerRef);
        ɵngcc0.ɵɵviewQuery(_c4, 1, ViewContainerRef);
        ɵngcc0.ɵɵviewQuery(_c5, 1, ViewContainerRef);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.scrollableColumns = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.datagridTable = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._projectedDisplayColumns = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._projectedCalculationColumns = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._displayedRows = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._calculationRows = _t.first);
    } }, hostVars: 4, hostBindings: function ClrDatagrid_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("datagrid-host", true)("datagrid-detail-open", ctx.detailService.isOpen);
    } }, inputs: { clrDgSingleSelectionAriaLabel: "clrDgSingleSelectionAriaLabel", clrDgSingleActionableAriaLabel: "clrDgSingleActionableAriaLabel", clrDetailExpandableAriaLabel: "clrDetailExpandableAriaLabel", clrDgDisablePageFocus: "clrDgDisablePageFocus", loading: ["clrDgLoading", "loading"], selected: ["clrDgSelected", "selected"], singleSelected: ["clrDgSingleSelected", "singleSelected"], clrDgPreserveSelection: "clrDgPreserveSelection", rowSelectionMode: ["clrDgRowSelection", "rowSelectionMode"] }, outputs: { refresh: "clrDgRefresh", selectedChanged: "clrDgSelectedChange", singleSelectedChanged: "clrDgSingleSelectedChange" }, features: [ɵngcc0.ɵɵProvidersFeature([
            Selection,
            Sort,
            FiltersProvider,
            Page,
            Items,
            DatagridRenderOrganizer,
            RowActionService,
            ExpandableRowsCount,
            StateDebouncer,
            DetailService,
            UNIQUE_ID_PROVIDER,
            StateProvider,
            TableSizeService,
            ColumnsService,
            DisplayModeService,
        ])], ngContentSelectors: _c7, decls: 32, vars: 7, consts: [[1, "datagrid-outer-wrapper"], [1, "datagrid-inner-wrapper"], [1, "datagrid"], ["datagrid", ""], [1, "datagrid-table-wrapper"], ["role", "grid", "tabindex", "-1", 1, "datagrid-table"], ["datagridTable", ""], ["role", "rowgroup", 1, "datagrid-header"], ["role", "row", 1, "datagrid-row"], [1, "datagrid-row-master", "datagrid-row-flex"], [1, "datagrid-row-sticky"], ["role", "columnheader", "class", "datagrid-column datagrid-select datagrid-fixed-column", 4, "ngIf"], ["role", "columnheader", "class", "datagrid-column datagrid-row-actions datagrid-fixed-column", 4, "ngIf"], ["role", "columnheader", "class", "datagrid-column datagrid-expandable-caret datagrid-fixed-column", 4, "ngIf"], [1, "datagrid-row-scrollable"], ["projectedDisplayColumns", ""], ["displayedRows", ""], [4, "ngIf"], ["class", "datagrid-spinner", 4, "ngIf"], [1, "datagrid-calculation-table"], [1, "datagrid-calculation-header"], ["projectedCalculationColumns", ""], ["calculationRows", ""], ["role", "columnheader", 1, "datagrid-column", "datagrid-select", "datagrid-fixed-column"], [1, "clr-checkbox-wrapper"], ["type", "checkbox", 3, "id", "ngModel", "ngModelChange"], [1, "clr-control-label", "clr-col-null", 3, "for"], [1, "clr-sr-only"], [1, "datagrid-column-separator"], ["role", "columnheader", 1, "datagrid-column", "datagrid-row-actions", "datagrid-fixed-column"], ["role", "columnheader", 1, "datagrid-column", "datagrid-expandable-caret", "datagrid-fixed-column"], [1, "datagrid-spinner"], ["clrMedium", ""]], template: function ClrDatagrid_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c6);
        ɵngcc0.ɵɵprojection(0);
        ɵngcc0.ɵɵelementStart(1, "div", 0);
        ɵngcc0.ɵɵelementStart(2, "div", 1);
        ɵngcc0.ɵɵelementStart(3, "div", 2, 3);
        ɵngcc0.ɵɵelementStart(5, "div", 4);
        ɵngcc0.ɵɵelementStart(6, "div", 5, 6);
        ɵngcc0.ɵɵelementStart(8, "div", 7);
        ɵngcc0.ɵɵelementStart(9, "div", 8);
        ɵngcc0.ɵɵelementStart(10, "div", 9);
        ɵngcc0.ɵɵelementStart(11, "div", 10);
        ɵngcc0.ɵɵtemplate(12, ClrDatagrid_div_12_Template, 7, 5, "div", 11);
        ɵngcc0.ɵɵtemplate(13, ClrDatagrid_div_13_Template, 2, 1, "div", 11);
        ɵngcc0.ɵɵtemplate(14, ClrDatagrid_div_14_Template, 2, 1, "div", 12);
        ɵngcc0.ɵɵtemplate(15, ClrDatagrid_div_15_Template, 2, 1, "div", 13);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(16, "div", 14);
        ɵngcc0.ɵɵelementContainer(17, null, 15);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementContainer(19, null, 16);
        ɵngcc0.ɵɵprojection(21, 1);
        ɵngcc0.ɵɵtemplate(22, ClrDatagrid_clr_dg_placeholder_22_Template, 1, 0, "clr-dg-placeholder", 17);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵprojection(23, 2);
        ɵngcc0.ɵɵtemplate(24, ClrDatagrid_div_24_Template, 3, 0, "div", 18);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵprojection(25, 3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(26, "div", 19);
        ɵngcc0.ɵɵelementStart(27, "div", 20);
        ɵngcc0.ɵɵelementContainer(28, null, 21);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementContainer(30, null, 22);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵattribute("aria-hidden", ctx.detailService.isOpen ? true : null);
        ɵngcc0.ɵɵadvance(9);
        ɵngcc0.ɵɵproperty("ngIf", ctx.selection.selectionType === ctx.SELECTION_TYPE.Multi);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.selection.selectionType === ctx.SELECTION_TYPE.Single);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.rowActionService.hasActionableRow);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.expandableRows.hasExpandableRow || ctx.detailService.enabled);
        ɵngcc0.ɵɵadvance(7);
        ɵngcc0.ɵɵproperty("ngIf", !ctx.placeholder);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.loading);
    } }, directives: [ɵngcc11.NgIf, ɵngcc12.CheckboxControlValueAccessor, ɵngcc12.NgControlStatus, ɵngcc12.NgModel, ɵngcc13.ClrLabel, ɵngcc14.ClrDatagridPlaceholder, ɵngcc15.ClrSpinner], encapsulation: 2 });
ClrDatagrid.ctorParameters = () => [
    { type: DatagridRenderOrganizer },
    { type: Items },
    { type: ExpandableRowsCount },
    { type: Selection },
    { type: RowActionService },
    { type: StateProvider },
    { type: DisplayModeService },
    { type: Renderer2 },
    { type: DetailService },
    { type: String, decorators: [{ type: Inject, args: [UNIQUE_ID,] }] },
    { type: ElementRef },
    { type: Page },
    { type: ClrCommonStringsService }
];
ClrDatagrid.propDecorators = {
    loading: [{ type: Input, args: ['clrDgLoading',] }],
    refresh: [{ type: Output, args: ['clrDgRefresh',] }],
    iterator: [{ type: ContentChild, args: [ClrDatagridItems,] }],
    selected: [{ type: Input, args: ['clrDgSelected',] }],
    selectedChanged: [{ type: Output, args: ['clrDgSelectedChange',] }],
    singleSelected: [{ type: Input, args: ['clrDgSingleSelected',] }],
    singleSelectedChanged: [{ type: Output, args: ['clrDgSingleSelectedChange',] }],
    clrDgSingleSelectionAriaLabel: [{ type: Input }],
    clrDgSingleActionableAriaLabel: [{ type: Input }],
    clrDetailExpandableAriaLabel: [{ type: Input }],
    clrDgDisablePageFocus: [{ type: Input }],
    clrDgPreserveSelection: [{ type: Input }],
    rowSelectionMode: [{ type: Input, args: ['clrDgRowSelection',] }],
    placeholder: [{ type: ContentChild, args: [ClrDatagridPlaceholder,] }],
    columns: [{ type: ContentChildren, args: [ClrDatagridColumn,] }],
    rows: [{ type: ContentChildren, args: [ClrDatagridRow,] }],
    scrollableColumns: [{ type: ViewChild, args: ['scrollableColumns', { read: ViewContainerRef },] }],
    datagridTable: [{ type: ViewChild, args: ['datagridTable', { read: ElementRef },] }],
    _projectedDisplayColumns: [{ type: ViewChild, args: ['projectedDisplayColumns', { read: ViewContainerRef },] }],
    _projectedCalculationColumns: [{ type: ViewChild, args: ['projectedCalculationColumns', { read: ViewContainerRef },] }],
    _displayedRows: [{ type: ViewChild, args: ['displayedRows', { read: ViewContainerRef },] }],
    _calculationRows: [{ type: ViewChild, args: ['calculationRows', { read: ViewContainerRef },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClrDatagrid, [{
        type: Component,
        args: [{
                selector: 'clr-datagrid',
                template: "<!--\n  ~ Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<ng-content select=\"clr-dg-action-bar\"></ng-content>\n<div class=\"datagrid-outer-wrapper\">\n  <div class=\"datagrid-inner-wrapper\">\n    <div class=\"datagrid\" #datagrid [attr.aria-hidden]=\"detailService.isOpen ? true : null\">\n      <div class=\"datagrid-table-wrapper\">\n        <div role=\"grid\" class=\"datagrid-table\" tabindex=\"-1\" #datagridTable>\n          <div role=\"rowgroup\" class=\"datagrid-header\">\n            <div role=\"row\" class=\"datagrid-row\">\n              <div class=\"datagrid-row-master datagrid-row-flex\">\n                <div class=\"datagrid-row-sticky\">\n                  <!--header for datagrid where you can select multiple rows -->\n                  <div\n                    role=\"columnheader\"\n                    class=\"datagrid-column datagrid-select datagrid-fixed-column\"\n                    *ngIf=\"selection.selectionType === SELECTION_TYPE.Multi\"\n                  >\n                    <div class=\"clr-checkbox-wrapper\">\n                      <input\n                        type=\"checkbox\"\n                        [id]=\"selectAllId\"\n                        [(ngModel)]=\"allSelected\"\n                        [attr.aria-label]=\"commonStrings.keys.selectAll\"\n                      />\n                      <!-- Usage of class clr-col-null here prevents clr-col-* classes from being added when a datagrid is wrapped inside clrForm -->\n                      <label [for]=\"selectAllId\" class=\"clr-control-label clr-col-null\">\n                        <span class=\"clr-sr-only\">{{commonStrings.keys.selectAll}}</span>\n                      </label>\n                    </div>\n\n                    <div class=\"datagrid-column-separator\"></div>\n                  </div>\n                  <!-- header for datagrid where you can select one row only -->\n                  <div\n                    role=\"columnheader\"\n                    class=\"datagrid-column datagrid-select datagrid-fixed-column\"\n                    *ngIf=\"selection.selectionType === SELECTION_TYPE.Single\"\n                    [attr.aria-label]=\"clrDgSingleSelectionAriaLabel\"\n                  >\n                    <div class=\"datagrid-column-separator\"></div>\n                  </div>\n                  <!-- header for single row action; only displayType if we have at least one actionable row in datagrid -->\n                  <div\n                    role=\"columnheader\"\n                    class=\"datagrid-column datagrid-row-actions datagrid-fixed-column\"\n                    *ngIf=\"rowActionService.hasActionableRow\"\n                    [attr.aria-label]=\"clrDgSingleActionableAriaLabel\"\n                  >\n                    <div class=\"datagrid-column-separator\"></div>\n                  </div>\n                  <!-- header for carets; only displayType if we have at least one expandable row in datagrid -->\n                  <div\n                    role=\"columnheader\"\n                    class=\"datagrid-column datagrid-expandable-caret datagrid-fixed-column\"\n                    *ngIf=\"expandableRows.hasExpandableRow || detailService.enabled\"\n                    [attr.aria-label]=\"clrDetailExpandableAriaLabel\"\n                  >\n                    <div class=\"datagrid-column-separator\"></div>\n                  </div>\n                </div>\n                <div class=\"datagrid-row-scrollable\">\n                  <ng-container #projectedDisplayColumns></ng-container>\n                </div>\n              </div>\n            </div>\n          </div>\n          <ng-container #displayedRows></ng-container>\n          <!-- Custom placeholder overrides the default empty one -->\n          <ng-content select=\"clr-dg-placeholder\"></ng-content>\n          <clr-dg-placeholder *ngIf=\"!placeholder\"></clr-dg-placeholder>\n        </div>\n      </div>\n    </div>\n    <ng-content select=\"clr-dg-footer\"></ng-content>\n    <div class=\"datagrid-spinner\" *ngIf=\"loading\">\n      <clr-spinner clrMedium>Loading</clr-spinner>\n    </div>\n  </div>\n  <ng-content select=\"[clrIfDetail],clr-dg-detail\"></ng-content>\n</div>\n\n<div class=\"datagrid-calculation-table\">\n  <div class=\"datagrid-calculation-header\">\n    <ng-container #projectedCalculationColumns></ng-container>\n  </div>\n  <ng-container #calculationRows></ng-container>\n</div>\n",
                providers: [
                    Selection,
                    Sort,
                    FiltersProvider,
                    Page,
                    Items,
                    DatagridRenderOrganizer,
                    RowActionService,
                    ExpandableRowsCount,
                    StateDebouncer,
                    DetailService,
                    UNIQUE_ID_PROVIDER,
                    StateProvider,
                    TableSizeService,
                    ColumnsService,
                    DisplayModeService,
                ],
                host: {
                    '[class.datagrid-host]': 'true',
                    '[class.datagrid-detail-open]': 'detailService.isOpen'
                }
            }]
    }], function () { return [{ type: ɵngcc1.DatagridRenderOrganizer }, { type: ɵngcc2.Items }, { type: ɵngcc3.ExpandableRowsCount }, { type: ɵngcc4.Selection }, { type: ɵngcc5.RowActionService }, { type: ɵngcc6.StateProvider }, { type: ɵngcc7.DisplayModeService }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc8.DetailService }, { type: String, decorators: [{
                type: Inject,
                args: [UNIQUE_ID]
            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc9.Page }, { type: ɵngcc10.ClrCommonStringsService }]; }, { refresh: [{
            type: Output,
            args: ['clrDgRefresh']
        }], selectedChanged: [{
            type: Output,
            args: ['clrDgSelectedChange']
        }], singleSelectedChanged: [{
            type: Output,
            args: ['clrDgSingleSelectedChange']
        }], clrDgSingleSelectionAriaLabel: [{
            type: Input
        }], clrDgSingleActionableAriaLabel: [{
            type: Input
        }], clrDetailExpandableAriaLabel: [{
            type: Input
        }], clrDgDisablePageFocus: [{
            type: Input
        }], loading: [{
            type: Input,
            args: ['clrDgLoading']
        }], selected: [{
            type: Input,
            args: ['clrDgSelected']
        }], singleSelected: [{
            type: Input,
            args: ['clrDgSingleSelected']
        }], clrDgPreserveSelection: [{
            type: Input
        }], rowSelectionMode: [{
            type: Input,
            args: ['clrDgRowSelection']
        }], iterator: [{
            type: ContentChild,
            args: [ClrDatagridItems]
        }], placeholder: [{
            type: ContentChild,
            args: [ClrDatagridPlaceholder]
        }], columns: [{
            type: ContentChildren,
            args: [ClrDatagridColumn]
        }], rows: [{
            type: ContentChildren,
            args: [ClrDatagridRow]
        }], scrollableColumns: [{
            type: ViewChild,
            args: ['scrollableColumns', { read: ViewContainerRef }]
        }], datagridTable: [{
            type: ViewChild,
            args: ['datagridTable', { read: ElementRef }]
        }], _projectedDisplayColumns: [{
            type: ViewChild,
            args: ['projectedDisplayColumns', { read: ViewContainerRef }]
        }], _projectedCalculationColumns: [{
            type: ViewChild,
            args: ['projectedCalculationColumns', { read: ViewContainerRef }]
        }], _displayedRows: [{
            type: ViewChild,
            args: ['displayedRows', { read: ViewContainerRef }]
        }], _calculationRows: [{
            type: ViewChild,
            args: ['calculationRows', { read: ViewContainerRef }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,