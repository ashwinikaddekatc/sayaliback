/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { DOCUMENT } from '@angular/common';
import { Component, Inject, NgZone, Renderer2, ViewChild } from '@angular/core';
import { KeyCodes, IEKeyCodes } from '../../utils/enums/key-codes.enum';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { UNIQUE_ID, UNIQUE_ID_PROVIDER } from '../../utils/id-generator/id-generator.service';
import { ColumnResizerService } from './providers/column-resizer.service';
import { TableSizeService } from './providers/table-size.service';
// Default resize length on each keyboard move event
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './providers/column-resizer.service';
import * as ɵngcc2 from './providers/table-size.service';
import * as ɵngcc3 from '../../utils/i18n/common-strings.service';
import * as ɵngcc4 from '../../utils/drag-and-drop/draggable/draggable';

const _c0 = ["resizeTracker"];
const _c1 = ["columnHandle"];
const KEYBOARD_RESIZE_LENGTH = 12;
export class ClrDatagridColumnSeparator {
    // Every column draggable separator should have its own unique ID
    // in order to not conflict with other draggables/droppables.
    constructor(columnResizerService, renderer, ngZone, tableSizeService, commonString, document, columnSeparatorId) {
        this.columnResizerService = columnResizerService;
        this.renderer = renderer;
        this.ngZone = ngZone;
        this.tableSizeService = tableSizeService;
        this.commonString = commonString;
        this.document = document;
        this.columnSeparatorId = columnSeparatorId;
        this.resizeStartedOnKeyDown = false;
        this.unlisteners = [];
    }
    get resizeTrackerEl() {
        return this.resizeTrackerRef.nativeElement;
    }
    get columnHandleEl() {
        return this.columnHandleRef.nativeElement;
    }
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            this.unlisteners.push(this.renderer.listen(this.columnHandleEl, 'keydown', event => {
                this.showTrackerOnFirstKeyDown(event);
                this.moveTrackerOnKeyDown(event);
            }));
            this.unlisteners.push(this.renderer.listen(this.columnHandleEl, 'keyup', event => {
                this.hideTrackerOnKeyUp(event);
            }));
        });
    }
    get descriptionId() {
        return `${this.columnSeparatorId}-aria-describedby`;
    }
    showTracker() {
        this.columnResizerService.startResize();
        const tableHeight = this.tableSizeService.getColumnDragHeight();
        this.renderer.setStyle(this.resizeTrackerEl, 'height', tableHeight);
        this.renderer.setStyle(this.resizeTrackerEl, 'display', 'block');
    }
    moveTracker(movedBy) {
        this.columnResizerService.calculateResize(movedBy);
        this.renderer.setStyle(this.resizeTrackerEl, 'transform', `translateX(${this.columnResizerService.resizedBy}px)`);
        this.renderer.setStyle(this.document.body, 'cursor', 'col-resize');
        this.redFlagTracker();
    }
    hideTracker() {
        this.columnResizerService.endResize();
        this.renderer.setStyle(this.resizeTrackerEl, 'display', 'none');
        this.renderer.setStyle(this.resizeTrackerEl, 'transform', `translateX(0px)`);
        this.renderer.setStyle(this.document.body, 'cursor', 'auto');
    }
    showTrackerOnFirstKeyDown(event) {
        if (!this.resizeStartedOnKeyDown && (this.isArrowLeftKeyEvent(event) || this.isArrowRightKeyEvent(event))) {
            this.resizeStartedOnKeyDown = true;
            this.renderer.addClass(this.resizeTrackerEl, 'on-arrow-key-resize');
            this.showTracker();
        }
    }
    moveTrackerOnKeyDown(event) {
        if (this.isArrowLeftKeyEvent(event)) {
            this.moveTracker(this.columnResizerService.resizedBy - KEYBOARD_RESIZE_LENGTH);
        }
        else if (this.isArrowRightKeyEvent(event)) {
            this.moveTracker(this.columnResizerService.resizedBy + KEYBOARD_RESIZE_LENGTH);
        }
    }
    hideTrackerOnKeyUp(event) {
        if (this.resizeStartedOnKeyDown && (this.isArrowLeftKeyEvent(event) || this.isArrowRightKeyEvent(event))) {
            this.resizeStartedOnKeyDown = false;
            this.renderer.removeClass(this.resizeTrackerEl, 'on-arrow-key-resize');
            this.hideTracker();
            this.columnHandleEl.focus();
        }
    }
    redFlagTracker() {
        if (this.isWithinMaxResizeRange !== this.columnResizerService.isWithinMaxResizeRange) {
            this.isWithinMaxResizeRange = this.columnResizerService.isWithinMaxResizeRange;
            if (!this.isWithinMaxResizeRange) {
                this.renderer.addClass(this.resizeTrackerEl, 'exceeded-max');
            }
            else {
                this.renderer.removeClass(this.resizeTrackerEl, 'exceeded-max');
            }
        }
    }
    isArrowLeftKeyEvent(event) {
        return event.key === KeyCodes.ArrowLeft || event.key === IEKeyCodes.ArrowLeft;
    }
    isArrowRightKeyEvent(event) {
        return event.key === KeyCodes.ArrowRight || event.key === IEKeyCodes.ArrowRight;
    }
    ngOnDestroy() {
        this.unlisteners.forEach(unlistener => unlistener());
    }
}
ClrDatagridColumnSeparator.ɵfac = function ClrDatagridColumnSeparator_Factory(t) { return new (t || ClrDatagridColumnSeparator)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ColumnResizerService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TableSizeService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(UNIQUE_ID)); };
ClrDatagridColumnSeparator.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrDatagridColumnSeparator, selectors: [["clr-dg-column-separator"]], viewQuery: function ClrDatagridColumnSeparator_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 1);
        ɵngcc0.ɵɵviewQuery(_c1, 1);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.resizeTrackerRef = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columnHandleRef = _t.first);
    } }, hostVars: 2, hostBindings: function ClrDatagridColumnSeparator_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("datagrid-column-separator", true);
    } }, features: [ɵngcc0.ɵɵProvidersFeature([UNIQUE_ID_PROVIDER])], decls: 6, vars: 5, consts: [["type", "button", "clrDraggable", "", 1, "datagrid-column-handle", 3, "clrGroup", "clrDragStart", "clrDragMove", "clrDragEnd"], ["columnHandle", ""], [1, "clr-sr-only"], [1, "datagrid-column-resize-tracker"], ["resizeTracker", ""]], template: function ClrDatagridColumnSeparator_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "button", 0, 1);
        ɵngcc0.ɵɵlistener("clrDragStart", function ClrDatagridColumnSeparator_Template_button_clrDragStart_0_listener() { return ctx.showTracker(); })("clrDragMove", function ClrDatagridColumnSeparator_Template_button_clrDragMove_0_listener($event) { return ctx.moveTracker($event.dragPosition.moveX); })("clrDragEnd", function ClrDatagridColumnSeparator_Template_button_clrDragEnd_0_listener() { return ctx.hideTracker(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(2, "span", 2);
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(4, "div", 3, 4);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("clrGroup", ctx.columnSeparatorId);
        ɵngcc0.ɵɵattribute("aria-label", ctx.commonString.keys.columnSeparatorAriaLabel)("aria-describedby", ctx.descriptionId);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵattribute("id", ctx.descriptionId);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.commonString.keys.columnSeparatorDescription, " ");
    } }, directives: [ɵngcc4.ClrDraggable], encapsulation: 2 });
ClrDatagridColumnSeparator.ctorParameters = () => [
    { type: ColumnResizerService },
    { type: Renderer2 },
    { type: NgZone },
    { type: TableSizeService },
    { type: ClrCommonStringsService },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: String, decorators: [{ type: Inject, args: [UNIQUE_ID,] }] }
];
ClrDatagridColumnSeparator.propDecorators = {
    resizeTrackerRef: [{ type: ViewChild, args: ['resizeTracker',] }],
    columnHandleRef: [{ type: ViewChild, args: ['columnHandle',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClrDatagridColumnSeparator, [{
        type: Component,
        args: [{
                selector: 'clr-dg-column-separator',
                template: `
    <button
      type="button"
      class="datagrid-column-handle"
      [attr.aria-label]="commonString.keys.columnSeparatorAriaLabel"
      [attr.aria-describedby]="descriptionId"
      clrDraggable
      [clrGroup]="columnSeparatorId"
      (clrDragStart)="showTracker()"
      (clrDragMove)="moveTracker($event.dragPosition.moveX)"
      (clrDragEnd)="hideTracker()"
      #columnHandle
    ></button>
    <span class="clr-sr-only" [attr.id]="descriptionId">
      {{ commonString.keys.columnSeparatorDescription }}
    </span>
    <div class="datagrid-column-resize-tracker" #resizeTracker></div>
  `,
                host: {
                    '[class.datagrid-column-separator]': 'true'
                },
                providers: [UNIQUE_ID_PROVIDER]
            }]
    }], function () { return [{ type: ɵngcc1.ColumnResizerService }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }, { type: ɵngcc2.TableSizeService }, { type: ɵngcc3.ClrCommonStringsService }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: String, decorators: [{
                type: Inject,
                args: [UNIQUE_ID]
            }] }]; }, { resizeTrackerRef: [{
            type: ViewChild,
            args: ['resizeTracker']
        }], columnHandleRef: [{
            type: ViewChild,
            args: ['columnHandle']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtY29sdW1uLXNlcGFyYXRvci5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY2xyLWFuZ3VsYXIvc3JjL2RhdGEvZGF0YWdyaWQvZGF0YWdyaWQtY29sdW1uLXNlcGFyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFpQixTQUFTLEVBQWMsTUFBTSxFQUFFLE1BQU0sRUFBYSxTQUFTLEVBQUUsU0FBUyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RILE9BQU8sRUFBRSxRQUFRLEVBQUUsVUFBVSxFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDeEUsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDbEYsT0FBTyxFQUFFLFNBQVMsRUFBRSxrQkFBa0IsRUFBRSxNQUFNLCtDQUErQyxDQUFDO0FBQzlGLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQzFFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBRWxFLG9EQUFvRDs7Ozs7Ozs7O0FBQ3BELE1BQU0sc0JBQXNCLEdBQUcsRUFBRSxDQUFDO0FBMkJsQyxNQUFNLE9BQU8sMEJBQTBCO0FBQUcsSUFtQnhDLGlFQUFpRTtBQUNuRSxJQUFFLDZEQUE2RDtBQUMvRCxJQUFFLFlBQ1Usb0JBQTBDLEVBQzFDLFFBQW1CLEVBQ25CLE1BQWMsRUFDZCxnQkFBa0MsRUFDbkMsWUFBcUMsRUFDbEIsUUFBYSxFQUNiLGlCQUF5QjtBQUNwRCxRQVBTLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7QUFBQyxRQUMzQyxhQUFRLEdBQVIsUUFBUSxDQUFXO0FBQUMsUUFDcEIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtBQUFDLFFBQ2YscUJBQWdCLEdBQWhCLGdC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LENBQUM7QUFDSCxJQUNVLG9CQUFvQixDQUFDLEtBQW9CO0FBQ25ELFFBQUksT0FBTyxLQUFLLENBQUMsR0FBRyxLQUFLLFFBQVEsQ0FBQyxVQUFVLElBQUksS0FBSyxDQUFDLEdBQUcsS0FBSyxVQUFVLENBQUMsVUFBVSxDQUFDO0FBQ3BGLElBQUUsQ0FBQztBQUNILElBQ0UsV0FBVztBQUNiLFFBQUksSUFBSSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDO0FBQ3pELElBQUUsQ0FBQztBQUNIO3NEQWhKQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLHlCQUF5QixrQkFDbkMsUUFBUSxFQUFFOzs7OztDQWlCVDtHQUNELElBQUksRUFBRSxzQkFDSixtQ0FBbUMsRUFBRSxNQUFNLG1CQUM1QztnQkFDRCxTQUFTLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxjQUNoQzs7Ozs7Ozs7Ozs7Ozs7Ozs7O2dFQUNJO0FBQUM7QUFBb0QsWUEvQmpELG9CQUFvQjtBQUFJLFlBSnlDLFNBQVM7QUFBSSxZQUFoQyxNQUFNO0FBQUksWUFLeEQsZ0JBQWdCO0FBQUksWUFIcEIsdUJBQXVCO0FBQUksNENBNEQvQixNQUFNLFNBQUMsUUFBUTtBQUFTLHlDQUN4QixNQUFNLFNBQUMsU0FBUztBQUFRO0FBQUc7QUFHbEIsK0JBOUJYLFNBQVMsU0FBQyxlQUFlO0FBQU8sOEJBTWhDLFNBQVMsU0FBQyxjQUFjO0FBQU07Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtMjAyMCBWTXdhcmUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFRoaXMgc29mdHdhcmUgaXMgcmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UuXG4gKiBUaGUgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBpbiBMSUNFTlNFIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHByb2plY3QuXG4gKi9cbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IEFmdGVyVmlld0luaXQsIENvbXBvbmVudCwgRWxlbWVudFJlZiwgSW5qZWN0LCBOZ1pvbmUsIE9uRGVzdHJveSwgUmVuZGVyZXIyLCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEtleUNvZGVzLCBJRUtleUNvZGVzIH0gZnJvbSAnLi4vLi4vdXRpbHMvZW51bXMva2V5LWNvZGVzLmVudW0nO1xuaW1wb3J0IHsgQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2UgfSBmcm9tICcuLi8uLi91dGlscy9pMThuL2NvbW1vbi1zdHJpbmdzLnNlcnZpY2UnO1xuaW1wb3J0IHsgVU5JUVVFX0lELCBVTklRVUVfSURfUFJPVklERVIgfSBmcm9tICcuLi8uLi91dGlscy9pZC1nZW5lcmF0b3IvaWQtZ2VuZXJhdG9yLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29sdW1uUmVzaXplclNlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy9jb2x1bW4tcmVzaXplci5zZXJ2aWNlJztcbmltcG9ydCB7IFRhYmxlU2l6ZVNlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy90YWJsZS1zaXplLnNlcnZpY2UnO1xuXG4vLyBEZWZhdWx0IHJlc2l6ZSBsZW5ndGggb24gZWFjaCBrZXlib2FyZCBtb3ZlIGV2ZW50XG5jb25zdCBLRVlCT0FSRF9SRVNJWkVfTEVOR1RIID0gMTI7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ2Nsci1kZy1jb2x1bW4tc2VwYXJhdG9yJyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8YnV0dG9uXG4gICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgIGNsYXNzPVwiZGF0YWdyaWQtY29sdW1uLWhhbmRsZVwiXG4gICAgICBbYXR0ci5hcmlhLWxhYmVsXT1cImNvbW1vblN0cmluZy5rZXlzLmNvbHVtblNlcGFyYXRvckFyaWFMYWJlbFwiXG4gICAgICBbYXR0ci5hcmlhLWRlc2NyaWJlZGJ5XT1cImRlc2NyaXB0aW9uSWRcIlxuICAgICAgY2xyRHJhZ2dhYmxlXG4gICAgICBbY2xyR3JvdXBdPVwiY29sdW1uU2VwYXJhdG9ySWRcIlxuICAgICAgKGNsckRyYWdTdGFydCk9XCJzaG93VHJhY2tlcigpXCJcbiAgICAgIChjbHJEcmFnTW92ZSk9XCJtb3ZlVHJhY2tlcigkZXZlbnQuZHJhZ1Bvc2l0aW9uLm1vdmVYKVwiXG4gICAgICAoY2xyRHJhZ0VuZCk9XCJoaWRlVHJhY2tlcigpXCJcbiAgICAgICNjb2x1bW5IYW5kbGVcbiAgICA+PC9idXR0b24+XG4gICAgPHNwYW4gY2xhc3M9XCJjbHItc3Itb25seVwiIFthdHRyLmlkXT1cImRlc2NyaXB0aW9uSWRcIj5cbiAgICAgIHt7IGNvbW1vblN0cmluZy5rZXlzLmNvbHVtblNlcGFyYXRvckRlc2NyaXB0aW9uIH19XG4gICAgPC9zcGFuPlxuICAgIDxkaXYgY2xhc3M9XCJkYXRhZ3JpZC1jb2x1bW4tcmVzaXplLXRyYWNrZXJcIiAjcmVzaXplVHJhY2tlcj48L2Rpdj5cbiAgYCxcbiAgaG9zdDoge1xuICAgICdbY2xhc3MuZGF0YWdyaWQtY29sdW1uLXNlcGFyYXRvcl0nOiAndHJ1ZScsXG4gIH0sXG4gIHByb3ZpZGVyczogW1VOSVFVRV9JRF9QUk9WSURFUl0sXG59KVxuZXhwb3J0IGNsYXNzIENsckRhdGFncmlkQ29sdW1uU2VwYXJhdG9yIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgQFZpZXdDaGlsZCgncmVzaXplVHJhY2tlcicpIHByaXZhdGUgcmVzaXplVHJhY2tlclJlZjogRWxlbWVudFJlZjtcblxuICBwcml2YXRlIGdldCByZXNpemVUcmFja2VyRWwoKSB7XG4gICAgcmV0dXJuIHRoaXMucmVzaXplVHJhY2tlclJlZi5uYXRpdmVFbGVtZW50O1xuICB9XG5cbiAgQFZpZXdDaGlsZCgnY29sdW1uSGFuZGxlJykgcHJpdmF0ZSBjb2x1bW5IYW5kbGVSZWY6IEVsZW1lbnRSZWY7XG5cbiAgcHJpdmF0ZSBnZXQgY29sdW1uSGFuZGxlRWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29sdW1uSGFuZGxlUmVmLm5hdGl2ZUVsZW1lbnQ7XG4gIH1cblxuICBwcml2YXRlIHJlc2l6ZVN0YXJ0ZWRPbktleURvd24gPSBmYWxzZTtcblxuICBwcml2YXRlIGlzV2l0aGluTWF4UmVzaXplUmFuZ2U6IGJvb2xlYW47XG5cbiAgcHJpdmF0ZSB1bmxpc3RlbmVyczogKCgpID0+IHZvaWQpW10gPSBbXTtcblxuICAvLyBFdmVyeSBjb2x1bW4gZHJhZ2dhYmxlIHNlcGFyYXRvciBzaG91bGQgaGF2ZSBpdHMgb3duIHVuaXF1ZSBJRFxuICAvLyBpbiBvcmRlciB0byBub3QgY29uZmxpY3Qgd2l0aCBvdGhlciBkcmFnZ2FibGVzL2Ryb3BwYWJsZXMuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgY29sdW1uUmVzaXplclNlcnZpY2U6IENvbHVtblJlc2l6ZXJTZXJ2aWNlLFxuICAgIHByaXZhdGUgcmVuZGVyZXI6IFJlbmRlcmVyMixcbiAgICBwcml2YXRlIG5nWm9uZTogTmdab25lLFxuICAgIHByaXZhdGUgdGFibGVTaXplU2VydmljZTogVGFibGVTaXplU2VydmljZSxcbiAgICBwdWJsaWMgY29tbW9uU3RyaW5nOiBDbHJDb21tb25TdHJpbmdzU2VydmljZSxcbiAgICBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIGRvY3VtZW50OiBhbnksXG4gICAgQEluamVjdChVTklRVUVfSUQpIHB1YmxpYyBjb2x1bW5TZXBhcmF0b3JJZDogc3RyaW5nXG4gICkge31cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4ge1xuICAgICAgdGhpcy51bmxpc3RlbmVycy5wdXNoKFxuICAgICAgICB0aGlzLnJlbmRlcmVyLmxpc3Rlbih0aGlzLmNvbHVtbkhhbmRsZUVsLCAna2V5ZG93bicsIGV2ZW50ID0+IHtcbiAgICAgICAgICB0aGlzLnNob3dUcmFja2VyT25GaXJzdEtleURvd24oZXZlbnQpO1xuICAgICAgICAgIHRoaXMubW92ZVRyYWNrZXJPbktleURvd24oZXZlbnQpO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICAgIHRoaXMudW5saXN0ZW5lcnMucHVzaChcbiAgICAgICAgdGhpcy5yZW5kZXJlci5saXN0ZW4odGhpcy5jb2x1bW5IYW5kbGVFbCwgJ2tleXVwJywgZXZlbnQgPT4ge1xuICAgICAgICAgIHRoaXMuaGlkZVRyYWNrZXJPbktleVVwKGV2ZW50KTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgfSk7XG4gIH1cblxuICBnZXQgZGVzY3JpcHRpb25JZCgpOiBzdHJpbmcge1xuICAgIHJldHVybiBgJHt0aGlzLmNvbHVtblNlcGFyYXRvcklkfS1hcmlhLWRlc2NyaWJlZGJ5YDtcbiAgfVxuXG4gIHB1YmxpYyBzaG93VHJhY2tlcigpOiB2b2lkIHtcbiAgICB0aGlzLmNvbHVtblJlc2l6ZXJTZXJ2aWNlLnN0YXJ0UmVzaXplKCk7XG4gICAgY29uc3QgdGFibGVIZWlnaHQgPSB0aGlzLnRhYmxlU2l6ZVNlcnZpY2UuZ2V0Q29sdW1uRHJhZ0hlaWdodCgpO1xuICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5yZXNpemVUcmFja2VyRWwsICdoZWlnaHQnLCB0YWJsZUhlaWdodCk7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLnJlc2l6ZVRyYWNrZXJFbCwgJ2Rpc3BsYXknLCAnYmxvY2snKTtcbiAgfVxuXG4gIHB1YmxpYyBtb3ZlVHJhY2tlcihtb3ZlZEJ5OiBudW1iZXIpOiB2b2lkIHtcbiAgICB0aGlzLmNvbHVtblJlc2l6ZXJTZXJ2aWNlLmNhbGN1bGF0ZVJlc2l6ZShtb3ZlZEJ5KTtcbiAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMucmVzaXplVHJhY2tlckVsLCAndHJhbnNmb3JtJywgYHRyYW5zbGF0ZVgoJHt0aGlzLmNvbHVtblJlc2l6ZXJTZXJ2aWNlLnJlc2l6ZWRCeX1weClgKTtcbiAgICB0aGlzLnJlbmRlcmVyLnNldFN0eWxlKHRoaXMuZG9jdW1lbnQuYm9keSwgJ2N1cnNvcicsICdjb2wtcmVzaXplJyk7XG4gICAgdGhpcy5yZWRGbGFnVHJhY2tlcigpO1xuICB9XG5cbiAgcHVibGljIGhpZGVUcmFja2VyKCk6IHZvaWQge1xuICAgIHRoaXMuY29sdW1uUmVzaXplclNlcnZpY2UuZW5kUmVzaXplKCk7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLnJlc2l6ZVRyYWNrZXJFbCwgJ2Rpc3BsYXknLCAnbm9uZScpO1xuICAgIHRoaXMucmVuZGVyZXIuc2V0U3R5bGUodGhpcy5yZXNpemVUcmFja2VyRWwsICd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlWCgwcHgpYCk7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRTdHlsZSh0aGlzLmRvY3VtZW50LmJvZHksICdjdXJzb3InLCAnYXV0bycpO1xuICB9XG5cbiAgcHJpdmF0ZSBzaG93VHJhY2tlck9uRmlyc3RLZXlEb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZCB7XG4gICAgaWYgKCF0aGlzLnJlc2l6ZVN0YXJ0ZWRPbktleURvd24gJiYgKHRoaXMuaXNBcnJvd0xlZnRLZXlFdmVudChldmVudCkgfHwgdGhpcy5pc0Fycm93UmlnaHRLZXlFdmVudChldmVudCkpKSB7XG4gICAgICB0aGlzLnJlc2l6ZVN0YXJ0ZWRPbktleURvd24gPSB0cnVlO1xuICAgICAgdGhpcy5yZW5kZXJlci5hZGRDbGFzcyh0aGlzLnJlc2l6ZVRyYWNrZXJFbCwgJ29uLWFycm93LWtleS1yZXNpemUnKTtcbiAgICAgIHRoaXMuc2hvd1RyYWNrZXIoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIG1vdmVUcmFja2VyT25LZXlEb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaXNBcnJvd0xlZnRLZXlFdmVudChldmVudCkpIHtcbiAgICAgIHRoaXMubW92ZVRyYWNrZXIodGhpcy5jb2x1bW5SZXNpemVyU2VydmljZS5yZXNpemVkQnkgLSBLRVlCT0FSRF9SRVNJWkVfTEVOR1RIKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuaXNBcnJvd1JpZ2h0S2V5RXZlbnQoZXZlbnQpKSB7XG4gICAgICB0aGlzLm1vdmVUcmFja2VyKHRoaXMuY29sdW1uUmVzaXplclNlcnZpY2UucmVzaXplZEJ5ICsgS0VZQk9BUkRfUkVTSVpFX0xFTkdUSCk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBoaWRlVHJhY2tlck9uS2V5VXAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5yZXNpemVTdGFydGVkT25LZXlEb3duICYmICh0aGlzLmlzQXJyb3dMZWZ0S2V5RXZlbnQoZXZlbnQpIHx8IHRoaXMuaXNBcnJvd1JpZ2h0S2V5RXZlbnQoZXZlbnQpKSkge1xuICAgICAgdGhpcy5yZXNpemVTdGFydGVkT25LZXlEb3duID0gZmFsc2U7XG4gICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMucmVzaXplVHJhY2tlckVsLCAnb24tYXJyb3cta2V5LXJlc2l6ZScpO1xuICAgICAgdGhpcy5oaWRlVHJhY2tlcigpO1xuICAgICAgdGhpcy5jb2x1bW5IYW5kbGVFbC5mb2N1cygpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgcmVkRmxhZ1RyYWNrZXIoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuaXNXaXRoaW5NYXhSZXNpemVSYW5nZSAhPT0gdGhpcy5jb2x1bW5SZXNpemVyU2VydmljZS5pc1dpdGhpbk1heFJlc2l6ZVJhbmdlKSB7XG4gICAgICB0aGlzLmlzV2l0aGluTWF4UmVzaXplUmFuZ2UgPSB0aGlzLmNvbHVtblJlc2l6ZXJTZXJ2aWNlLmlzV2l0aGluTWF4UmVzaXplUmFuZ2U7XG4gICAgICBpZiAoIXRoaXMuaXNXaXRoaW5NYXhSZXNpemVSYW5nZSkge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLmFkZENsYXNzKHRoaXMucmVzaXplVHJhY2tlckVsLCAnZXhjZWVkZWQtbWF4Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUNsYXNzKHRoaXMucmVzaXplVHJhY2tlckVsLCAnZXhjZWVkZWQtbWF4Jyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBpc0Fycm93TGVmdEtleUV2ZW50KGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgcmV0dXJuIGV2ZW50LmtleSA9PT0gS2V5Q29kZXMuQXJyb3dMZWZ0IHx8IGV2ZW50LmtleSA9PT0gSUVLZXlDb2Rlcy5BcnJvd0xlZnQ7XG4gIH1cblxuICBwcml2YXRlIGlzQXJyb3dSaWdodEtleUV2ZW50KGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XG4gICAgcmV0dXJuIGV2ZW50LmtleSA9PT0gS2V5Q29kZXMuQXJyb3dSaWdodCB8fCBldmVudC5rZXkgPT09IElFS2V5Q29kZXMuQXJyb3dSaWdodDtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMudW5saXN0ZW5lcnMuZm9yRWFjaCh1bmxpc3RlbmVyID0+IHVubGlzdGVuZXIoKSk7XG4gIH1cbn1cbiJdfQ==