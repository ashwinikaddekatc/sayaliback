/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, EventEmitter, Input, Output, Inject, PLATFORM_ID, ViewChild, ElementRef, } from '@angular/core';
import { CustomFilter } from './providers/custom-filter';
import { FiltersProvider } from './providers/filters';
import { DatagridFilterRegistrar } from './utils/datagrid-filter-registrar';
import { ClrAxis } from '../../utils/popover/enums/axis.enum';
import { ClrSide } from '../../utils/popover/enums/side.enum';
import { ClrAlignment } from '../../utils/popover/enums/alignment.enum';
import { UNIQUE_ID, UNIQUE_ID_PROVIDER } from '../../utils/id-generator/id-generator.service';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { isPlatformBrowser } from '@angular/common';
/**
 * Custom filter that can be added in any column to override the default object property string filter.
 * The reason this is not just an input on DatagridColumn is because we need the filter's template to be projected,
 * since it can be anything (not just a text input).
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './providers/filters';
import * as ɵngcc2 from '../../utils/i18n/common-strings.service';
import * as ɵngcc3 from '../../utils/popover/providers/popover-toggle.service';
import * as ɵngcc4 from '../../utils/popover/popover-anchor';
import * as ɵngcc5 from '../../utils/popover/popover-open-close-button';
import * as ɵngcc6 from '../../icon/icon';
import * as ɵngcc7 from '../../utils/popover/popover-content';
import * as ɵngcc8 from '../../utils/focus-trap/focus-trap.directive';
import * as ɵngcc9 from '../../utils/popover/popover-close-button';

const _c0 = ["anchor"];
function ClrDatagridFilter_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 4);
    ɵngcc0.ɵɵelementStart(1, "div", 5);
    ɵngcc0.ɵɵelementStart(2, "button", 6);
    ɵngcc0.ɵɵelement(3, "cds-icon", 7);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵprojection(4);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("id", ctx_r1.popoverId);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵattribute("title", ctx_r1.commonStrings.keys.close);
} }
const _c1 = ["*"];
export class ClrDatagridFilter extends DatagridFilterRegistrar {
    constructor(_filters, commonStrings, smartToggleService, platformId, popoverId) {
        super(_filters);
        this.commonStrings = commonStrings;
        this.smartToggleService = smartToggleService;
        this.platformId = platformId;
        this.popoverId = popoverId;
        this.subs = [];
        this.ariaExpanded = false;
        // Smart Popover
        this.smartPosition = {
            axis: ClrAxis.VERTICAL,
            side: ClrSide.AFTER,
            anchor: ClrAlignment.END,
            content: ClrAlignment.END,
        };
        this._open = false;
        this.openChange = new EventEmitter(false);
        this.subs.push(smartToggleService.openChange.subscribe(change => {
            this.open = change;
            this.ariaExpanded = change;
        }));
    }
    get open() {
        return this._open;
    }
    set open(open) {
        open = !!open;
        if (this.open !== open) {
            this.smartToggleService.open = open;
            this.openChange.emit(open);
            if (!open && isPlatformBrowser(this.platformId)) {
                this.anchor.nativeElement.focus();
            }
            // keep track of the state
            this._open = open;
        }
    }
    set customFilter(filter) {
        this.setFilter(filter);
    }
    /**
     * Indicates if the filter is currently active
     */
    get active() {
        return !!this.filter && this.filter.isActive();
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this.subs.forEach(sub => sub.unsubscribe());
    }
}
ClrDatagridFilter.ɵfac = function ClrDatagridFilter_Factory(t) { return new (t || ClrDatagridFilter)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FiltersProvider), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ClrPopoverToggleService), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(UNIQUE_ID)); };
ClrDatagridFilter.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrDatagridFilter, selectors: [["clr-dg-filter"]], viewQuery: function ClrDatagridFilter_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 1, ElementRef);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.anchor = _t.first);
    } }, inputs: { open: ["clrDgFilterOpen", "open"], customFilter: ["clrDgFilter", "customFilter"] }, outputs: { openChange: "clrDgFilterOpenChange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CustomFilter, useExisting: ClrDatagridFilter }, UNIQUE_ID_PROVIDER]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c1, decls: 4, vars: 13, consts: [["type", "button", "clrPopoverAnchor", "", "clrPopoverOpenCloseButton", "", 1, "datagrid-filter-toggle"], ["anchor", ""], ["solid", ""], ["class", "datagrid-filter", "clrFocusTrap", "", 3, "id", 4, "clrPopoverContent", "clrPopoverContentAt", "clrPopoverContentOutsideClickToClose", "clrPopoverContentScrollToClose"], ["clrFocusTrap", "", 1, "datagrid-filter", 3, "id"], [1, "datagrid-filter-close-wrapper"], ["type", "button", "clrPopoverCloseButton", "", 1, "close"], ["shape", "window-close"]], template: function ClrDatagridFilter_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "button", 0, 1);
        ɵngcc0.ɵɵelement(2, "cds-icon", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, ClrDatagridFilter_div_3_Template, 5, 2, "div", 3);
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("datagrid-filter-open", ctx.open)("datagrid-filtered", ctx.active);
        ɵngcc0.ɵɵattribute("aria-label", ctx.commonStrings.keys.datagridFilterAriaLabel)("aria-expanded", ctx.ariaExpanded)("aria-controls", ctx.popoverId);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵattribute("status", ctx.active ? "info" : null)("shape", ctx.active ? "filter-grid-circle" : "filter-grid");
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("clrPopoverContent", ctx.open)("clrPopoverContentAt", ctx.smartPosition)("clrPopoverContentOutsideClickToClose", true)("clrPopoverContentScrollToClose", true);
    } }, directives: [ɵngcc4.ClrPopoverAnchor, ɵngcc5.ClrPopoverOpenCloseButton, ɵngcc6.CdsIconCustomTag, ɵngcc7.ClrPopoverContent, ɵngcc8.FocusTrapDirective, ɵngcc9.ClrPopoverCloseButton], encapsulation: 2 });
ClrDatagridFilter.ctorParameters = () => [
    { type: FiltersProvider },
    { type: ClrCommonStringsService },
    { type: ClrPopoverToggleService },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: String, decorators: [{ type: Inject, args: [UNIQUE_ID,] }] }
];
ClrDatagridFilter.propDecorators = {
    anchor: [{ type: ViewChild, args: ['anchor', { read: ElementRef },] }],
    open: [{ type: Input, args: ['clrDgFilterOpen',] }],
    openChange: [{ type: Output, args: ['clrDgFilterOpenChange',] }],
    customFilter: [{ type: Input, args: ['clrDgFilter',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClrDatagridFilter, [{
        type: Component,
        args: [{
                selector: 'clr-dg-filter',
                // We register this component as a CustomFilter, for the parent column to detect it.
                providers: [{ provide: CustomFilter, useExisting: ClrDatagridFilter }, UNIQUE_ID_PROVIDER],
                template: `
    <button
      class="datagrid-filter-toggle"
      type="button"
      #anchor
      [attr.aria-label]="commonStrings.keys.datagridFilterAriaLabel"
      [attr.aria-expanded]="ariaExpanded"
      [attr.aria-controls]="popoverId"
      clrPopoverAnchor
      clrPopoverOpenCloseButton
      [class.datagrid-filter-open]="open"
      [class.datagrid-filtered]="active"
    >
      <cds-icon
        [attr.status]="active ? 'info' : null"
        [attr.shape]="active ? 'filter-grid-circle' : 'filter-grid'"
        solid
      ></cds-icon>
    </button>

    <div
      class="datagrid-filter"
      [id]="popoverId"
      clrFocusTrap
      *clrPopoverContent="open; at: smartPosition; outsideClickToClose: true; scrollToClose: true"
    >
      <div class="datagrid-filter-close-wrapper">
        <button type="button" class="close" clrPopoverCloseButton>
          <cds-icon shape="window-close" [attr.title]="commonStrings.keys.close"></cds-icon>
        </button>
      </div>

      <ng-content></ng-content>
    </div>
  `
            }]
    }], function () { return [{ type: ɵngcc1.FiltersProvider }, { type: ɵngcc2.ClrCommonStringsService }, { type: ɵngcc3.ClrPopoverToggleService }, { type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: String, decorators: [{
                type: Inject,
                args: [UNIQUE_ID]
            }] }]; }, { openChange: [{
            type: Output,
            args: ['clrDgFilterOpenChange']
        }], open: [{
            type: Input,
            args: ['clrDgFilterOpen']
        }], customFilter: [{
            type: Input,
            args: ['clrDgFilter']
        }], anchor: [{
            type: ViewChild,
            args: ['anchor', { read: ElementRef }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,