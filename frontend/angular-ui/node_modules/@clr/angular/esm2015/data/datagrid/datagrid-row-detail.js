/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, ContentChildren, Input } from '@angular/core';
import { ClrDatagridCell } from './datagrid-cell';
import { ExpandableRowsCount } from './providers/global-expandable-rows';
import { RowActionService } from './providers/row-action-service';
import { Selection } from './providers/selection';
import { SelectionType } from './enums/selection-type';
import { DatagridIfExpandService } from './datagrid-if-expanded.service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
/**
 * Generic bland container serving various purposes for Datagrid.
 * For instance, it can help span a text over multiple rows in detail view.
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './providers/selection';
import * as ɵngcc2 from './providers/row-action-service';
import * as ɵngcc3 from './datagrid-if-expanded.service';
import * as ɵngcc4 from './providers/global-expandable-rows';
import * as ɵngcc5 from '../../utils/i18n/common-strings.service';

const _c0 = ["*"];
export class ClrDatagridRowDetail {
    constructor(selection, rowActionService, expand, expandableRows, commonStrings) {
        this.selection = selection;
        this.rowActionService = rowActionService;
        this.expand = expand;
        this.expandableRows = expandableRows;
        this.commonStrings = commonStrings;
        /* reference to the enum so that template can access it */
        this.SELECTION_TYPE = SelectionType;
        this.subscriptions = [];
        this.replacedRow = false;
    }
    set replace(value) {
        this.expand.setReplace(!!value);
    }
    ngAfterContentInit() {
        this.subscriptions.push(this.expand.replace.subscribe(replaceChange => {
            this.replacedRow = replaceChange;
        }));
    }
    ngOnDestroy() {
        this.subscriptions.forEach(sub => sub.unsubscribe());
    }
    get beginningOfExpandableContentAriaText() {
        return (this._beginningOfExpandableContentAriaText ||
            `${this.commonStrings.keys.dategridExpandableBeginningOf} ${this.commonStrings.keys.dategridExpandableRowContent}`);
    }
    get endOfExpandableContentAriaText() {
        return (this._endOfExpandableContentAriaText ||
            `${this.commonStrings.keys.dategridExpandableEndOf} ${this.commonStrings.keys.dategridExpandableRowContent}`);
    }
}
ClrDatagridRowDetail.ɵfac = function ClrDatagridRowDetail_Factory(t) { return new (t || ClrDatagridRowDetail)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.Selection), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.RowActionService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.DatagridIfExpandService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ExpandableRowsCount), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ClrCommonStringsService)); };
ClrDatagridRowDetail.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrDatagridRowDetail, selectors: [["clr-dg-row-detail"]], contentQueries: function ClrDatagridRowDetail_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrDatagridCell, 0);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.cells = _t);
    } }, hostVars: 7, hostBindings: function ClrDatagridRowDetail_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("id", ctx.expand.expandableId);
        ɵngcc0.ɵɵclassProp("datagrid-row-flex", true)("datagrid-row-detail", true)("datagrid-container", ctx.cells.length === 0);
    } }, inputs: { replace: ["clrDgReplace", "replace"], _beginningOfExpandableContentAriaText: ["clrRowDetailBeginningAriaText", "_beginningOfExpandableContentAriaText"], _endOfExpandableContentAriaText: ["clrRowDetailEndAriaText", "_endOfExpandableContentAriaText"] }, ngContentSelectors: _c0, decls: 5, vars: 3, consts: [[1, "clr-sr-only"]], template: function ClrDatagridRowDetail_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵprojection(2);
        ɵngcc0.ɵɵelementStart(3, "div", 0);
        ɵngcc0.ɵɵtext(4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate2(" ", ctx.beginningOfExpandableContentAriaText, " ", ctx.commonStrings.keys.dategridExpandableRowsHelperText, " ");
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ctx.endOfExpandableContentAriaText);
    } }, encapsulation: 2 });
ClrDatagridRowDetail.ctorParameters = () => [
    { type: Selection },
    { type: RowActionService },
    { type: DatagridIfExpandService },
    { type: ExpandableRowsCount },
    { type: ClrCommonStringsService }
];
ClrDatagridRowDetail.propDecorators = {
    cells: [{ type: ContentChildren, args: [ClrDatagridCell,] }],
    replace: [{ type: Input, args: ['clrDgReplace',] }],
    _beginningOfExpandableContentAriaText: [{ type: Input, args: ['clrRowDetailBeginningAriaText',] }],
    _endOfExpandableContentAriaText: [{ type: Input, args: ['clrRowDetailEndAriaText',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClrDatagridRowDetail, [{
        type: Component,
        args: [{
                selector: 'clr-dg-row-detail',
                template: `
    <div class="clr-sr-only">
      {{ beginningOfExpandableContentAriaText }} {{ commonStrings.keys.dategridExpandableRowsHelperText }}
    </div>
    <ng-content></ng-content>
    <div class="clr-sr-only">{{ endOfExpandableContentAriaText }}</div>
  `,
                host: {
                    '[class.datagrid-row-flex]': 'true',
                    '[class.datagrid-row-detail]': 'true',
                    '[class.datagrid-container]': 'cells.length === 0',
                    '[attr.id]': 'expand.expandableId'
                }
            }]
    }], function () { return [{ type: ɵngcc1.Selection }, { type: ɵngcc2.RowActionService }, { type: ɵngcc3.DatagridIfExpandService }, { type: ɵngcc4.ExpandableRowsCount }, { type: ɵngcc5.ClrCommonStringsService }]; }, { replace: [{
            type: Input,
            args: ['clrDgReplace']
        }], cells: [{
            type: ContentChildren,
            args: [ClrDatagridCell]
        }], _beginningOfExpandableContentAriaText: [{
            type: Input,
            args: ['clrRowDetailBeginningAriaText']
        }], _endOfExpandableContentAriaText: [{
            type: Input,
            args: ['clrRowDetailEndAriaText']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWdyaWQtcm93LWRldGFpbC5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY2xyLWFuZ3VsYXIvc3JjL2RhdGEvZGF0YWdyaWQvZGF0YWdyaWQtcm93LWRldGFpbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxPQUFPLEVBQW9CLFNBQVMsRUFBRSxlQUFlLEVBQUUsS0FBSyxFQUF3QixNQUFNLGVBQWUsQ0FBQztBQUcxRyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDbEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFDekUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sZ0NBQWdDLENBQUM7QUFDbEUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2xELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN2RCxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxnQ0FBZ0MsQ0FBQztBQUN6RSxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUVsRjtBQUNBO0FBQ0E7QUFDQSxHQUFHOzs7Ozs7Ozs7QUFpQkgsTUFBTSxPQUFPLG9CQUFvQjtBQUFHLElBSWxDLFlBQ1MsU0FBb0IsRUFDcEIsZ0JBQWtDLEVBQ2xDLE1BQStCLEVBQy9CLGNBQW1DLEVBQ25DLGFBQXNDO0FBQzlDLFFBTFEsY0FBUyxHQUFULFNBQVMsQ0FBVztBQUFDLFFBQ3JCLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7QUFBQyxRQUNuQyxXQUFNLEdBQU4sTUFBTSxDQUF5QjtBQUFDLFFBQ2hDLG1CQUFjLEdBQWQsY0FBYyxDQUFxQjtBQUFDLFFBQ3BDLGtCQUFhLEdBQWIsYUFBYSxDQUF5QjtBQUNqRCxRQVRFLDBEQUEwRDtBQUM1RCxRQUFTLG1CQUFjLEdBQUcsYUFBYSxDQUFDO0FBQ3hDLFFBZVUsa0JBQWEsR0FBbUIsRUFBRSxDQUFDO0FBQzdDLFFBQVMsZ0JBQVcsR0FBRyxLQUFLLENBQUM7QUFDN0IsSUFWSyxDQUFDO0FBQ04sSUFHRSxJQUNJLE9BQU8sQ0FBQyxLQUFjO0FBQzVCLFFBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3BDLElBQUUsQ0FBQztBQUNILElBR0Usa0JBQWtCO0FBQ3BCLFFBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQ3JCLElBQUksQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsRUFBRTtBQUNwRCxZQUFRLElBQUksQ0FBQyxXQUFXLEdBQUcsYUFBYSxDQUFDO0FBQ3pDLFFBQU0sQ0FBQyxDQUFDLENBQ0gsQ0FBQztBQUNOLElBQUUsQ0FBQztBQUNILElBQ0UsV0FBVztBQUNiLFFBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLENBQUMsQ0FBQztBQUN6RCxJQUFFLENBQUM7QUFDSCxJQUVFLElBQVcsb0NBQW9DO0FBQ2pELFFBQUksT0FBTyxDQUNMLElBQUksQ0FBQyxxQ0FBcUM7QUFDaEQsWUFBTSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLDZCQUE2QixJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLDRCQUE0QixFQUFFLENBQ25ILENBQUM7QUFDTixJQUFFLENBQUM7QUFDSCxJQUVFLElBQVcsOEJBQThCO0FBQzNDLFFBQUksT0FBTyxDQUNMLElBQUksQ0FBQywrQkFBK0I7QUFDMUMsWUFBTSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLHVCQUF1QixJQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLDRCQUE0QixFQUFFLENBQzdHLENBQUM7QUFDTixJQUFFLENBQUM7QUFDSDtnREFoRUMsU0FBUyxTQUFDLGtCQUNULFFBQVEsRUFBRSxtQkFBbUIsa0JBQzdCLFFBQVEsRUFBRTtpQkFNVCxrQkFDRCxJQUFJLEVBQUUsc0JBQ0osMkJBQTJCLEVBQUUsTUFBTSxzQkFDbkMsNkJBQTZCLEVBQUUsTUFBTSxzQkFDckMsNEJBQTRCLEVBQUU7Y0FBb0Isc0JBQ2xELFdBQVcsRUFBRTtTQUFxQjtRQUNuQztNQUNGOzs7Ozs7Ozs7Ozs7Ozs7Ozs7NkJBQ0k7QUFBQztBQUE4QyxZQXpCM0MsU0FBUztBQUFJLFlBRGIsZ0JBQWdCO0FBQUksWUFHcEIsdUJBQXVCO0FBQUksWUFKM0IsbUJBQW1CO0FBQUksWUFLdkIsdUJBQXVCO0FBQUc7QUFBRztBQUF3QyxvQkFrQzNFLGVBQWUsU0FBQyxlQUFlO0FBQU8sc0JBRXRDLEtBQUssU0FBQyxjQUFjO0FBQ2xCLG9EQWtCRixLQUFLLFNBQUMsK0JBQStCO0FBQU8sOENBUTVDLEtBQUssU0FBQyx5QkFBeUI7QUFBTTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDIwIFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuaW1wb3J0IHsgQWZ0ZXJDb250ZW50SW5pdCwgQ29tcG9uZW50LCBDb250ZW50Q2hpbGRyZW4sIElucHV0LCBPbkRlc3Ryb3ksIFF1ZXJ5TGlzdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IENsckRhdGFncmlkQ2VsbCB9IGZyb20gJy4vZGF0YWdyaWQtY2VsbCc7XG5pbXBvcnQgeyBFeHBhbmRhYmxlUm93c0NvdW50IH0gZnJvbSAnLi9wcm92aWRlcnMvZ2xvYmFsLWV4cGFuZGFibGUtcm93cyc7XG5pbXBvcnQgeyBSb3dBY3Rpb25TZXJ2aWNlIH0gZnJvbSAnLi9wcm92aWRlcnMvcm93LWFjdGlvbi1zZXJ2aWNlJztcbmltcG9ydCB7IFNlbGVjdGlvbiB9IGZyb20gJy4vcHJvdmlkZXJzL3NlbGVjdGlvbic7XG5pbXBvcnQgeyBTZWxlY3Rpb25UeXBlIH0gZnJvbSAnLi9lbnVtcy9zZWxlY3Rpb24tdHlwZSc7XG5pbXBvcnQgeyBEYXRhZ3JpZElmRXhwYW5kU2VydmljZSB9IGZyb20gJy4vZGF0YWdyaWQtaWYtZXhwYW5kZWQuc2VydmljZSc7XG5pbXBvcnQgeyBDbHJDb21tb25TdHJpbmdzU2VydmljZSB9IGZyb20gJy4uLy4uL3V0aWxzL2kxOG4vY29tbW9uLXN0cmluZ3Muc2VydmljZSc7XG5cbi8qKlxuICogR2VuZXJpYyBibGFuZCBjb250YWluZXIgc2VydmluZyB2YXJpb3VzIHB1cnBvc2VzIGZvciBEYXRhZ3JpZC5cbiAqIEZvciBpbnN0YW5jZSwgaXQgY2FuIGhlbHAgc3BhbiBhIHRleHQgb3ZlciBtdWx0aXBsZSByb3dzIGluIGRldGFpbCB2aWV3LlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjbHItZGctcm93LWRldGFpbCcsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiBjbGFzcz1cImNsci1zci1vbmx5XCI+XG4gICAgICB7eyBiZWdpbm5pbmdPZkV4cGFuZGFibGVDb250ZW50QXJpYVRleHQgfX0ge3sgY29tbW9uU3RyaW5ncy5rZXlzLmRhdGVncmlkRXhwYW5kYWJsZVJvd3NIZWxwZXJUZXh0IH19XG4gICAgPC9kaXY+XG4gICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICAgIDxkaXYgY2xhc3M9XCJjbHItc3Itb25seVwiPnt7IGVuZE9mRXhwYW5kYWJsZUNvbnRlbnRBcmlhVGV4dCB9fTwvZGl2PlxuICBgLFxuICBob3N0OiB7XG4gICAgJ1tjbGFzcy5kYXRhZ3JpZC1yb3ctZmxleF0nOiAndHJ1ZScsXG4gICAgJ1tjbGFzcy5kYXRhZ3JpZC1yb3ctZGV0YWlsXSc6ICd0cnVlJyxcbiAgICAnW2NsYXNzLmRhdGFncmlkLWNvbnRhaW5lcl0nOiAnY2VsbHMubGVuZ3RoID09PSAwJyxcbiAgICAnW2F0dHIuaWRdJzogJ2V4cGFuZC5leHBhbmRhYmxlSWQnLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBDbHJEYXRhZ3JpZFJvd0RldGFpbCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB7XG4gIC8qIHJlZmVyZW5jZSB0byB0aGUgZW51bSBzbyB0aGF0IHRlbXBsYXRlIGNhbiBhY2Nlc3MgaXQgKi9cbiAgcHVibGljIFNFTEVDVElPTl9UWVBFID0gU2VsZWN0aW9uVHlwZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwdWJsaWMgc2VsZWN0aW9uOiBTZWxlY3Rpb24sXG4gICAgcHVibGljIHJvd0FjdGlvblNlcnZpY2U6IFJvd0FjdGlvblNlcnZpY2UsXG4gICAgcHVibGljIGV4cGFuZDogRGF0YWdyaWRJZkV4cGFuZFNlcnZpY2UsXG4gICAgcHVibGljIGV4cGFuZGFibGVSb3dzOiBFeHBhbmRhYmxlUm93c0NvdW50LFxuICAgIHB1YmxpYyBjb21tb25TdHJpbmdzOiBDbHJDb21tb25TdHJpbmdzU2VydmljZVxuICApIHt9XG5cbiAgQENvbnRlbnRDaGlsZHJlbihDbHJEYXRhZ3JpZENlbGwpIGNlbGxzOiBRdWVyeUxpc3Q8Q2xyRGF0YWdyaWRDZWxsPjtcblxuICBASW5wdXQoJ2NsckRnUmVwbGFjZScpXG4gIHNldCByZXBsYWNlKHZhbHVlOiBib29sZWFuKSB7XG4gICAgdGhpcy5leHBhbmQuc2V0UmVwbGFjZSghIXZhbHVlKTtcbiAgfVxuICBwcml2YXRlIHN1YnNjcmlwdGlvbnM6IFN1YnNjcmlwdGlvbltdID0gW107XG4gIHB1YmxpYyByZXBsYWNlZFJvdyA9IGZhbHNlO1xuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaChcbiAgICAgIHRoaXMuZXhwYW5kLnJlcGxhY2Uuc3Vic2NyaWJlKHJlcGxhY2VDaGFuZ2UgPT4ge1xuICAgICAgICB0aGlzLnJlcGxhY2VkUm93ID0gcmVwbGFjZUNoYW5nZTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5mb3JFYWNoKHN1YiA9PiBzdWIudW5zdWJzY3JpYmUoKSk7XG4gIH1cblxuICBASW5wdXQoJ2NsclJvd0RldGFpbEJlZ2lubmluZ0FyaWFUZXh0JykgX2JlZ2lubmluZ09mRXhwYW5kYWJsZUNvbnRlbnRBcmlhVGV4dDogc3RyaW5nO1xuICBwdWJsaWMgZ2V0IGJlZ2lubmluZ09mRXhwYW5kYWJsZUNvbnRlbnRBcmlhVGV4dCgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgdGhpcy5fYmVnaW5uaW5nT2ZFeHBhbmRhYmxlQ29udGVudEFyaWFUZXh0IHx8XG4gICAgICBgJHt0aGlzLmNvbW1vblN0cmluZ3Mua2V5cy5kYXRlZ3JpZEV4cGFuZGFibGVCZWdpbm5pbmdPZn0gJHt0aGlzLmNvbW1vblN0cmluZ3Mua2V5cy5kYXRlZ3JpZEV4cGFuZGFibGVSb3dDb250ZW50fWBcbiAgICApO1xuICB9XG5cbiAgQElucHV0KCdjbHJSb3dEZXRhaWxFbmRBcmlhVGV4dCcpIF9lbmRPZkV4cGFuZGFibGVDb250ZW50QXJpYVRleHQ6IHN0cmluZztcbiAgcHVibGljIGdldCBlbmRPZkV4cGFuZGFibGVDb250ZW50QXJpYVRleHQoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuX2VuZE9mRXhwYW5kYWJsZUNvbnRlbnRBcmlhVGV4dCB8fFxuICAgICAgYCR7dGhpcy5jb21tb25TdHJpbmdzLmtleXMuZGF0ZWdyaWRFeHBhbmRhYmxlRW5kT2Z9ICR7dGhpcy5jb21tb25TdHJpbmdzLmtleXMuZGF0ZWdyaWRFeHBhbmRhYmxlUm93Q29udGVudH1gXG4gICAgKTtcbiAgfVxufVxuIl19