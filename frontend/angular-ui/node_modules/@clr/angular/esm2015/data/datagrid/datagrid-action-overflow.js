/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, EventEmitter, Inject, Input, Output, NgZone, PLATFORM_ID } from '@angular/core';
import { RowActionService } from './providers/row-action-service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { isPlatformBrowser } from '@angular/common';
import { UNIQUE_ID, UNIQUE_ID_PROVIDER } from '../../utils/id-generator/id-generator.service';
import { ClrAlignment } from '../../utils/popover/enums/alignment.enum';
import { ClrSide } from '../../utils/popover/enums/side.enum';
import { ClrAxis } from '../../utils/popover/enums/axis.enum';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import { ClrPopoverEventsService } from '../../utils/popover/providers/popover-events.service';
import { ClrPopoverPositionService } from '../../utils/popover/providers/popover-position.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './providers/row-action-service';
import * as ɵngcc2 from '../../utils/i18n/common-strings.service';
import * as ɵngcc3 from '../../utils/popover/providers/popover-toggle.service';
import * as ɵngcc4 from '../../utils/popover/popover-anchor';
import * as ɵngcc5 from '../../utils/popover/popover-open-close-button';
import * as ɵngcc6 from '../../icon/icon';
import * as ɵngcc7 from '../../utils/popover/popover-content';
import * as ɵngcc8 from '../../utils/focus-trap/focus-trap.directive';

function ClrDatagridActionOverflow_div_3_Template(rf, ctx) { if (rf & 1) {
    const _r3 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 4);
    ɵngcc0.ɵɵlistener("click", function ClrDatagridActionOverflow_div_3_Template_div_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r3); const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.closeOverflowContent($event); });
    ɵngcc0.ɵɵprojection(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("id", ctx_r1.popoverId);
    ɵngcc0.ɵɵattribute("aria-hidden", !ctx_r1.open)("id", ctx_r1.popoverId);
} }
const _c0 = ["*"];
let clrDgActionId = 0;
export class ClrDatagridActionOverflow {
    constructor(rowActionService, commonStrings, platformId, zone, smartToggleService, popoverId) {
        this.rowActionService = rowActionService;
        this.commonStrings = commonStrings;
        this.platformId = platformId;
        this.zone = zone;
        this.smartToggleService = smartToggleService;
        this.popoverId = popoverId;
        this.subscriptions = [];
        this.smartPosition = {
            axis: ClrAxis.HORIZONTAL,
            side: ClrSide.AFTER,
            anchor: ClrAlignment.CENTER,
            content: ClrAlignment.CENTER,
        };
        this._open = false;
        this.openChange = new EventEmitter(false);
        this.rowActionService.register();
        this.subscriptions.push(this.smartToggleService.openChange.subscribe(openState => {
            this.open = openState;
            if (openState) {
                this.focusFirstButton();
            }
        }));
        this.popoverId = 'clr-action-menu' + clrDgActionId++;
    }
    ngOnDestroy() {
        this.rowActionService.unregister();
        this.subscriptions.forEach(sub => sub.unsubscribe());
    }
    closeOverflowContent(event) {
        this.smartToggleService.toggleWithEvent(event);
    }
    focusFirstButton() {
        if (isPlatformBrowser(this.platformId)) {
            this.zone.runOutsideAngular(() => {
                setTimeout(() => {
                    const firstButton = document.querySelector('button.action-item');
                    if (firstButton) {
                        firstButton.focus();
                    }
                });
            });
        }
    }
    get open() {
        return this._open;
    }
    set open(open) {
        const openState = !!open;
        if (!!openState !== this.open) {
            // prevents chocolate mess
            this.smartToggleService.open = openState;
            this.openChange.emit(openState);
            this._open = openState;
        }
    }
}
ClrDatagridActionOverflow.ɵfac = function ClrDatagridActionOverflow_Factory(t) { return new (t || ClrDatagridActionOverflow)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.RowActionService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ClrPopoverToggleService), ɵngcc0.ɵɵdirectiveInject(UNIQUE_ID)); };
ClrDatagridActionOverflow.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrDatagridActionOverflow, selectors: [["clr-dg-action-overflow"]], inputs: { open: ["clrDgActionOverflowOpen", "open"] }, outputs: { openChange: "clrDgActionOverflowOpenChange" }, features: [ɵngcc0.ɵɵProvidersFeature([UNIQUE_ID_PROVIDER, ClrPopoverToggleService, ClrPopoverEventsService, ClrPopoverPositionService])], ngContentSelectors: _c0, decls: 4, vars: 8, consts: [["type", "button", "role", "button", "aria-haspopup", "true", "clrPopoverAnchor", "", "clrPopoverOpenCloseButton", "", 1, "datagrid-action-toggle"], ["anchor", ""], ["shape", "ellipsis-vertical"], ["class", "datagrid-action-overflow", "role", "menu", "clrFocusTrap", "", 3, "id", "click", 4, "clrPopoverContent", "clrPopoverContentAt", "clrPopoverContentOutsideClickToClose", "clrPopoverContentScrollToClose"], ["role", "menu", "clrFocusTrap", "", 1, "datagrid-action-overflow", 3, "id", "click"]], template: function ClrDatagridActionOverflow_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "button", 0, 1);
        ɵngcc0.ɵɵelement(2, "cds-icon", 2);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(3, ClrDatagridActionOverflow_div_3_Template, 2, 3, "div", 3);
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-controls", ctx.popoverId)("aria-expanded", ctx.open)("aria-label", ctx.commonStrings.keys.rowActions);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵattribute("title", ctx.commonStrings.keys.rowActions);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("clrPopoverContent", ctx.open)("clrPopoverContentAt", ctx.smartPosition)("clrPopoverContentOutsideClickToClose", true)("clrPopoverContentScrollToClose", true);
    } }, directives: [ɵngcc4.ClrPopoverAnchor, ɵngcc5.ClrPopoverOpenCloseButton, ɵngcc6.CdsIconCustomTag, ɵngcc7.ClrPopoverContent, ɵngcc8.FocusTrapDirective], encapsulation: 2 });
ClrDatagridActionOverflow.ctorParameters = () => [
    { type: RowActionService },
    { type: ClrCommonStringsService },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: NgZone },
    { type: ClrPopoverToggleService },
    { type: String, decorators: [{ type: Inject, args: [UNIQUE_ID,] }] }
];
ClrDatagridActionOverflow.propDecorators = {
    open: [{ type: Input, args: ['clrDgActionOverflowOpen',] }],
    openChange: [{ type: Output, args: ['clrDgActionOverflowOpenChange',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClrDatagridActionOverflow, [{
        type: Component,
        args: [{
                selector: 'clr-dg-action-overflow',
                providers: [UNIQUE_ID_PROVIDER, ClrPopoverToggleService, ClrPopoverEventsService, ClrPopoverPositionService],
                template: `
    <button
      class="datagrid-action-toggle"
      type="button"
      role="button"
      aria-haspopup="true"
      #anchor
      [attr.aria-controls]="popoverId"
      [attr.aria-expanded]="open"
      [attr.aria-label]="commonStrings.keys.rowActions"
      clrPopoverAnchor
      clrPopoverOpenCloseButton
    >
      <cds-icon shape="ellipsis-vertical" [attr.title]="commonStrings.keys.rowActions"></cds-icon>
    </button>

    <div
      class="datagrid-action-overflow"
      role="menu"
      [id]="popoverId"
      [attr.aria-hidden]="!open"
      [attr.id]="popoverId"
      clrFocusTrap
      (click)="closeOverflowContent($event)"
      *clrPopoverContent="open; at: smartPosition; outsideClickToClose: true; scrollToClose: true"
    >
      <ng-content></ng-content>
    </div>
  `
            }]
    }], function () { return [{ type: ɵngcc1.RowActionService }, { type: ɵngcc2.ClrCommonStringsService }, { type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: ɵngcc0.NgZone }, { type: ɵngcc3.ClrPopoverToggleService }, { type: String, decorators: [{
                type: Inject,
                args: [UNIQUE_ID]
            }] }]; }, { openChange: [{
            type: Output,
            args: ['clrDgActionOverflowOpenChange']
        }], open: [{
            type: Input,
            args: ['clrDgActionOverflowOpen']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,