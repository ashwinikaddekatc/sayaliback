/*
 * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { ClrDatagridFilter } from '../../datagrid-filter';
import { CustomFilter } from '../../providers/custom-filter';
import { FiltersProvider, RegisteredFilter } from '../../providers/filters';
import { DomAdapter } from '../../../../utils/dom-adapter/dom-adapter';
import { DatagridFilterRegistrar } from '../../utils/datagrid-filter-registrar';
import { ClrCommonStringsService } from '../../../../utils/i18n/common-strings.service';
import { DatagridStringFilterImpl } from './datagrid-string-filter-impl';
import { ClrPopoverToggleService } from '../../../../utils/popover/providers/popover-toggle.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../providers/filters';
import * as ɵngcc2 from '../../../../utils/dom-adapter/dom-adapter';
import * as ɵngcc3 from '../../../../utils/i18n/common-strings.service';
import * as ɵngcc4 from '../../../../utils/popover/providers/popover-toggle.service';
import * as ɵngcc5 from '../../datagrid-filter';
import * as ɵngcc6 from '@angular/forms';

const _c0 = ["input"];
export class DatagridStringFilter extends DatagridFilterRegistrar {
    constructor(filters, domAdapter, commonStrings, smartToggleService) {
        super(filters);
        this.domAdapter = domAdapter;
        this.commonStrings = commonStrings;
        this.smartToggleService = smartToggleService;
        this.subs = [];
        /**
         * Indicates if the filter dropdown is open
         */
        this.open = false;
        this.filterValueChange = new EventEmitter();
    }
    /**
     * Customizable filter logic based on a search text
     */
    set customStringFilter(value) {
        if (value instanceof RegisteredFilter) {
            this.setFilter(value);
        }
        else {
            this.setFilter(new DatagridStringFilterImpl(value));
        }
        if (this.initFilterValue) {
            this.value = this.initFilterValue;
            // This initFilterValue should be used only once after the filter registration
            // So deleting this property value to prevent it from being used again
            // if this customStringFilter property is set again
            delete this.initFilterValue;
        }
    }
    ngAfterViewInit() {
        this.subs.push(this.smartToggleService.openChange.subscribe(openChange => {
            this.open = openChange;
            // The timeout in used because when this executes, the input isn't displayed.
            setTimeout(() => {
                this.domAdapter.focus(this.input.nativeElement);
            });
        }));
    }
    ngOnDestroy() {
        super.ngOnDestroy();
        this.subs.forEach(sub => sub.unsubscribe());
    }
    /**
     * Common setter for the input value
     */
    get value() {
        return this.filter.value;
    }
    set value(value) {
        if (this.filter && typeof value === 'string') {
            if (!value) {
                value = '';
            }
            if (value !== this.filter.value) {
                this.filter.value = value;
                this.filterValueChange.emit(value);
            }
        }
        else {
            this.initFilterValue = value;
        }
    }
}
DatagridStringFilter.ɵfac = function DatagridStringFilter_Factory(t) { return new (t || DatagridStringFilter)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FiltersProvider), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.DomAdapter), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ClrPopoverToggleService)); };
DatagridStringFilter.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DatagridStringFilter, selectors: [["clr-dg-string-filter"]], viewQuery: function DatagridStringFilter_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 1);
        ɵngcc0.ɵɵviewQuery(ClrDatagridFilter, 1);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.input = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.filterContainer = _t.first);
    } }, inputs: { customStringFilter: ["clrDgStringFilter", "customStringFilter"], value: ["clrFilterValue", "value"] }, outputs: { filterValueChange: "clrFilterValueChange" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CustomFilter, useExisting: DatagridStringFilter }]), ɵngcc0.ɵɵInheritDefinitionFeature], decls: 3, vars: 4, consts: [[3, "clrDgFilter", "clrDgFilterOpen", "clrDgFilterOpenChange"], ["type", "text", "name", "search", 1, "clr-input", 3, "ngModel", "ngModelChange"], ["input", ""]], template: function DatagridStringFilter_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "clr-dg-filter", 0);
        ɵngcc0.ɵɵlistener("clrDgFilterOpenChange", function DatagridStringFilter_Template_clr_dg_filter_clrDgFilterOpenChange_0_listener($event) { return ctx.open = $event; });
        ɵngcc0.ɵɵelementStart(1, "input", 1, 2);
        ɵngcc0.ɵɵlistener("ngModelChange", function DatagridStringFilter_Template_input_ngModelChange_1_listener($event) { return ctx.value = $event; });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("clrDgFilter", ctx.registered)("clrDgFilterOpen", ctx.open);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngModel", ctx.value);
        ɵngcc0.ɵɵattribute("aria-label", ctx.commonStrings.keys.filterItems);
    } }, directives: [ɵngcc5.ClrDatagridFilter, ɵngcc6.DefaultValueAccessor, ɵngcc6.NgControlStatus, ɵngcc6.NgModel], encapsulation: 2 });
DatagridStringFilter.ctorParameters = () => [
    { type: FiltersProvider },
    { type: DomAdapter },
    { type: ClrCommonStringsService },
    { type: ClrPopoverToggleService }
];
DatagridStringFilter.propDecorators = {
    customStringFilter: [{ type: Input, args: ['clrDgStringFilter',] }],
    input: [{ type: ViewChild, args: ['input',] }],
    filterContainer: [{ type: ViewChild, args: [ClrDatagridFilter,] }],
    value: [{ type: Input, args: ['clrFilterValue',] }],
    filterValueChange: [{ type: Output, args: ['clrFilterValueChange',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DatagridStringFilter, [{
        type: Component,
        args: [{
                selector: 'clr-dg-string-filter',
                providers: [{ provide: CustomFilter, useExisting: DatagridStringFilter }],
                template: `
    <clr-dg-filter [clrDgFilter]="registered" [(clrDgFilterOpen)]="open">
      <input
        #input
        type="text"
        name="search"
        [(ngModel)]="value"
        class="clr-input"
        [attr.aria-label]="commonStrings.keys.filterItems"
      />
    </clr-dg-filter>
  `
            }]
    }], function () { return [{ type: ɵngcc1.FiltersProvider }, { type: ɵngcc2.DomAdapter }, { type: ɵngcc3.ClrCommonStringsService }, { type: ɵngcc4.ClrPopoverToggleService }]; }, { filterValueChange: [{
            type: Output,
            args: ['clrFilterValueChange']
        }], customStringFilter: [{
            type: Input,
            args: ['clrDgStringFilter']
        }], value: [{
            type: Input,
            args: ['clrFilterValue']
        }], input: [{
            type: ViewChild,
            args: ['input']
        }], filterContainer: [{
            type: ViewChild,
            args: [ClrDatagridFilter]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,