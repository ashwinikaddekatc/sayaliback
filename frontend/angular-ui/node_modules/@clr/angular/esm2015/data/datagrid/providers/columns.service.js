/*
 * Copyright (c) 2016-2019 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Injectable } from '@angular/core';
import { ALL_COLUMN_CHANGES } from '../enums/column-changes.enum';
import * as ɵngcc0 from '@angular/core';
export class ColumnsService {
    constructor() {
        this.columns = [];
        this._cache = [];
    }
    cache() {
        this._cache = this.columns.map(subject => {
            const value = Object.assign({}, subject.value);
            delete value.changes;
            return value;
        });
    }
    hasCache() {
        return !!this._cache.length;
    }
    resetToLastCache() {
        this._cache.forEach((state, index) => {
            // Just emit the exact value from the cache
            this.columns[index].next(Object.assign(Object.assign({}, state), { changes: ALL_COLUMN_CHANGES }));
        });
        this._cache = [];
    }
    get columnStates() {
        return this.columns.map(column => column.value);
    }
    get hasHideableColumns() {
        return this.columnStates.filter(state => state.hideable).length > 0;
    }
    // Helper method to emit a change to a column only when there is an actual diff to process for that column
    emitStateChangeAt(columnIndex, diff) {
        if (!this.columns[columnIndex]) {
            return;
        }
        this.emitStateChange(this.columns[columnIndex], diff);
    }
    emitStateChange(column, diff) {
        column.next(Object.assign(Object.assign({}, column.value), diff));
    }
}
ColumnsService.ɵfac = function ColumnsService_Factory(t) { return new (t || ColumnsService)(); };
ColumnsService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ColumnsService, factory: ColumnsService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ColumnsService, [{
        type: Injectable
    }], function () { return []; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sdW1ucy5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jbHItYW5ndWxhci9zcmMvZGF0YS9kYXRhZ3JpZC9wcm92aWRlcnMvY29sdW1ucy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sOEJBQThCLENBQUM7O0FBR2xFLE1BQU0sT0FBTyxjQUFjO0FBQzNCLElBRkE7QUFDRSxRQUNBLFlBQU8sR0FBbUMsRUFBRSxDQUFDO0FBQy9DLFFBQVUsV0FBTSxHQUFrQixFQUFFLENBQUM7QUFDckMsSUF3Q0EsQ0FBQztBQUNELElBeENFLEtBQUs7QUFDUCxRQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDN0MsWUFBTSxNQUFNLEtBQUsscUJBQVEsT0FBTyxDQUFDLEtBQUssQ0FBRSxDQUFDO0FBQ3pDLFlBQU0sT0FBTyxLQUFLLENBQUMsT0FBTyxDQUFDO0FBQzNCLFlBQU0sT0FBTyxLQUFLLENBQUM7QUFDbkIsUUFBSSxDQUFDLENBQUMsQ0FBQztBQUNQLElBQUUsQ0FBQztBQUNILElBQ0UsUUFBUTtBQUNWLFFBQUksT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7QUFDaEMsSUFBRSxDQUFDO0FBQ0gsSUFDRSxnQkFBZ0I7QUFDbEIsUUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRTtBQUN6QyxZQUFNLDJDQUEyQztBQUNqRCxZQUFNLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxpQ0FBTSxLQUFLLEtBQUUsT0FBTyxFQUFFLGtCQUFrQixJQUFHLENBQUM7QUFDMUUsUUFBSSxDQUFDLENBQUMsQ0FBQztBQUNQLFFBQUksSUFBSSxDQUFDLE1BQU0sR0FBRyxFQUFFLENBQUM7QUFDckIsSUFBRSxDQUFDO0FBQ0gsSUFDRSxJQUFJLFlBQVk7QUFBSyxRQUNuQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3BELElBQUUsQ0FBQztBQUNILElBQ0UsSUFBSSxrQkFBa0I7QUFBSyxRQUN6QixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7QUFDeEUsSUFBRSxDQUFDO0FBQ0gsSUFDRSwwR0FBMEc7QUFDNUcsSUFBRSxpQkFBaUIsQ0FBQyxXQUFtQixFQUFFLElBQXFCO0FBQzlELFFBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLEVBQUU7QUFDcEMsWUFBTSxPQUFPO0FBQ2IsU0FBSztBQUNMLFFBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO0FBQzFELElBQUUsQ0FBQztBQUNILElBQ0UsZUFBZSxDQUFDLE1BQW9DLEVBQUUsSUFBcUI7QUFDN0UsUUFBSSxNQUFNLENBQUMsSUFBSSxpQ0FBTSxNQUFNLENBQUMsS0FBSyxHQUFLLElBQUksRUFBRyxDQUFDO0FBQzlDLElBQUUsQ0FBQztBQUNIOzBDQTVDQyxVQUFVOzs7O2dEQUNUO0FBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKlxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMTkgVk13YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICovXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IENvbHVtblN0YXRlRGlmZiwgQ29sdW1uU3RhdGUgfSBmcm9tICcuLi9pbnRlcmZhY2VzL2NvbHVtbi1zdGF0ZS5pbnRlcmZhY2UnO1xuaW1wb3J0IHsgQUxMX0NPTFVNTl9DSEFOR0VTIH0gZnJvbSAnLi4vZW51bXMvY29sdW1uLWNoYW5nZXMuZW51bSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDb2x1bW5zU2VydmljZSB7XG4gIGNvbHVtbnM6IEJlaGF2aW9yU3ViamVjdDxDb2x1bW5TdGF0ZT5bXSA9IFtdO1xuICBwcml2YXRlIF9jYWNoZTogQ29sdW1uU3RhdGVbXSA9IFtdO1xuXG4gIGNhY2hlKCkge1xuICAgIHRoaXMuX2NhY2hlID0gdGhpcy5jb2x1bW5zLm1hcChzdWJqZWN0ID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlID0geyAuLi5zdWJqZWN0LnZhbHVlIH07XG4gICAgICBkZWxldGUgdmFsdWUuY2hhbmdlcztcbiAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9KTtcbiAgfVxuXG4gIGhhc0NhY2hlKCkge1xuICAgIHJldHVybiAhIXRoaXMuX2NhY2hlLmxlbmd0aDtcbiAgfVxuXG4gIHJlc2V0VG9MYXN0Q2FjaGUoKSB7XG4gICAgdGhpcy5fY2FjaGUuZm9yRWFjaCgoc3RhdGUsIGluZGV4KSA9PiB7XG4gICAgICAvLyBKdXN0IGVtaXQgdGhlIGV4YWN0IHZhbHVlIGZyb20gdGhlIGNhY2hlXG4gICAgICB0aGlzLmNvbHVtbnNbaW5kZXhdLm5leHQoeyAuLi5zdGF0ZSwgY2hhbmdlczogQUxMX0NPTFVNTl9DSEFOR0VTIH0pO1xuICAgIH0pO1xuICAgIHRoaXMuX2NhY2hlID0gW107XG4gIH1cblxuICBnZXQgY29sdW1uU3RhdGVzKCk6IENvbHVtblN0YXRlW10ge1xuICAgIHJldHVybiB0aGlzLmNvbHVtbnMubWFwKGNvbHVtbiA9PiBjb2x1bW4udmFsdWUpO1xuICB9XG5cbiAgZ2V0IGhhc0hpZGVhYmxlQ29sdW1ucygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5jb2x1bW5TdGF0ZXMuZmlsdGVyKHN0YXRlID0+IHN0YXRlLmhpZGVhYmxlKS5sZW5ndGggPiAwO1xuICB9XG5cbiAgLy8gSGVscGVyIG1ldGhvZCB0byBlbWl0IGEgY2hhbmdlIHRvIGEgY29sdW1uIG9ubHkgd2hlbiB0aGVyZSBpcyBhbiBhY3R1YWwgZGlmZiB0byBwcm9jZXNzIGZvciB0aGF0IGNvbHVtblxuICBlbWl0U3RhdGVDaGFuZ2VBdChjb2x1bW5JbmRleDogbnVtYmVyLCBkaWZmOiBDb2x1bW5TdGF0ZURpZmYpIHtcbiAgICBpZiAoIXRoaXMuY29sdW1uc1tjb2x1bW5JbmRleF0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5lbWl0U3RhdGVDaGFuZ2UodGhpcy5jb2x1bW5zW2NvbHVtbkluZGV4XSwgZGlmZik7XG4gIH1cblxuICBlbWl0U3RhdGVDaGFuZ2UoY29sdW1uOiBCZWhhdmlvclN1YmplY3Q8Q29sdW1uU3RhdGU+LCBkaWZmOiBDb2x1bW5TdGF0ZURpZmYpIHtcbiAgICBjb2x1bW4ubmV4dCh7IC4uLmNvbHVtbi52YWx1ZSwgLi4uZGlmZiB9KTtcbiAgfVxufVxuIl19