/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { animate, style, transition, trigger, state } from '@angular/animations';
import { isPlatformBrowser } from '@angular/common';
import { Component, ContentChildren, ElementRef, EventEmitter, Inject, Injector, Input, Optional, Output, PLATFORM_ID, SkipSelf, ViewChild, } from '@angular/core';
import { filter } from 'rxjs/operators';
import { KeyCodes } from './../../utils/enums/key-codes.enum';
import { IfExpandService } from '../../utils/conditional/if-expanded.service';
import { keyValidator, preventArrowKeyScroll } from '../../utils/focus/key-focus/util';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { UNIQUE_ID, UNIQUE_ID_PROVIDER } from '../../utils/id-generator/id-generator.service';
import { LoadingListener } from '../../utils/loading/loading-listener';
import { DeclarativeTreeNodeModel } from './models/declarative-tree-node.model';
import { ClrSelectedState } from './models/selected-state.enum';
import { TreeFeaturesService, TREE_FEATURES_PROVIDER } from './tree-features.service';
import { TreeFocusManagerService } from './tree-focus-manager.service';
import { ClrTreeNodeLink } from './tree-node-link';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './tree-features.service';
import * as ɵngcc2 from '../../utils/conditional/if-expanded.service';
import * as ɵngcc3 from '../../utils/i18n/common-strings.service';
import * as ɵngcc4 from './tree-focus-manager.service';
import * as ɵngcc5 from '@angular/common';
import * as ɵngcc6 from './recursive-children';
import * as ɵngcc7 from '../../icon/icon';

const _c0 = ["contentContainer"];
function ClrTreeNode_button_2_Template(rf, ctx) { if (rf & 1) {
    const _r6 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 9);
    ɵngcc0.ɵɵlistener("click", function ClrTreeNode_button_2_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r5 = ɵngcc0.ɵɵnextContext(); return ctx_r5.expandService.toggle(); })("focus", function ClrTreeNode_button_2_Template_button_focus_0_listener() { ɵngcc0.ɵɵrestoreView(_r6); const ctx_r7 = ɵngcc0.ɵɵnextContext(); return ctx_r7.focusTreeNode(); });
    ɵngcc0.ɵɵelement(1, "cds-icon", 10);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵattribute("direction", ctx_r1.expandService.expanded ? "down" : "right");
} }
function ClrTreeNode_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 11);
    ɵngcc0.ɵɵelement(1, "span", 12);
    ɵngcc0.ɵɵelementEnd();
} }
function ClrTreeNode_div_4_Template(rf, ctx) { if (rf & 1) {
    const _r9 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "div", 13);
    ɵngcc0.ɵɵelementStart(1, "input", 14);
    ɵngcc0.ɵɵlistener("change", function ClrTreeNode_div_4_Template_input_change_1_listener() { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r8 = ɵngcc0.ɵɵnextContext(); return ctx_r8._model.toggleSelection(ctx_r8.featuresService.eager); })("focus", function ClrTreeNode_div_4_Template_input_focus_1_listener() { ɵngcc0.ɵɵrestoreView(_r9); const ctx_r10 = ɵngcc0.ɵɵnextContext(); return ctx_r10.focusTreeNode(); });
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(2, "label", 15);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r3 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate1("id", "", ctx_r3.nodeId, "-check");
    ɵngcc0.ɵɵproperty("checked", ctx_r3._model.selected.value === ctx_r3.STATES.SELECTED)("indeterminate", ctx_r3._model.selected.value === ctx_r3.STATES.INDETERMINATE);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵpropertyInterpolate1("for", "", ctx_r3.nodeId, "-check");
} }
function ClrTreeNode_div_7_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1, " selected ");
    ɵngcc0.ɵɵelementEnd();
} }
function ClrTreeNode_div_7_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span");
    ɵngcc0.ɵɵtext(1, " unselected ");
    ɵngcc0.ɵɵelementEnd();
} }
function ClrTreeNode_div_7_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 16);
    ɵngcc0.ɵɵtemplate(1, ClrTreeNode_div_7_span_1_Template, 2, 0, "span", 17);
    ɵngcc0.ɵɵtemplate(2, ClrTreeNode_div_7_span_2_Template, 2, 0, "span", 17);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r4 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.ariaSelected);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !ctx_r4.ariaSelected);
} }
const _c1 = ["*", [["clr-tree-node"]], [["", "clrIfExpanded", ""]]];
const _c2 = ["*", "clr-tree-node", "[clrIfExpanded]"];
const LVIEW_CONTEXT_INDEX = 8;
export class ClrTreeNode {
    constructor(nodeId, platformId, parent, featuresService, expandService, commonStrings, focusManager, injector) {
        this.nodeId = nodeId;
        this.platformId = platformId;
        this.featuresService = featuresService;
        this.expandService = expandService;
        this.commonStrings = commonStrings;
        this.focusManager = focusManager;
        this.STATES = ClrSelectedState;
        this.skipEmitChange = false;
        this.selectedChange = new EventEmitter(false);
        this.expandedChange = new EventEmitter();
        this.subscriptions = [];
        this.contentContainerTabindex = -1;
        if (this.featuresService.recursion) {
            // I'm completely stuck, we have to hack into private properties until either
            // https://github.com/angular/angular/issues/14935 or https://github.com/angular/angular/issues/15998
            // are fixed
            // This is for non-ivy implementations
            if (injector.view) {
                this._model = injector.view.context.clrModel;
            }
            else {
                // Ivy puts this on a specific index of a _lView property
                this._model = injector._lView[LVIEW_CONTEXT_INDEX].clrModel;
            }
        }
        else {
            // Force cast for now, not sure how to tie the correct type here to featuresService.recursion
            this._model = new DeclarativeTreeNodeModel(parent ? parent._model : null);
        }
        this._model.nodeId = this.nodeId;
    }
    isExpandable() {
        if (typeof this.expandable !== 'undefined') {
            return this.expandable;
        }
        return !!this.expandService.expandable || (this._model.children && this._model.children.length > 0);
    }
    get selected() {
        return this._model.selected.value;
    }
    set selected(value) {
        this.featuresService.selectable = true;
        // Gracefully handle falsy states like null or undefined because it's just easier than answering questions.
        // This shouldn't happen with strict typing on the app's side, but it's not up to us.
        if (value === null || typeof value === 'undefined') {
            value = ClrSelectedState.UNSELECTED;
        }
        // We match booleans to the corresponding ClrSelectedState
        if (typeof value === 'boolean') {
            value = value ? ClrSelectedState.SELECTED : ClrSelectedState.UNSELECTED;
        }
        // We propagate only if the tree is in smart mode, and skip emitting the output when we set the input
        // See https://github.com/vmware/clarity/issues/3073
        this.skipEmitChange = true;
        this._model.setSelected(value, this.featuresService.eager, this.featuresService.eager);
        this.skipEmitChange = false;
    }
    get ariaSelected() {
        return this.featuresService.selectable ? this._model.selected.value === ClrSelectedState.SELECTED : null;
    }
    // I'm caving on this, for tree nodes I think we can tolerate having a two-way binding on the component
    // rather than enforce the clrIfExpanded structural directive for dynamic cases. Mostly because for the smart
    // case, you can't use a structural directive, it would need to go on an ng-container.
    get expanded() {
        return this.expandService.expanded;
    }
    set expanded(value) {
        this.expandService.expanded = value;
    }
    ngOnInit() {
        this._model.expanded = this.expanded;
        this.subscriptions.push(this._model.selected.pipe(filter(() => !this.skipEmitChange)).subscribe(value => {
            this.selectedChange.emit(value);
        }));
        this.subscriptions.push(this.expandService.expandChange.subscribe(value => {
            this.expandedChange.emit(value);
            this._model.expanded = value;
        }));
        this.subscriptions.push(this.focusManager.focusRequest.subscribe(nodeId => {
            if (this.nodeId === nodeId) {
                this.focusTreeNode();
            }
        }), this.focusManager.focusChange.subscribe(nodeId => {
            this.checkTabIndex(nodeId);
        }));
    }
    ngOnDestroy() {
        this._model.destroy();
        this.subscriptions.forEach(sub => sub.unsubscribe());
    }
    get treeNodeLink() {
        return this.treeNodeLinkList && this.treeNodeLinkList.first;
    }
    setTabIndex(value) {
        this.contentContainerTabindex = value;
        this.contentContainer.nativeElement.setAttribute('tabindex', value);
    }
    checkTabIndex(nodeId) {
        if (isPlatformBrowser(this.platformId) && this.nodeId !== nodeId && this.contentContainerTabindex !== -1) {
            this.setTabIndex(-1);
        }
    }
    focusTreeNode() {
        if (isPlatformBrowser(this.platformId) && document.activeElement !== this.contentContainer.nativeElement) {
            this.setTabIndex(0);
            this.contentContainer.nativeElement.focus();
        }
    }
    broadcastFocusOnContainer() {
        this.focusManager.broadcastFocusedNode(this.nodeId);
    }
    onKeyDown(event) {
        // Two reasons to prevent default behavior:
        // 1. to prevent scrolling on arrow keys
        // 2. Assistive Technology focus differs from Keyboard focus behavior.
        //    By default, pressing arrow key makes AT focus go into the nested content of the item.
        preventArrowKeyScroll(event);
        // https://www.w3.org/TR/wai-aria-practices-1.1/#keyboard-interaction-22
        switch (keyValidator(event.key)) {
            case KeyCodes.ArrowUp:
                this.focusManager.focusNodeAbove(this._model);
                break;
            case KeyCodes.ArrowDown:
                this.focusManager.focusNodeBelow(this._model);
                break;
            case KeyCodes.ArrowRight:
                this.expandOrFocusFirstChild();
                break;
            case KeyCodes.ArrowLeft:
                this.collapseOrFocusParent();
                break;
            case KeyCodes.Home:
                this.focusManager.focusFirstVisibleNode();
                break;
            case KeyCodes.End:
                this.focusManager.focusLastVisibleNode();
                break;
            case KeyCodes.Enter:
                this.triggerDefaultAction();
                break;
            case KeyCodes.Space:
                // to prevent scrolling on space key in this specific case
                event.preventDefault();
                this.triggerDefaultAction();
                break;
            default:
                break;
        }
    }
    expandOrFocusFirstChild() {
        if (this.expanded) {
            // if the node is already expanded and has children, focus its very first child
            if (this._model.children.length > 0) {
                this.focusManager.focusNodeBelow(this._model);
            }
        }
        else {
            // we must check if the node is expandable, in order to set .expanded to true from false
            // because we shouldn't set .expanded to true if it's not expandable node
            if (this.isExpandable()) {
                this.expandService.expanded = true;
            }
        }
    }
    collapseOrFocusParent() {
        if (this.expanded) {
            this.expandService.expanded = false;
        }
        else {
            this.focusManager.focusParent(this._model);
        }
    }
    triggerDefaultAction() {
        if (this.treeNodeLink) {
            this.treeNodeLink.activate();
        }
        else {
            if (this.featuresService.selectable) {
                this._model.toggleSelection(this.featuresService.eager);
            }
        }
    }
}
ClrTreeNode.ɵfac = function ClrTreeNode_Factory(t) { return new (t || ClrTreeNode)(ɵngcc0.ɵɵdirectiveInject(UNIQUE_ID), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(ClrTreeNode, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TreeFeaturesService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.IfExpandService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.TreeFocusManagerService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector)); };
ClrTreeNode.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrTreeNode, selectors: [["clr-tree-node"]], contentQueries: function ClrTreeNode_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrTreeNodeLink, 0);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.treeNodeLinkList = _t);
    } }, viewQuery: function ClrTreeNode_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 3, ElementRef);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.contentContainer = _t.first);
    } }, hostVars: 3, hostBindings: function ClrTreeNode_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵattribute("role", "treeitem");
        ɵngcc0.ɵɵclassProp("clr-tree-node", true);
    } }, inputs: { selected: ["clrSelected", "selected"], expanded: ["clrExpanded", "expanded"], expandable: ["clrExpandable", "expandable"] }, outputs: { selectedChange: "clrSelectedChange", expandedChange: "clrExpandedChange" }, features: [ɵngcc0.ɵɵProvidersFeature([
            UNIQUE_ID_PROVIDER,
            TREE_FEATURES_PROVIDER,
            IfExpandService,
            { provide: LoadingListener, useExisting: IfExpandService },
        ])], ngContentSelectors: _c2, decls: 12, vars: 9, consts: [["role", "treeitem", "tabindex", "-1", 1, "clr-tree-node-content-container", 3, "keydown", "focus"], ["contentContainer", ""], ["aria-hidden", "true", "type", "button", "tabindex", "-1", "class", "clr-treenode-caret", 3, "click", "focus", 4, "ngIf"], ["class", "clr-treenode-spinner-container", 4, "ngIf"], ["class", "clr-checkbox-wrapper clr-treenode-checkbox", 4, "ngIf"], [1, "clr-treenode-content", 3, "mousedown"], ["class", "clr-sr-only", 4, "ngIf"], [1, "clr-treenode-children"], [3, "parent"], ["aria-hidden", "true", "type", "button", "tabindex", "-1", 1, "clr-treenode-caret", 3, "click", "focus"], ["shape", "angle", 1, "clr-treenode-caret-icon"], [1, "clr-treenode-spinner-container"], [1, "clr-treenode-spinner", "spinner"], [1, "clr-checkbox-wrapper", "clr-treenode-checkbox"], ["aria-hidden", "true", "type", "checkbox", "tabindex", "-1", 1, "clr-checkbox", 3, "id", "checked", "indeterminate", "change", "focus"], [1, "clr-control-label", 3, "for"], [1, "clr-sr-only"], [4, "ngIf"]], template: function ClrTreeNode_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c1);
        ɵngcc0.ɵɵelementStart(0, "div", 0, 1);
        ɵngcc0.ɵɵlistener("keydown", function ClrTreeNode_Template_div_keydown_0_listener($event) { return ctx.onKeyDown($event); })("focus", function ClrTreeNode_Template_div_focus_0_listener() { return ctx.broadcastFocusOnContainer(); });
        ɵngcc0.ɵɵtemplate(2, ClrTreeNode_button_2_Template, 2, 1, "button", 2);
        ɵngcc0.ɵɵtemplate(3, ClrTreeNode_div_3_Template, 2, 0, "div", 3);
        ɵngcc0.ɵɵtemplate(4, ClrTreeNode_div_4_Template, 3, 4, "div", 4);
        ɵngcc0.ɵɵelementStart(5, "div", 5);
        ɵngcc0.ɵɵlistener("mousedown", function ClrTreeNode_Template_div_mousedown_5_listener() { return ctx.focusTreeNode(); });
        ɵngcc0.ɵɵprojection(6);
        ɵngcc0.ɵɵtemplate(7, ClrTreeNode_div_7_Template, 3, 2, "div", 6);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(8, "div", 7);
        ɵngcc0.ɵɵprojection(9, 1);
        ɵngcc0.ɵɵprojection(10, 2);
        ɵngcc0.ɵɵelement(11, "clr-recursive-children", 8);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("aria-expanded", ctx.isExpandable() ? ctx.expanded : null)("aria-selected", ctx.ariaSelected);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("ngIf", ctx.isExpandable() && !ctx._model.loading && !ctx.expandService.loading);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.expandService.loading || ctx._model.loading);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.featuresService.selectable);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("ngIf", ctx.featuresService.selectable);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("@toggleChildrenAnim", ctx.expandService.expanded ? "expanded" : "collapsed");
        ɵngcc0.ɵɵattribute("role", ctx.isExpandable() && !ctx.featuresService.recursion ? "group" : null);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵproperty("parent", ctx._model);
    } }, directives: [ɵngcc5.NgIf, ɵngcc6.RecursiveChildren, ɵngcc7.CdsIconCustomTag], encapsulation: 2, data: { animation: [
            trigger('toggleChildrenAnim', [
                transition('collapsed => expanded', [style({ height: 0 }), animate(200, style({ height: '*' }))]),
                transition('expanded => collapsed', [style({ height: '*' }), animate(200, style({ height: 0 }))]),
                state('expanded', style({ height: '*', 'overflow-y': 'visible' })),
                state('collapsed', style({ height: 0 })),
            ]),
        ] } });
ClrTreeNode.ctorParameters = () => [
    { type: String, decorators: [{ type: Inject, args: [UNIQUE_ID,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: ClrTreeNode, decorators: [{ type: Optional }, { type: SkipSelf }] },
    { type: TreeFeaturesService },
    { type: IfExpandService },
    { type: ClrCommonStringsService },
    { type: TreeFocusManagerService },
    { type: Injector }
];
ClrTreeNode.propDecorators = {
    selected: [{ type: Input, args: ['clrSelected',] }],
    selectedChange: [{ type: Output, args: ['clrSelectedChange',] }],
    expandable: [{ type: Input, args: ['clrExpandable',] }],
    expanded: [{ type: Input, args: ['clrExpanded',] }],
    expandedChange: [{ type: Output, args: ['clrExpandedChange',] }],
    contentContainer: [{ type: ViewChild, args: ['contentContainer', { read: ElementRef, static: true },] }],
    treeNodeLinkList: [{ type: ContentChildren, args: [ClrTreeNodeLink, { descendants: false },] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClrTreeNode, [{
        type: Component,
        args: [{
                selector: 'clr-tree-node',
                template: "<!--\n  ~ Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n  ~ This software is released under MIT license.\n  ~ The full license information can be found in LICENSE in the root directory of this project.\n  -->\n\n<div\n  #contentContainer\n  role=\"treeitem\"\n  class=\"clr-tree-node-content-container\"\n  tabindex=\"-1\"\n  [attr.aria-expanded]=\"isExpandable() ? expanded : null\"\n  [attr.aria-selected]=\"ariaSelected\"\n  (keydown)=\"onKeyDown($event)\"\n  (focus)=\"broadcastFocusOnContainer()\"\n>\n  <button\n    *ngIf=\"isExpandable() && !_model.loading && !expandService.loading\"\n    aria-hidden=\"true\"\n    type=\"button\"\n    tabindex=\"-1\"\n    class=\"clr-treenode-caret\"\n    (click)=\"expandService.toggle();\"\n    (focus)=\"focusTreeNode()\"\n  >\n    <cds-icon\n      class=\"clr-treenode-caret-icon\"\n      shape=\"angle\"\n      [attr.direction]=\"expandService.expanded ? 'down' : 'right'\"\n    ></cds-icon>\n  </button>\n  <div class=\"clr-treenode-spinner-container\" *ngIf=\"expandService.loading || _model.loading\">\n    <span class=\"clr-treenode-spinner spinner\"></span>\n  </div>\n  <div class=\"clr-checkbox-wrapper clr-treenode-checkbox\" *ngIf=\"featuresService.selectable\">\n    <input\n      aria-hidden=\"true\"\n      type=\"checkbox\"\n      id=\"{{nodeId}}-check\"\n      class=\"clr-checkbox\"\n      [checked]=\"_model.selected.value === STATES.SELECTED\"\n      [indeterminate]=\"_model.selected.value === STATES.INDETERMINATE\"\n      (change)=\"_model.toggleSelection(featuresService.eager)\"\n      (focus)=\"focusTreeNode()\"\n      tabindex=\"-1\"\n    />\n    <label for=\"{{nodeId}}-check\" class=\"clr-control-label\"></label>\n  </div>\n  <div class=\"clr-treenode-content\" (mousedown)=\"focusTreeNode()\">\n    <ng-content></ng-content>\n    <div class=\"clr-sr-only\" *ngIf=\"featuresService.selectable\">\n      <span *ngIf=\"ariaSelected\">\n        selected\n      </span>\n      <span *ngIf=\"!ariaSelected\">\n        unselected\n      </span>\n    </div>\n  </div>\n</div>\n<div\n  class=\"clr-treenode-children\"\n  [@toggleChildrenAnim]=\"expandService.expanded ? 'expanded' : 'collapsed'\"\n  [attr.role]=\"isExpandable() && !featuresService.recursion ? 'group' : null\"\n>\n  <ng-content select=\"clr-tree-node\"></ng-content>\n  <ng-content select=\"[clrIfExpanded]\"></ng-content>\n  <clr-recursive-children [parent]=\"_model\"></clr-recursive-children>\n</div>\n",
                providers: [
                    UNIQUE_ID_PROVIDER,
                    TREE_FEATURES_PROVIDER,
                    IfExpandService,
                    { provide: LoadingListener, useExisting: IfExpandService },
                ],
                animations: [
                    trigger('toggleChildrenAnim', [
                        transition('collapsed => expanded', [style({ height: 0 }), animate(200, style({ height: '*' }))]),
                        transition('expanded => collapsed', [style({ height: '*' }), animate(200, style({ height: 0 }))]),
                        state('expanded', style({ height: '*', 'overflow-y': 'visible' })),
                        state('collapsed', style({ height: 0 })),
                    ]),
                ],
                host: {
                    '[attr.role]': '"treeitem"',
                    '[class.clr-tree-node]': 'true'
                }
            }]
    }], function () { return [{ type: String, decorators: [{
                type: Inject,
                args: [UNIQUE_ID]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: ClrTreeNode, decorators: [{
                type: Optional
            }, {
                type: SkipSelf
            }] }, { type: ɵngcc1.TreeFeaturesService }, { type: ɵngcc2.IfExpandService }, { type: ɵngcc3.ClrCommonStringsService }, { type: ɵngcc4.TreeFocusManagerService }, { type: ɵngcc0.Injector }]; }, { selectedChange: [{
            type: Output,
            args: ['clrSelectedChange']
        }], expandedChange: [{
            type: Output,
            args: ['clrExpandedChange']
        }], selected: [{
            type: Input,
            args: ['clrSelected']
        }], expanded: [{
            type: Input,
            args: ['clrExpanded']
        }], expandable: [{
            type: Input,
            args: ['clrExpandable']
        }], contentContainer: [{
            type: ViewChild,
            args: ['contentContainer', { read: ElementRef, static: true }]
        }], treeNodeLinkList: [{
            type: ContentChildren,
            args: [ClrTreeNodeLink, { descendants: false }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,