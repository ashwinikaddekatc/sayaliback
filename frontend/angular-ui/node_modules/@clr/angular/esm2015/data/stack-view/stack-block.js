/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, EventEmitter, HostBinding, Inject, Input, Optional, Output, SkipSelf } from '@angular/core';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { UNIQUE_ID, UNIQUE_ID_PROVIDER } from '../../utils/id-generator/id-generator.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../utils/i18n/common-strings.service';
import * as ɵngcc2 from '@angular/common';
import * as ɵngcc3 from '../../utils/animations/expandable-animation/expandable-animation';
import * as ɵngcc4 from '../../icon/icon';

function ClrStackBlock_cds_icon_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "cds-icon", 7);
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵattribute("direction", ctx_r0.caretDirection);
} }
function ClrStackBlock_span_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 8);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(ctx_r1.commonStrings.keys.stackViewChanged);
} }
function ClrStackBlock_div_8_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵprojection(1, 2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r2 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵstyleProp("height", ctx_r2.expanded ? "auto" : 0);
} }
const _c0 = [[["clr-stack-label"]], "*", [["clr-stack-block"]]];
const _c1 = ["clr-stack-label", "*", "clr-stack-block"];
export class ClrStackBlock {
    /*
     * This would be more efficient with @ContentChildren, with the parent ClrStackBlock
     * querying for children StackBlocks, but this feature is not available when downgrading
     * the component for Angular 1.
     */
    constructor(parent, uniqueId, commonStrings) {
        this.parent = parent;
        this.uniqueId = uniqueId;
        this.commonStrings = commonStrings;
        this.expanded = false;
        this.expandedChange = new EventEmitter(false);
        this.expandable = false;
        this.focused = false;
        this._changedChildren = 0;
        this._fullyInitialized = false;
        this._changed = false;
        if (parent) {
            parent.addChild();
        }
    }
    get getChangedValue() {
        return this._changed || (this._changedChildren > 0 && !this.expanded);
    }
    set setChangedValue(value) {
        this._changed = value;
        if (this.parent && this._fullyInitialized) {
            if (value) {
                this.parent._changedChildren++;
            }
            else {
                this.parent._changedChildren--;
            }
        }
    }
    ngOnInit() {
        // in order to access the parent ClrStackBlock's properties,
        // the child ClrStackBlock has to be fully initialized at first.
        this._fullyInitialized = true;
    }
    addChild() {
        this.expandable = true;
    }
    toggleExpand() {
        if (this.expandable) {
            this.expanded = !this.expanded;
            this.expandedChange.emit(this.expanded);
        }
    }
    get caretDirection() {
        return this.expanded ? 'down' : 'right';
    }
    get role() {
        return this.expandable ? 'button' : null;
    }
    get tabIndex() {
        return this.expandable ? '0' : null;
    }
    get onStackLabelFocus() {
        return this.expandable && !this.expanded && this.focused;
    }
    get ariaExpanded() {
        if (!this.expandable) {
            return null;
        }
        else {
            return this.expanded ? 'true' : 'false';
        }
    }
    getStackChildrenId() {
        return this.expanded ? `clr-stack-children-${this.uniqueId}` : null;
    }
}
ClrStackBlock.ɵfac = function ClrStackBlock_Factory(t) { return new (t || ClrStackBlock)(ɵngcc0.ɵɵdirectiveInject(ClrStackBlock, 12), ɵngcc0.ɵɵdirectiveInject(UNIQUE_ID), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ClrCommonStringsService)); };
ClrStackBlock.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrStackBlock, selectors: [["clr-stack-block"]], hostVars: 10, hostBindings: function ClrStackBlock_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("stack-block", true)("stack-block-expanded", ctx.expanded)("stack-block-expandable", ctx.expandable)("stack-block-changed", ctx.getChangedValue)("on-focus", ctx.onStackLabelFocus);
    } }, inputs: { expanded: ["clrSbExpanded", "expanded"], expandable: ["clrSbExpandable", "expandable"], setChangedValue: ["clrSbNotifyChange", "setChangedValue"], ariaLevel: ["clrStackViewLevel", "ariaLevel"], ariaSetsize: ["clrStackViewSetsize", "ariaSetsize"], ariaPosinset: ["clrStackViewPosinset", "ariaPosinset"] }, outputs: { expandedChange: "clrSbExpandedChange" }, features: [ɵngcc0.ɵɵProvidersFeature([UNIQUE_ID_PROVIDER])], ngContentSelectors: _c1, decls: 9, vars: 13, consts: [[1, "stack-block-label", 3, "id", "click", "keyup.enter", "keyup.space", "focus", "blur"], ["shape", "angle", "class", "stack-block-caret", 4, "ngIf"], ["class", "clr-sr-only", 4, "ngIf"], [1, "stack-view-key"], [1, "stack-block-content"], [1, "stack-children", 3, "clrExpandTrigger"], ["role", "region", 3, "height", 4, "ngIf"], ["shape", "angle", 1, "stack-block-caret"], [1, "clr-sr-only"], ["role", "region"]], template: function ClrStackBlock_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef(_c0);
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵlistener("click", function ClrStackBlock_Template_div_click_0_listener() { return ctx.toggleExpand(); })("keyup.enter", function ClrStackBlock_Template_div_keyup_enter_0_listener() { return ctx.toggleExpand(); })("keyup.space", function ClrStackBlock_Template_div_keyup_space_0_listener() { return ctx.toggleExpand(); })("focus", function ClrStackBlock_Template_div_focus_0_listener() { return ctx.focused = true; })("blur", function ClrStackBlock_Template_div_blur_0_listener() { return ctx.focused = false; });
        ɵngcc0.ɵɵtemplate(1, ClrStackBlock_cds_icon_1_Template, 1, 1, "cds-icon", 1);
        ɵngcc0.ɵɵtemplate(2, ClrStackBlock_span_2_Template, 2, 1, "span", 2);
        ɵngcc0.ɵɵelementStart(3, "div", 3);
        ɵngcc0.ɵɵprojection(4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "div", 4);
        ɵngcc0.ɵɵprojection(6, 1);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(7, "clr-expandable-animation", 5);
        ɵngcc0.ɵɵtemplate(8, ClrStackBlock_div_8_Template, 2, 2, "div", 6);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("id", ctx.uniqueId);
        ɵngcc0.ɵɵattribute("role", ctx.role)("tabindex", ctx.tabIndex)("aria-expanded", ctx.ariaExpanded)("aria-controls", ctx.getStackChildrenId())("aria-posinset", ctx.ariaPosinset)("aria-level", ctx.ariaLevel)("aria-setsize", ctx.ariaSetsize);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.expandable);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.getChangedValue);
        ɵngcc0.ɵɵadvance(5);
        ɵngcc0.ɵɵproperty("clrExpandTrigger", ctx.expanded);
        ɵngcc0.ɵɵattribute("id", ctx.getStackChildrenId());
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.expanded);
    } }, directives: [ɵngcc2.NgIf, ɵngcc3.ClrExpandableAnimation, ɵngcc4.CdsIconCustomTag], styles: ["[_nghost-%COMP%] {\n        display: block;\n      }"] });
ClrStackBlock.ctorParameters = () => [
    { type: ClrStackBlock, decorators: [{ type: SkipSelf }, { type: Optional }] },
    { type: String, decorators: [{ type: Inject, args: [UNIQUE_ID,] }] },
    { type: ClrCommonStringsService }
];
ClrStackBlock.propDecorators = {
    expanded: [{ type: HostBinding, args: ['class.stack-block-expanded',] }, { type: Input, args: ['clrSbExpanded',] }],
    expandedChange: [{ type: Output, args: ['clrSbExpandedChange',] }],
    expandable: [{ type: HostBinding, args: ['class.stack-block-expandable',] }, { type: Input, args: ['clrSbExpandable',] }],
    getChangedValue: [{ type: HostBinding, args: ['class.stack-block-changed',] }],
    setChangedValue: [{ type: Input, args: ['clrSbNotifyChange',] }],
    ariaLevel: [{ type: Input, args: ['clrStackViewLevel',] }],
    ariaSetsize: [{ type: Input, args: ['clrStackViewSetsize',] }],
    ariaPosinset: [{ type: Input, args: ['clrStackViewPosinset',] }],
    onStackLabelFocus: [{ type: HostBinding, args: ['class.on-focus',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClrStackBlock, [{
        type: Component,
        args: [{
                selector: 'clr-stack-block',
                template: `
    <div
      class="stack-block-label"
      (click)="toggleExpand()"
      (keyup.enter)="toggleExpand()"
      (keyup.space)="toggleExpand()"
      (focus)="focused = true"
      (blur)="focused = false"
      [id]="uniqueId"
      [attr.role]="role"
      [attr.tabindex]="tabIndex"
      [attr.aria-expanded]="ariaExpanded"
      [attr.aria-controls]="getStackChildrenId()"
      [attr.aria-posinset]="ariaPosinset"
      [attr.aria-level]="ariaLevel"
      [attr.aria-setsize]="ariaSetsize"
    >
      <cds-icon shape="angle" class="stack-block-caret" *ngIf="expandable" [attr.direction]="caretDirection"></cds-icon>
      <span class="clr-sr-only" *ngIf="getChangedValue">{{ commonStrings.keys.stackViewChanged }}</span>
      <div class="stack-view-key">
        <!-- This structure changed to fix #3567 and the a11y request was to move away from dl's -->
        <!-- I added the key class to update css targets for the original component style -->
        <ng-content select="clr-stack-label"></ng-content>
      </div>
      <div class="stack-block-content">
        <ng-content></ng-content>
      </div>
    </div>

    <clr-expandable-animation [clrExpandTrigger]="expanded" class="stack-children" [attr.id]="getStackChildrenId()">
      <div [style.height]="expanded ? 'auto' : 0" role="region" *ngIf="expanded">
        <ng-content select="clr-stack-block"></ng-content>
      </div>
    </clr-expandable-animation>
  `,
                // Make sure the host has the proper class for styling purposes
                host: { '[class.stack-block]': 'true' },
                providers: [UNIQUE_ID_PROVIDER],
                styles: [`
      :host {
        display: block;
      }
    `]
            }]
    }], function () { return [{ type: ClrStackBlock, decorators: [{
                type: SkipSelf
            }, {
                type: Optional
            }] }, { type: String, decorators: [{
                type: Inject,
                args: [UNIQUE_ID]
            }] }, { type: ɵngcc1.ClrCommonStringsService }]; }, { expanded: [{
            type: HostBinding,
            args: ['class.stack-block-expanded']
        }, {
            type: Input,
            args: ['clrSbExpanded']
        }], expandedChange: [{
            type: Output,
            args: ['clrSbExpandedChange']
        }], expandable: [{
            type: HostBinding,
            args: ['class.stack-block-expandable']
        }, {
            type: Input,
            args: ['clrSbExpandable']
        }], getChangedValue: [{
            type: HostBinding,
            args: ['class.stack-block-changed']
        }], setChangedValue: [{
            type: Input,
            args: ['clrSbNotifyChange']
        }], onStackLabelFocus: [{
            type: HostBinding,
            args: ['class.on-focus']
        }], ariaLevel: [{
            type: Input,
            args: ['clrStackViewLevel']
        }], ariaSetsize: [{
            type: Input,
            args: ['clrStackViewSetsize']
        }], ariaPosinset: [{
            type: Input,
            args: ['clrStackViewPosinset']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,