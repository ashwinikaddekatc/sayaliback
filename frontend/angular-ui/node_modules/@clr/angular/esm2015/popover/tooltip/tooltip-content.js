/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, ElementRef, Inject, Injector, Input, Optional } from '@angular/core';
import { AbstractPopover } from '../common/abstract-popover';
import { Point } from '../common/popover';
import { POPOVER_HOST_ANCHOR } from '../common/popover-host-anchor.token';
import { UNIQUE_ID } from '../../utils/id-generator/id-generator.service';
import { TooltipIdService } from './providers/tooltip-id.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './providers/tooltip-id.service';

const _c0 = ["*"];
const POSITIONS = ['bottom-left', 'bottom-right', 'top-left', 'top-right', 'right', 'left'];
const SIZES = ['xs', 'sm', 'md', 'lg'];
export class ClrTooltipContent extends AbstractPopover {
    constructor(injector, parentHost, uniqueId, tooltipIdService) {
        super(injector, parentHost);
        this.uniqueId = uniqueId;
        this.tooltipIdService = tooltipIdService;
        if (!parentHost) {
            throw new Error('clr-tooltip-content should only be used inside of a clr-tooltip');
        }
        // Defaults
        this.position = 'right';
        this.size = 'sm';
        // Set the default id in case consumer does not supply a custom id.
        this.updateId(uniqueId);
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this.updateId(value || '');
    }
    updateId(id) {
        this._id = id;
        this.tooltipIdService.updateId(id);
    }
    get position() {
        return this._position;
    }
    set position(position) {
        // Ugh
        this.renderer.removeClass(this.el.nativeElement, 'tooltip-' + this.position);
        if (position && POSITIONS.indexOf(position) > -1) {
            this._position = position;
        }
        else {
            this._position = 'right';
        }
        // Ugh
        this.renderer.addClass(this.el.nativeElement, 'tooltip-' + this.position);
        // set the popover values based on direction
        switch (position) {
            case 'top-right':
                this.anchorPoint = Point.TOP_CENTER;
                this.popoverPoint = Point.LEFT_BOTTOM;
                break;
            case 'top-left':
                this.anchorPoint = Point.TOP_CENTER;
                this.popoverPoint = Point.RIGHT_BOTTOM;
                break;
            case 'bottom-right':
                this.anchorPoint = Point.BOTTOM_CENTER;
                this.popoverPoint = Point.LEFT_TOP;
                break;
            case 'bottom-left':
                this.anchorPoint = Point.BOTTOM_CENTER;
                this.popoverPoint = Point.RIGHT_TOP;
                break;
            case 'right':
                this.anchorPoint = Point.RIGHT_CENTER;
                this.popoverPoint = Point.LEFT_TOP;
                break;
            case 'left':
                this.anchorPoint = Point.LEFT_CENTER;
                this.popoverPoint = Point.RIGHT_TOP;
                break;
            default:
                this.anchorPoint = Point.RIGHT_CENTER;
                this.popoverPoint = Point.LEFT_TOP;
                break;
        }
    }
    get size() {
        return this._size;
    }
    set size(size) {
        // Ugh
        this.renderer.removeClass(this.el.nativeElement, 'tooltip-' + this.size);
        if (size && SIZES.indexOf(size) > -1) {
            this._size = size;
        }
        else {
            this._size = 'sm';
        }
        // Ugh
        this.renderer.addClass(this.el.nativeElement, 'tooltip-' + this.size);
    }
}
ClrTooltipContent.ɵfac = function ClrTooltipContent_Factory(t) { return new (t || ClrTooltipContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(POPOVER_HOST_ANCHOR, 8), ɵngcc0.ɵɵdirectiveInject(UNIQUE_ID), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.TooltipIdService)); };
ClrTooltipContent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrTooltipContent, selectors: [["clr-tooltip-content"]], hostVars: 6, hostBindings: function ClrTooltipContent_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵhostProperty("id", ctx.id);
        ɵngcc0.ɵɵattribute("role", "tooltip");
        ɵngcc0.ɵɵstyleProp("opacity", 1);
        ɵngcc0.ɵɵclassProp("tooltip-content", true);
    } }, inputs: { position: ["clrPosition", "position"], size: ["clrSize", "size"], id: "id" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function ClrTooltipContent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
ClrTooltipContent.ctorParameters = () => [
    { type: Injector },
    { type: ElementRef, decorators: [{ type: Optional }, { type: Inject, args: [POPOVER_HOST_ANCHOR,] }] },
    { type: String, decorators: [{ type: Inject, args: [UNIQUE_ID,] }] },
    { type: TooltipIdService }
];
ClrTooltipContent.propDecorators = {
    id: [{ type: Input }],
    position: [{ type: Input, args: ['clrPosition',] }],
    size: [{ type: Input, args: ['clrSize',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClrTooltipContent, [{
        type: Component,
        args: [{
                selector: 'clr-tooltip-content',
                template: ` <ng-content></ng-content> `,
                host: {
                    '[class.tooltip-content]': 'true',
                    '[style.opacity]': '1',
                    '[attr.role]': '"tooltip"',
                    '[id]': 'id'
                }
            }]
    }], function () { return [{ type: ɵngcc0.Injector }, { type: ɵngcc0.ElementRef, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [POPOVER_HOST_ANCHOR]
            }] }, { type: String, decorators: [{
                type: Inject,
                args: [UNIQUE_ID]
            }] }, { type: ɵngcc1.TooltipIdService }]; }, { position: [{
            type: Input,
            args: ['clrPosition']
        }], size: [{
            type: Input,
            args: ['clrSize']
        }], id: [{
            type: Input
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,