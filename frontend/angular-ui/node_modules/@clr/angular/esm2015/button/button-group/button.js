/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, EventEmitter, Input, Optional, Output, SkipSelf, ViewChild } from '@angular/core';
import { ClrLoadingState } from '../../utils/loading/loading';
import { LoadingListener } from '../../utils/loading/loading-listener';
import { ButtonInGroupService } from '../providers/button-in-group.service';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../providers/button-in-group.service';
import * as ɵngcc2 from '../../utils/popover/providers/popover-toggle.service';
import * as ɵngcc3 from '@angular/common';

const _c0 = ["buttonProjectedRef"];
function ClrButton_ng_template_0_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "span", 3);
} }
function ClrButton_ng_template_0_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 1);
    ɵngcc0.ɵɵlistener("click", function ClrButton_ng_template_0_Template_button_click_0_listener($event) { ɵngcc0.ɵɵrestoreView(_r4); const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.emitClick($event); });
    ɵngcc0.ɵɵtemplate(1, ClrButton_ng_template_0_span_1_Template, 1, 0, "span", 2);
    ɵngcc0.ɵɵprojection(2);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassMap(ctx_r1.classNames);
    ɵngcc0.ɵɵattribute("type", ctx_r1.type)("name", ctx_r1.name)("disabled", ctx_r1.disabled)("id", ctx_r1.id);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r1.loading);
} }
const _c1 = ["*"];
export class ClrButton {
    constructor(buttonInGroupService, toggleService) {
        this.buttonInGroupService = buttonInGroupService;
        this.toggleService = toggleService;
        this._enableService = false;
        this._inMenu = false;
        this._classNames = 'btn';
        this._name = null;
        this._type = null;
        this._id = null;
        this._disabled = null;
        this._click = new EventEmitter(false);
    }
    get inMenu() {
        return this._inMenu;
    }
    set inMenu(value) {
        value = !!value;
        if (this._inMenu !== value) {
            this._inMenu = value;
            // We check if the service flag is enabled
            // and if the service exists because the service is optional
            if (this._enableService && this.buttonInGroupService) {
                this.buttonInGroupService.updateButtonGroup(this);
            }
        }
    }
    get classNames() {
        return this._classNames;
    }
    set classNames(value) {
        if (typeof value === 'string') {
            const classNames = value.split(' ');
            if (classNames.indexOf('btn') === -1) {
                classNames.push('btn');
            }
            this._classNames = classNames.join(' ');
        }
    }
    get name() {
        return this._name;
    }
    set name(value) {
        if (typeof value === 'string') {
            this._name = value;
        }
    }
    get type() {
        return this._type;
    }
    set type(value) {
        if (typeof value === 'string') {
            this._type = value;
        }
    }
    get id() {
        return this._id;
    }
    set id(value) {
        if (typeof value === 'string') {
            this._id = value;
        }
    }
    get disabled() {
        return this._disabled;
    }
    set disabled(value) {
        if (value !== null && value !== false) {
            this._disabled = '';
        }
        else {
            this._disabled = null;
        }
    }
    loadingStateChange(state) {
        this.loading = state === ClrLoadingState.LOADING;
    }
    emitClick($event) {
        if (this.inMenu) {
            this.toggleService.toggleWithEvent($event);
        }
        this._click.emit(true);
    }
    ngAfterViewInit() {
        this._enableService = true;
    }
}
ClrButton.ɵfac = function ClrButton_Factory(t) { return new (t || ClrButton)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ButtonInGroupService, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ClrPopoverToggleService)); };
ClrButton.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrButton, selectors: [["clr-button"]], viewQuery: function ClrButton_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 3);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.templateRef = _t.first);
    } }, inputs: { inMenu: ["clrInMenu", "inMenu"], classNames: ["class", "classNames"], name: "name", type: "type", id: "id", disabled: "disabled" }, outputs: { _click: "click" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: LoadingListener, useExisting: ClrButton }])], ngContentSelectors: _c1, decls: 2, vars: 0, consts: [["buttonProjectedRef", ""], [3, "click"], ["class", "spinner spinner-inline", 4, "ngIf"], [1, "spinner", "spinner-inline"]], template: function ClrButton_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, ClrButton_ng_template_0_Template, 3, 7, "ng-template", null, 0, ɵngcc0.ɵɵtemplateRefExtractor);
    } }, directives: [ɵngcc3.NgIf], encapsulation: 2 });
ClrButton.ctorParameters = () => [
    { type: ButtonInGroupService, decorators: [{ type: SkipSelf }, { type: Optional }] },
    { type: ClrPopoverToggleService }
];
ClrButton.propDecorators = {
    templateRef: [{ type: ViewChild, args: ['buttonProjectedRef', { static: true },] }],
    inMenu: [{ type: Input, args: ['clrInMenu',] }],
    classNames: [{ type: Input, args: ['class',] }],
    name: [{ type: Input, args: ['name',] }],
    type: [{ type: Input, args: ['type',] }],
    id: [{ type: Input, args: ['id',] }],
    disabled: [{ type: Input, args: ['disabled',] }],
    _click: [{ type: Output, args: ['click',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClrButton, [{
        type: Component,
        args: [{
                selector: 'clr-button',
                template: `
    <ng-template #buttonProjectedRef>
      <button
        [class]="classNames"
        (click)="emitClick($event)"
        [attr.type]="type"
        [attr.name]="name"
        [attr.disabled]="disabled"
        [attr.id]="id"
      >
        <span class="spinner spinner-inline" *ngIf="loading"></span>
        <ng-content></ng-content>
      </button>
    </ng-template>
  `,
                providers: [{ provide: LoadingListener, useExisting: ClrButton }]
            }]
    }], function () { return [{ type: ɵngcc1.ButtonInGroupService, decorators: [{
                type: SkipSelf
            }, {
                type: Optional
            }] }, { type: ɵngcc2.ClrPopoverToggleService }]; }, { _click: [{
            type: Output,
            args: ['click']
        }], inMenu: [{
            type: Input,
            args: ['clrInMenu']
        }], classNames: [{
            type: Input,
            args: ['class']
        }], name: [{
            type: Input,
            args: ['name']
        }], type: [{
            type: Input,
            args: ['type']
        }], id: [{
            type: Input,
            args: ['id']
        }], disabled: [{
            type: Input,
            args: ['disabled']
        }], templateRef: [{
            type: ViewChild,
            args: ['buttonProjectedRef', { static: true }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,