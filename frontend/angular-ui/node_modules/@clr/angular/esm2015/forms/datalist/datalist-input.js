/**
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Directive, ViewContainerRef, Injector, Self, Optional, Renderer2, ElementRef, HostListener, } from '@angular/core';
import { WrappedFormControl } from '../common/wrapped-control';
import { ClrDatalistContainer } from './datalist-container';
import { NgControl } from '@angular/forms';
import { FocusService } from '../common/providers/focus.service';
import { DatalistIdService } from './providers/datalist-id.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../common/providers/focus.service';
import * as ɵngcc2 from '@angular/forms';
import * as ɵngcc3 from './providers/datalist-id.service';
export class ClrDatalistInput extends WrappedFormControl {
    constructor(focusService, vcr, injector, control, renderer, el, datalistIdService) {
        super(vcr, ClrDatalistContainer, injector, control, renderer, el);
        this.focusService = focusService;
        this.datalistIdService = datalistIdService;
        if (!this.focusService) {
            throw new Error('clrDatalist requires being wrapped in <clr-datalist-container>');
        }
    }
    ngAfterContentInit() {
        // Subscriptions is inherited from WrappedFormControl, unsubscribe is handled there
        this.subscriptions.push(this.datalistIdService.idChange.subscribe(id => (this.listValue = id)));
    }
    triggerFocus() {
        if (this.focusService) {
            this.focusService.focused = true;
        }
    }
    triggerValidation() {
        super.triggerValidation();
        if (this.focusService) {
            this.focusService.focused = false;
        }
    }
}
ClrDatalistInput.ɵfac = function ClrDatalistInput_Factory(t) { return new (t || ClrDatalistInput)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.DatalistIdService)); };
ClrDatalistInput.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClrDatalistInput, selectors: [["", "clrDatalistInput", ""]], hostVars: 3, hostBindings: function ClrDatalistInput_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("focus", function ClrDatalistInput_focus_HostBindingHandler() { return ctx.triggerFocus(); })("blur", function ClrDatalistInput_blur_HostBindingHandler() { return ctx.triggerValidation(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("list", ctx.listValue);
        ɵngcc0.ɵɵclassProp("clr-input", true);
    } }, features: [ɵngcc0.ɵɵInheritDefinitionFeature] });
ClrDatalistInput.ctorParameters = () => [
    { type: FocusService, decorators: [{ type: Optional }] },
    { type: ViewContainerRef },
    { type: Injector },
    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },
    { type: Renderer2 },
    { type: ElementRef },
    { type: DatalistIdService }
];
ClrDatalistInput.propDecorators = {
    triggerFocus: [{ type: HostListener, args: ['focus',] }],
    triggerValidation: [{ type: HostListener, args: ['blur',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClrDatalistInput, [{
        type: Directive,
        args: [{
                selector: '[clrDatalistInput]',
                host: {
                    '[class.clr-input]': 'true',
                    '[attr.list]': 'listValue'
                }
            }]
    }], function () { return [{ type: ɵngcc1.FocusService, decorators: [{
                type: Optional
            }] }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.Injector }, { type: ɵngcc2.NgControl, decorators: [{
                type: Self
            }, {
                type: Optional
            }] }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: ɵngcc3.DatalistIdService }]; }, { triggerFocus: [{
            type: HostListener,
            args: ['focus']
        }], triggerValidation: [{
            type: HostListener,
            args: ['blur']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YWxpc3QtaW5wdXQuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2Nsci1hbmd1bGFyL3NyYy9mb3Jtcy9kYXRhbGlzdC9kYXRhbGlzdC1pbnB1dC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFFSCxPQUFPLEVBQ0wsU0FBUyxFQUNULGdCQUFnQixFQUNoQixRQUFRLEVBQ1IsSUFBSSxFQUNKLFFBQVEsRUFDUixTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksR0FFYixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUMvRCxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUM1RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDM0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDOzs7OztBQVNwRSxNQUFNLE9BQU8sZ0JBQWlCLFNBQVEsa0JBQXdDO0FBQUcsSUFDL0UsWUFDc0IsWUFBMEIsRUFDOUMsR0FBcUIsRUFDckIsUUFBa0IsRUFHbEIsT0FBa0IsRUFDbEIsUUFBbUIsRUFDbkIsRUFBYyxFQUNOLGlCQUFvQztBQUM3QyxRQUNDLEtBQUssQ0FBQyxHQUFHLEVBQUUsb0JBQW9CLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRSxRQUFRLEVBQUUsRUFBRSxDQUFDLENBQUM7QUFDdEUsUUFYd0IsaUJBQVksR0FBWixZQUFZLENBQWM7QUFBQyxRQVF2QyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQW1CO0FBQ2hELFFBR0ksSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUU7QUFDNUIsWUFBTSxNQUFNLElBQUksS0FBSyxDQUFDLGdFQUFnRSxDQUFDLENBQUM7QUFDeEYsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNILElBR0Usa0JBQWtCO0FBQ3BCLFFBQUksbUZBQW1GO0FBQ3ZGLFFBQUksSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3BHLElBQUUsQ0FBQztBQUNILElBRUUsWUFBWTtBQUNkLFFBQUksSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO0FBQzNCLFlBQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO0FBQ3ZDLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxJQUVFLGlCQUFpQjtBQUNuQixRQUFJLEtBQUssQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO0FBQzlCLFFBQUksSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO0FBQzNCLFlBQU0sSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO0FBQ3hDLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSDs0Q0EvQ0MsU0FBUyxTQUFDLGtCQUNULFFBQVEsRUFBRSxvQkFBb0Isa0JBQzlCLElBQUksRUFBRSxzQkFDSixtQkFBbUIsRUFBRSxNQUFNLHNCQUMzQixhQUFhLEVBQUUsV0FBVyxtQkFDM0IsZUFDRjs7Ozs7OzBEQUNJO0FBQUM7QUFBMEMsWUFWdkMsWUFBWSx1QkFZaEIsUUFBUTtBQUFPLFlBeEJsQixnQkFBZ0I7QUFDaEIsWUFBQSxRQUFRO0FBQ1IsWUFTTyxTQUFTLHVCQWdCYixJQUFJLFlBQ0osUUFBUTtBQUNULFlBekJGLFNBQVM7QUFDVCxZQUFBLFVBQVU7QUFDVixZQU9PLGlCQUFpQjtBQUFHO0FBQUc7QUFBb0MsMkJBbUNqRSxZQUFZLFNBQUMsT0FBTztBQUNsQixnQ0FNRixZQUFZLFNBQUMsTUFBTTtBQUNsQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtMjAyMCBWTXdhcmUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFRoaXMgc29mdHdhcmUgaXMgcmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UuXG4gKiBUaGUgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBpbiBMSUNFTlNFIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHByb2plY3QuXG4gKi9cblxuaW1wb3J0IHtcbiAgRGlyZWN0aXZlLFxuICBWaWV3Q29udGFpbmVyUmVmLFxuICBJbmplY3RvcixcbiAgU2VsZixcbiAgT3B0aW9uYWwsXG4gIFJlbmRlcmVyMixcbiAgRWxlbWVudFJlZixcbiAgSG9zdExpc3RlbmVyLFxuICBBZnRlckNvbnRlbnRJbml0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFdyYXBwZWRGb3JtQ29udHJvbCB9IGZyb20gJy4uL2NvbW1vbi93cmFwcGVkLWNvbnRyb2wnO1xuaW1wb3J0IHsgQ2xyRGF0YWxpc3RDb250YWluZXIgfSBmcm9tICcuL2RhdGFsaXN0LWNvbnRhaW5lcic7XG5pbXBvcnQgeyBOZ0NvbnRyb2wgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBGb2N1c1NlcnZpY2UgfSBmcm9tICcuLi9jb21tb24vcHJvdmlkZXJzL2ZvY3VzLnNlcnZpY2UnO1xuaW1wb3J0IHsgRGF0YWxpc3RJZFNlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy9kYXRhbGlzdC1pZC5zZXJ2aWNlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2NsckRhdGFsaXN0SW5wdXRdJyxcbiAgaG9zdDoge1xuICAgICdbY2xhc3MuY2xyLWlucHV0XSc6ICd0cnVlJyxcbiAgICAnW2F0dHIubGlzdF0nOiAnbGlzdFZhbHVlJyxcbiAgfSxcbn0pXG5leHBvcnQgY2xhc3MgQ2xyRGF0YWxpc3RJbnB1dCBleHRlbmRzIFdyYXBwZWRGb3JtQ29udHJvbDxDbHJEYXRhbGlzdENvbnRhaW5lcj4gaW1wbGVtZW50cyBBZnRlckNvbnRlbnRJbml0IHtcbiAgY29uc3RydWN0b3IoXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSBmb2N1c1NlcnZpY2U6IEZvY3VzU2VydmljZSxcbiAgICB2Y3I6IFZpZXdDb250YWluZXJSZWYsXG4gICAgaW5qZWN0b3I6IEluamVjdG9yLFxuICAgIEBTZWxmKClcbiAgICBAT3B0aW9uYWwoKVxuICAgIGNvbnRyb2w6IE5nQ29udHJvbCxcbiAgICByZW5kZXJlcjogUmVuZGVyZXIyLFxuICAgIGVsOiBFbGVtZW50UmVmLFxuICAgIHByaXZhdGUgZGF0YWxpc3RJZFNlcnZpY2U6IERhdGFsaXN0SWRTZXJ2aWNlXG4gICkge1xuICAgIHN1cGVyKHZjciwgQ2xyRGF0YWxpc3RDb250YWluZXIsIGluamVjdG9yLCBjb250cm9sLCByZW5kZXJlciwgZWwpO1xuXG4gICAgaWYgKCF0aGlzLmZvY3VzU2VydmljZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjbHJEYXRhbGlzdCByZXF1aXJlcyBiZWluZyB3cmFwcGVkIGluIDxjbHItZGF0YWxpc3QtY29udGFpbmVyPicpO1xuICAgIH1cbiAgfVxuXG4gIGxpc3RWYWx1ZTogc3RyaW5nO1xuXG4gIG5nQWZ0ZXJDb250ZW50SW5pdCgpIHtcbiAgICAvLyBTdWJzY3JpcHRpb25zIGlzIGluaGVyaXRlZCBmcm9tIFdyYXBwZWRGb3JtQ29udHJvbCwgdW5zdWJzY3JpYmUgaXMgaGFuZGxlZCB0aGVyZVxuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKHRoaXMuZGF0YWxpc3RJZFNlcnZpY2UuaWRDaGFuZ2Uuc3Vic2NyaWJlKGlkID0+ICh0aGlzLmxpc3RWYWx1ZSA9IGlkKSkpO1xuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignZm9jdXMnKVxuICB0cmlnZ2VyRm9jdXMoKSB7XG4gICAgaWYgKHRoaXMuZm9jdXNTZXJ2aWNlKSB7XG4gICAgICB0aGlzLmZvY3VzU2VydmljZS5mb2N1c2VkID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBASG9zdExpc3RlbmVyKCdibHVyJylcbiAgdHJpZ2dlclZhbGlkYXRpb24oKSB7XG4gICAgc3VwZXIudHJpZ2dlclZhbGlkYXRpb24oKTtcbiAgICBpZiAodGhpcy5mb2N1c1NlcnZpY2UpIHtcbiAgICAgIHRoaXMuZm9jdXNTZXJ2aWNlLmZvY3VzZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==