/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, Input } from '@angular/core';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import { DateFormControlService } from './providers/date-form-control.service';
import { DateNavigationService } from './providers/date-navigation.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './providers/date-navigation.service';
import * as ɵngcc2 from '../../utils/popover/providers/popover-toggle.service';
import * as ɵngcc3 from './providers/date-form-control.service';
export class ClrDay {
    constructor(_dateNavigationService, _toggleService, dateFormControlService) {
        this._dateNavigationService = _dateNavigationService;
        this._toggleService = _toggleService;
        this.dateFormControlService = dateFormControlService;
    }
    /**
     * DayViewModel input which is used to build the Day View.
     */
    set dayView(day) {
        this._dayView = day;
        this.dayString = this._dayView.dayModel.toDateString();
    }
    get dayView() {
        return this._dayView;
    }
    /**
     * Updates the focusedDay in the DateNavigationService when the ClrDay is focused.
     */
    onDayViewFocus() {
        this._dateNavigationService.focusedDay = this.dayView.dayModel;
    }
    /**
     * Updates the selectedDay when the ClrDay is selected and closes the datepicker popover.
     */
    selectDay() {
        const day = this.dayView.dayModel;
        this._dateNavigationService.notifySelectedDayChanged(day);
        this.dateFormControlService.markAsDirty();
        this._toggleService.open = false;
    }
}
ClrDay.ɵfac = function ClrDay_Factory(t) { return new (t || ClrDay)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DateNavigationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ClrPopoverToggleService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.DateFormControlService)); };
ClrDay.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrDay, selectors: [["clr-day"]], hostVars: 2, hostBindings: function ClrDay_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵclassProp("day", true);
    } }, inputs: { dayView: ["clrDayView", "dayView"] }, decls: 2, vars: 11, consts: [["type", "button", 1, "day-btn", 3, "click", "focus"]], template: function ClrDay_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "button", 0);
        ɵngcc0.ɵɵlistener("click", function ClrDay_Template_button_click_0_listener() { return ctx.selectDay(); })("focus", function ClrDay_Template_button_focus_0_listener() { return ctx.onDayViewFocus(); });
        ɵngcc0.ɵɵtext(1);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("is-today", ctx.dayView.isTodaysDate)("is-excluded", ctx.dayView.isExcluded)("is-disabled", ctx.dayView.isDisabled)("is-selected", ctx.dayView.isSelected);
        ɵngcc0.ɵɵattribute("tabindex", ctx.dayView.tabIndex)("aria-label", ctx.dayString);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵtextInterpolate1(" ", ctx.dayView.dayModel.date, " ");
    } }, encapsulation: 2 });
ClrDay.ctorParameters = () => [
    { type: DateNavigationService },
    { type: ClrPopoverToggleService },
    { type: DateFormControlService }
];
ClrDay.propDecorators = {
    dayView: [{ type: Input, args: ['clrDayView',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClrDay, [{
        type: Component,
        args: [{
                selector: 'clr-day',
                template: `
    <button
      class="day-btn"
      type="button"
      [class.is-today]="dayView.isTodaysDate"
      [class.is-excluded]="dayView.isExcluded"
      [class.is-disabled]="dayView.isDisabled"
      [class.is-selected]="dayView.isSelected"
      [attr.tabindex]="dayView.tabIndex"
      (click)="selectDay()"
      (focus)="onDayViewFocus()"
      [attr.aria-label]="dayString"
    >
      {{ dayView.dayModel.date }}
    </button>
  `,
                host: { '[class.day]': 'true' }
            }]
    }], function () { return [{ type: ɵngcc1.DateNavigationService }, { type: ɵngcc2.ClrPopoverToggleService }, { type: ɵngcc3.DateFormControlService }]; }, { dayView: [{
            type: Input,
            args: ['clrDayView']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF5LmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jbHItYW5ndWxhci9zcmMvZm9ybXMvZGF0ZXBpY2tlci9kYXkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBRUgsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFakQsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0sc0RBQXNELENBQUM7QUFJL0YsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDL0UsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0scUNBQXFDLENBQUM7Ozs7O0FBc0I1RSxNQUFNLE9BQU8sTUFBTTtBQUNuQixJQUdFLFlBQ1Usc0JBQTZDLEVBQzdDLGNBQXVDLEVBQ3ZDLHNCQUE4QztBQUN2RCxRQUhTLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBdUI7QUFBQyxRQUM5QyxtQkFBYyxHQUFkLGNBQWMsQ0FBeUI7QUFBQyxRQUN4QywyQkFBc0IsR0FBdEIsc0JBQXNCLENBQXdCO0FBQzFELElBQUssQ0FBQztBQUNOLElBQ0U7QUFDRjtBQUNFLE9BQUc7QUFDTCxJQUNFLElBQ1csT0FBTyxDQUFDLEdBQWlCO0FBQ3RDLFFBQUksSUFBSSxDQUFDLFFBQVEsR0FBRyxHQUFHLENBQUM7QUFDeEIsUUFBSSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQzNELElBQUUsQ0FBQztBQUNILElBQ0UsSUFBVyxPQUFPO0FBQUssUUFDckIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDO0FBQ3pCLElBQUUsQ0FBQztBQUNILElBQ0U7QUFDRjtBQUNFLE9BQUc7QUFDTCxJQUFFLGNBQWM7QUFDaEIsUUFBSSxJQUFJLENBQUMsc0JBQXNCLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO0FBQ25FLElBQUUsQ0FBQztBQUNILElBQ0U7QUFDRjtBQUNFLE9BQUc7QUFDTCxJQUFFLFNBQVM7QUFBSyxRQUNaLE1BQU0sR0FBRyxHQUFhLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO0FBQ2hELFFBQUksSUFBSSxDQUFDLHNCQUFzQixDQUFDLHdCQUF3QixDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzlELFFBQUksSUFBSSxDQUFDLHNCQUFzQixDQUFDLFdBQVcsRUFBRSxDQUFDO0FBQzlDLFFBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDO0FBQ3JDLElBQUUsQ0FBQztBQUNIO2tDQTVEQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLFNBQVMsa0JBQ25CLFFBQVEsRUFBRTs7OzZHQWVULGtCQUNELElBQUksRUFBRSxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsY0FDaEM7Ozs7Ozs7Ozs7NkJBQ0k7QUFBQztBQUNVLFlBdkJQLHFCQUFxQjtBQUFJLFlBTHpCLHVCQUF1QjtBQUFJLFlBSTNCLHNCQUFzQjtBQUFHO0FBQUc7QUFBMEIsc0JBcUM1RCxLQUFLLFNBQUMsWUFBWTtBQUNqQjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtMjAyMCBWTXdhcmUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFRoaXMgc29mdHdhcmUgaXMgcmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UuXG4gKiBUaGUgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBpbiBMSUNFTlNFIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHByb2plY3QuXG4gKi9cblxuaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBDbHJQb3BvdmVyVG9nZ2xlU2VydmljZSB9IGZyb20gJy4uLy4uL3V0aWxzL3BvcG92ZXIvcHJvdmlkZXJzL3BvcG92ZXItdG9nZ2xlLnNlcnZpY2UnO1xuXG5pbXBvcnQgeyBEYXlWaWV3TW9kZWwgfSBmcm9tICcuL21vZGVsL2RheS12aWV3Lm1vZGVsJztcbmltcG9ydCB7IERheU1vZGVsIH0gZnJvbSAnLi9tb2RlbC9kYXkubW9kZWwnO1xuaW1wb3J0IHsgRGF0ZUZvcm1Db250cm9sU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL2RhdGUtZm9ybS1jb250cm9sLnNlcnZpY2UnO1xuaW1wb3J0IHsgRGF0ZU5hdmlnYXRpb25TZXJ2aWNlIH0gZnJvbSAnLi9wcm92aWRlcnMvZGF0ZS1uYXZpZ2F0aW9uLnNlcnZpY2UnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjbHItZGF5JyxcbiAgdGVtcGxhdGU6IGBcbiAgICA8YnV0dG9uXG4gICAgICBjbGFzcz1cImRheS1idG5cIlxuICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICBbY2xhc3MuaXMtdG9kYXldPVwiZGF5Vmlldy5pc1RvZGF5c0RhdGVcIlxuICAgICAgW2NsYXNzLmlzLWV4Y2x1ZGVkXT1cImRheVZpZXcuaXNFeGNsdWRlZFwiXG4gICAgICBbY2xhc3MuaXMtZGlzYWJsZWRdPVwiZGF5Vmlldy5pc0Rpc2FibGVkXCJcbiAgICAgIFtjbGFzcy5pcy1zZWxlY3RlZF09XCJkYXlWaWV3LmlzU2VsZWN0ZWRcIlxuICAgICAgW2F0dHIudGFiaW5kZXhdPVwiZGF5Vmlldy50YWJJbmRleFwiXG4gICAgICAoY2xpY2spPVwic2VsZWN0RGF5KClcIlxuICAgICAgKGZvY3VzKT1cIm9uRGF5Vmlld0ZvY3VzKClcIlxuICAgICAgW2F0dHIuYXJpYS1sYWJlbF09XCJkYXlTdHJpbmdcIlxuICAgID5cbiAgICAgIHt7IGRheVZpZXcuZGF5TW9kZWwuZGF0ZSB9fVxuICAgIDwvYnV0dG9uPlxuICBgLFxuICBob3N0OiB7ICdbY2xhc3MuZGF5XSc6ICd0cnVlJyB9LFxufSlcbmV4cG9ydCBjbGFzcyBDbHJEYXkge1xuICBwcml2YXRlIF9kYXlWaWV3OiBEYXlWaWV3TW9kZWw7XG4gIHB1YmxpYyBkYXlTdHJpbmc6IHN0cmluZztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIF9kYXRlTmF2aWdhdGlvblNlcnZpY2U6IERhdGVOYXZpZ2F0aW9uU2VydmljZSxcbiAgICBwcml2YXRlIF90b2dnbGVTZXJ2aWNlOiBDbHJQb3BvdmVyVG9nZ2xlU2VydmljZSxcbiAgICBwcml2YXRlIGRhdGVGb3JtQ29udHJvbFNlcnZpY2U6IERhdGVGb3JtQ29udHJvbFNlcnZpY2VcbiAgKSB7fVxuXG4gIC8qKlxuICAgKiBEYXlWaWV3TW9kZWwgaW5wdXQgd2hpY2ggaXMgdXNlZCB0byBidWlsZCB0aGUgRGF5IFZpZXcuXG4gICAqL1xuXG4gIEBJbnB1dCgnY2xyRGF5VmlldycpXG4gIHB1YmxpYyBzZXQgZGF5VmlldyhkYXk6IERheVZpZXdNb2RlbCkge1xuICAgIHRoaXMuX2RheVZpZXcgPSBkYXk7XG4gICAgdGhpcy5kYXlTdHJpbmcgPSB0aGlzLl9kYXlWaWV3LmRheU1vZGVsLnRvRGF0ZVN0cmluZygpO1xuICB9XG5cbiAgcHVibGljIGdldCBkYXlWaWV3KCk6IERheVZpZXdNb2RlbCB7XG4gICAgcmV0dXJuIHRoaXMuX2RheVZpZXc7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgZm9jdXNlZERheSBpbiB0aGUgRGF0ZU5hdmlnYXRpb25TZXJ2aWNlIHdoZW4gdGhlIENsckRheSBpcyBmb2N1c2VkLlxuICAgKi9cbiAgb25EYXlWaWV3Rm9jdXMoKSB7XG4gICAgdGhpcy5fZGF0ZU5hdmlnYXRpb25TZXJ2aWNlLmZvY3VzZWREYXkgPSB0aGlzLmRheVZpZXcuZGF5TW9kZWw7XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgc2VsZWN0ZWREYXkgd2hlbiB0aGUgQ2xyRGF5IGlzIHNlbGVjdGVkIGFuZCBjbG9zZXMgdGhlIGRhdGVwaWNrZXIgcG9wb3Zlci5cbiAgICovXG4gIHNlbGVjdERheSgpOiB2b2lkIHtcbiAgICBjb25zdCBkYXk6IERheU1vZGVsID0gdGhpcy5kYXlWaWV3LmRheU1vZGVsO1xuICAgIHRoaXMuX2RhdGVOYXZpZ2F0aW9uU2VydmljZS5ub3RpZnlTZWxlY3RlZERheUNoYW5nZWQoZGF5KTtcbiAgICB0aGlzLmRhdGVGb3JtQ29udHJvbFNlcnZpY2UubWFya0FzRGlydHkoKTtcbiAgICB0aGlzLl90b2dnbGVTZXJ2aWNlLm9wZW4gPSBmYWxzZTtcbiAgfVxufVxuIl19