/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, ElementRef, HostListener } from '@angular/core';
import { DOWN_ARROW, LEFT_ARROW, RIGHT_ARROW, UP_ARROW } from '../../utils/key-codes/key-codes';
import { DateNavigationService } from './providers/date-navigation.service';
import { DatepickerFocusService } from './providers/datepicker-focus.service';
import { LocaleHelperService } from './providers/locale-helper.service';
import { ViewManagerService } from './providers/view-manager.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './providers/view-manager.service';
import * as ɵngcc2 from './providers/locale-helper.service';
import * as ɵngcc3 from './providers/date-navigation.service';
import * as ɵngcc4 from './providers/datepicker-focus.service';
import * as ɵngcc5 from '@angular/common';

function ClrMonthpicker_button_0_Template(rf, ctx) { if (rf & 1) {
    const _r4 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "button", 1);
    ɵngcc0.ɵɵlistener("click", function ClrMonthpicker_button_0_Template_button_click_0_listener() { ɵngcc0.ɵɵrestoreView(_r4); const monthIndex_r2 = ctx.index; const ctx_r3 = ɵngcc0.ɵɵnextContext(); return ctx_r3.changeMonth(monthIndex_r2); });
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const month_r1 = ctx.$implicit;
    const monthIndex_r2 = ctx.index;
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵclassProp("is-selected", monthIndex_r2 === ctx_r0.calendarMonthIndex);
    ɵngcc0.ɵɵattribute("tabindex", ctx_r0.getTabIndex(monthIndex_r2));
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", month_r1, " ");
} }
export class ClrMonthpicker {
    constructor(_viewManagerService, _localeHelperService, _dateNavigationService, _datepickerFocusService, _elRef) {
        this._viewManagerService = _viewManagerService;
        this._localeHelperService = _localeHelperService;
        this._dateNavigationService = _dateNavigationService;
        this._datepickerFocusService = _datepickerFocusService;
        this._elRef = _elRef;
        this._focusedMonthIndex = this.calendarMonthIndex;
    }
    /**
     * Gets the months array which is used to rendered the monthpicker view.
     * Months are in the TranslationWidth.Wide format.
     */
    get monthNames() {
        return this._localeHelperService.localeMonthsWide;
    }
    /**
     * Gets the month value of the Calendar.
     */
    get calendarMonthIndex() {
        return this._dateNavigationService.displayedCalendar.month;
    }
    /**
     * Calls the DateNavigationService to update the month value of the calendar.
     * Also changes the view to the daypicker.
     */
    changeMonth(monthIndex) {
        this._dateNavigationService.changeMonth(monthIndex);
        this._viewManagerService.changeToDayView();
    }
    /**
     * Compares the month passed to the focused month and returns the tab index.
     */
    getTabIndex(monthIndex) {
        return monthIndex === this._focusedMonthIndex ? 0 : -1;
    }
    /**
     * Handles the Keyboard arrow navigation for the monthpicker.
     */
    onKeyDown(event) {
        // NOTE: Didn't move this to the date navigation service because
        // the logic is fairly simple and it didn't make sense for me
        // to create extra observables just to move this logic to the service.
        if (event) {
            const keyCode = event.keyCode;
            if (keyCode === UP_ARROW && this._focusedMonthIndex > 0) {
                event.preventDefault();
                this._focusedMonthIndex--;
                this._datepickerFocusService.focusCell(this._elRef);
            }
            else if (keyCode === DOWN_ARROW && this._focusedMonthIndex < 11) {
                event.preventDefault();
                this._focusedMonthIndex++;
                this._datepickerFocusService.focusCell(this._elRef);
            }
            else if (keyCode === RIGHT_ARROW && this._focusedMonthIndex < 6) {
                event.preventDefault();
                this._focusedMonthIndex = this._focusedMonthIndex + 6;
                this._datepickerFocusService.focusCell(this._elRef);
            }
            else if (keyCode === LEFT_ARROW && this._focusedMonthIndex > 5) {
                event.preventDefault();
                this._focusedMonthIndex = this._focusedMonthIndex - 6;
                this._datepickerFocusService.focusCell(this._elRef);
            }
        }
    }
    /**
     * Focuses on the current calendar month when the View is initialized.
     */
    ngAfterViewInit() {
        this._datepickerFocusService.focusCell(this._elRef);
    }
}
ClrMonthpicker.ɵfac = function ClrMonthpicker_Factory(t) { return new (t || ClrMonthpicker)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ViewManagerService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.LocaleHelperService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.DateNavigationService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.DatepickerFocusService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ClrMonthpicker.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrMonthpicker, selectors: [["clr-monthpicker"]], hostVars: 2, hostBindings: function ClrMonthpicker_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown", function ClrMonthpicker_keydown_HostBindingHandler($event) { return ctx.onKeyDown($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("monthpicker", true);
    } }, decls: 1, vars: 1, consts: [["type", "button", "class", "calendar-btn month", 3, "is-selected", "click", 4, "ngFor", "ngForOf"], ["type", "button", 1, "calendar-btn", "month", 3, "click"]], template: function ClrMonthpicker_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, ClrMonthpicker_button_0_Template, 2, 4, "button", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngForOf", ctx.monthNames);
    } }, directives: [ɵngcc5.NgForOf], encapsulation: 2 });
ClrMonthpicker.ctorParameters = () => [
    { type: ViewManagerService },
    { type: LocaleHelperService },
    { type: DateNavigationService },
    { type: DatepickerFocusService },
    { type: ElementRef }
];
ClrMonthpicker.propDecorators = {
    onKeyDown: [{ type: HostListener, args: ['keydown', ['$event'],] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClrMonthpicker, [{
        type: Component,
        args: [{
                selector: 'clr-monthpicker',
                template: `
    <button
      type="button"
      class="calendar-btn month"
      *ngFor="let month of monthNames; let monthIndex = index"
      (click)="changeMonth(monthIndex)"
      [class.is-selected]="monthIndex === calendarMonthIndex"
      [attr.tabindex]="getTabIndex(monthIndex)"
    >
      {{ month }}
    </button>
  `,
                host: {
                    '[class.monthpicker]': 'true'
                }
            }]
    }], function () { return [{ type: ɵngcc1.ViewManagerService }, { type: ɵngcc2.LocaleHelperService }, { type: ɵngcc3.DateNavigationService }, { type: ɵngcc4.DatepickerFocusService }, { type: ɵngcc0.ElementRef }]; }, { 
    /**
     * Handles the Keyboard arrow navigation for the monthpicker.
     */
    onKeyDown: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,