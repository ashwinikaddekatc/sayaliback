/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Directive, Optional } from '@angular/core';
import { NgControlService } from '../providers/ng-control.service';
import { IfControlStateService } from './if-control-state.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './if-control-state.service';
import * as ɵngcc2 from '../providers/ng-control.service';
export class AbstractIfState {
    constructor(ifControlStateService, ngControlService) {
        this.ifControlStateService = ifControlStateService;
        this.ngControlService = ngControlService;
        this.subscriptions = [];
        this.displayedContent = false;
        if (ngControlService) {
            this.subscriptions.push(this.ngControlService.controlChanges.subscribe(control => {
                this.control = control;
            }));
        }
        if (ifControlStateService) {
            this.subscriptions.push(this.ifControlStateService.statusChanges.subscribe((state) => {
                this.handleState(state);
            }));
        }
    }
    ngOnDestroy() {
        this.subscriptions.forEach(sub => sub.unsubscribe());
    }
    handleState(state) {
        /* overwrite in implementation to handle status change */
    }
}
AbstractIfState.ɵfac = function AbstractIfState_Factory(t) { return new (t || AbstractIfState)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IfControlStateService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.NgControlService, 8)); };
AbstractIfState.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: AbstractIfState });
AbstractIfState.ctorParameters = () => [
    { type: IfControlStateService, decorators: [{ type: Optional }] },
    { type: NgControlService, decorators: [{ type: Optional }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(AbstractIfState, [{
        type: Directive
    }], function () { return [{ type: ɵngcc1.IfControlStateService, decorators: [{
                type: Optional
            }] }, { type: ɵngcc2.NgControlService, decorators: [{
                type: Optional
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtaWYtc3RhdGUuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2Nsci1hbmd1bGFyL3NyYy9mb3Jtcy9jb21tb24vaWYtY29udHJvbC1zdGF0ZS9hYnN0cmFjdC1pZi1zdGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxPQUFPLEVBQUUsU0FBUyxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUdwRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQ0FBaUMsQ0FBQztBQUVuRSxPQUFPLEVBQUUscUJBQXFCLEVBQWlCLE1BQU0sNEJBQTRCLENBQUM7Ozs7QUFHbEYsTUFBTSxPQUFnQixlQUFlO0FBQ3JDLElBSUUsWUFDd0IscUJBQTRDLEVBQzVDLGdCQUFrQztBQUN6RCxRQUZ1QiwwQkFBcUIsR0FBckIscUJBQXFCLENBQXVCO0FBQUMsUUFDN0MscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFrQjtBQUM1RCxRQVBZLGtCQUFhLEdBQW1CLEVBQUUsQ0FBQztBQUMvQyxRQUFZLHFCQUFnQixHQUFHLEtBQUssQ0FBQztBQUNyQyxRQU1JLElBQUksZ0JBQWdCLEVBQUU7QUFDMUIsWUFBTSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FDckIsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUU7QUFDakUsZ0JBQVUsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7QUFDakMsWUFBUSxDQUFDLENBQUMsQ0FDSCxDQUFDO0FBQ1IsU0FBSztBQUNMLFFBQ0ksSUFBSSxxQkFBcUIsRUFBRTtBQUMvQixZQUFNLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUNyQixJQUFJLENBQUMscUJBQXFCLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQW9CLEVBQUUsRUFBRTtBQUNwRixnQkFBVSxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ2xDLFlBQVEsQ0FBQyxDQUFDLENBQ0gsQ0FBQztBQUNSLFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxJQUNFLFdBQVc7QUFDYixRQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDLENBQUM7QUFDekQsSUFBRSxDQUFDO0FBQ0gsSUFDWSxXQUFXLENBQUMsS0FBb0I7QUFBSSxRQUM1Qyx5REFBeUQ7QUFDN0QsSUFBRSxDQUFDO0FBQ0g7MkNBbENDLFNBQVM7MkVBQ1I7QUFBQztBQUNDLFlBSksscUJBQXFCLHVCQVN6QixRQUFRO0FBQU8sWUFYWCxnQkFBZ0IsdUJBWXBCLFFBQVE7QUFBTTs7Ozs7OztrQ0FBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDIwIFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuaW1wb3J0IHsgRGlyZWN0aXZlLCBPcHRpb25hbCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uIH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IE5nQ29udHJvbFNlcnZpY2UgfSBmcm9tICcuLi9wcm92aWRlcnMvbmctY29udHJvbC5zZXJ2aWNlJztcbmltcG9ydCB7IE5nQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcbmltcG9ydCB7IElmQ29udHJvbFN0YXRlU2VydmljZSwgQ09OVFJPTF9TVEFURSB9IGZyb20gJy4vaWYtY29udHJvbC1zdGF0ZS5zZXJ2aWNlJztcblxuQERpcmVjdGl2ZSgpXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RJZlN0YXRlIHtcbiAgcHJvdGVjdGVkIHN1YnNjcmlwdGlvbnM6IFN1YnNjcmlwdGlvbltdID0gW107XG4gIHByb3RlY3RlZCBkaXNwbGF5ZWRDb250ZW50ID0gZmFsc2U7XG4gIHByb3RlY3RlZCBjb250cm9sOiBOZ0NvbnRyb2w7XG5cbiAgY29uc3RydWN0b3IoXG4gICAgQE9wdGlvbmFsKCkgcHJvdGVjdGVkIGlmQ29udHJvbFN0YXRlU2VydmljZTogSWZDb250cm9sU3RhdGVTZXJ2aWNlLFxuICAgIEBPcHRpb25hbCgpIHByb3RlY3RlZCBuZ0NvbnRyb2xTZXJ2aWNlOiBOZ0NvbnRyb2xTZXJ2aWNlXG4gICkge1xuICAgIGlmIChuZ0NvbnRyb2xTZXJ2aWNlKSB7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaChcbiAgICAgICAgdGhpcy5uZ0NvbnRyb2xTZXJ2aWNlLmNvbnRyb2xDaGFuZ2VzLnN1YnNjcmliZShjb250cm9sID0+IHtcbiAgICAgICAgICB0aGlzLmNvbnRyb2wgPSBjb250cm9sO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBpZiAoaWZDb250cm9sU3RhdGVTZXJ2aWNlKSB7XG4gICAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaChcbiAgICAgICAgdGhpcy5pZkNvbnRyb2xTdGF0ZVNlcnZpY2Uuc3RhdHVzQ2hhbmdlcy5zdWJzY3JpYmUoKHN0YXRlOiBDT05UUk9MX1NUQVRFKSA9PiB7XG4gICAgICAgICAgdGhpcy5oYW5kbGVTdGF0ZShzdGF0ZSk7XG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5mb3JFYWNoKHN1YiA9PiBzdWIudW5zdWJzY3JpYmUoKSk7XG4gIH1cblxuICBwcm90ZWN0ZWQgaGFuZGxlU3RhdGUoc3RhdGU6IENPTlRST0xfU1RBVEUpOiB2b2lkIHtcbiAgICAvKiBvdmVyd3JpdGUgaW4gaW1wbGVtZW50YXRpb24gdG8gaGFuZGxlIHN0YXR1cyBjaGFuZ2UgKi9cbiAgfVxufVxuIl19