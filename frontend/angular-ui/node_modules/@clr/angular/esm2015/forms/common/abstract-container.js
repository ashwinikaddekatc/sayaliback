/**
 * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { ContentChild, Directive, Optional } from '@angular/core';
import { NgControlService } from './providers/ng-control.service';
import { LayoutService } from './providers/layout.service';
import { ClrLabel } from './label';
import { ControlClassService } from './providers/control-class.service';
import { IfControlStateService, CONTROL_STATE } from './if-control-state/if-control-state.service';
import { ClrControlSuccess } from './success';
import { ClrControlError } from './error';
import { ClrControlHelper } from './helper';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './if-control-state/if-control-state.service';
import * as ɵngcc2 from './providers/layout.service';
import * as ɵngcc3 from './providers/control-class.service';
import * as ɵngcc4 from './providers/ng-control.service';
export class ClrAbstractContainer {
    constructor(ifControlStateService, layoutService, controlClassService, ngControlService) {
        this.ifControlStateService = ifControlStateService;
        this.layoutService = layoutService;
        this.controlClassService = controlClassService;
        this.ngControlService = ngControlService;
        this.subscriptions = [];
        this._dynamic = false;
        this.subscriptions.push(this.ifControlStateService.statusChanges.subscribe((state) => {
            this.state = state;
            this.updateHelpers();
        }));
        this.subscriptions.push(this.ngControlService.controlChanges.subscribe(control => {
            this.control = control;
        }));
    }
    /**
     * @NOTE
     * Helper control is a bit different than the others, it must be visible most of the time:
     *   - Helper must NOT be visible when CONTROL_STATE is not NONE and Success or Error components are \
     * defined.
     *
     * For example user implement only Error control then if CONTROL_STATE is VALID then helper
     * control must be visible.
     */
    get showHelper() {
        // without existence of helper component there is no need of additional checks.
        if (!!this.controlHelperComponent === false) {
            return false;
        }
        return (
        /* Helper Component exist and the state of the form is NONE (not touched) */
        (!!this.controlHelperComponent && this.state === CONTROL_STATE.NONE) ||
            /* or there is no success component but the state of the form is VALID - show helper information */
            (!!this.controlSuccessComponent === false && this.state === CONTROL_STATE.VALID) ||
            /* or there is no error component but the state of the form is INVALID - show helper information */
            (!!this.controlErrorComponent === false && this.state === CONTROL_STATE.INVALID));
    }
    get showValid() {
        return this.state === CONTROL_STATE.VALID && !!this.controlSuccessComponent;
    }
    get showInvalid() {
        return this.state === CONTROL_STATE.INVALID && !!this.controlErrorComponent;
    }
    ngAfterContentInit() {
        /**
         * We gonna set the helper control state, after all or most of the components
         * are ready - also this will trigger some initial flows into wrappers and controls,
         * like locating IDs  and setting  attributes.
         */
        this.updateHelpers();
    }
    ngOnDestroy() {
        this.subscriptions.forEach(subscription => subscription.unsubscribe());
    }
    controlClass() {
        /**
         * Decide what subtext to display:
         *   - container is valid but no success component is implemented - use helper class
         *   - container is valid and success component is implemented - use success class
         */
        if (!this.controlSuccessComponent && this.state === CONTROL_STATE.VALID) {
            return this.controlClassService.controlClass(CONTROL_STATE.NONE, this.addGrid());
        }
        /**
         * Pass form control state and return string of classes to be applied to the container.
         */
        return this.controlClassService.controlClass(this.state, this.addGrid());
    }
    addGrid() {
        return this.layoutService && !this.layoutService.isVertical();
    }
    updateHelpers() {
        if (this.ngControlService) {
            this.ngControlService.setHelpers({
                show: this.showInvalid || this.showHelper || this.showValid,
                showInvalid: this.showInvalid,
                showHelper: this.showHelper,
                showValid: this.showValid,
            });
        }
    }
}
ClrAbstractContainer.ɵfac = function ClrAbstractContainer_Factory(t) { return new (t || ClrAbstractContainer)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IfControlStateService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.LayoutService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ControlClassService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.NgControlService)); };
ClrAbstractContainer.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClrAbstractContainer, contentQueries: function ClrAbstractContainer_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrLabel, 1);
        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrControlSuccess, 1);
        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrControlError, 1);
        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrControlHelper, 1);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.label = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.controlSuccessComponent = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.controlErrorComponent = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.controlHelperComponent = _t.first);
    } } });
ClrAbstractContainer.ctorParameters = () => [
    { type: IfControlStateService },
    { type: LayoutService, decorators: [{ type: Optional }] },
    { type: ControlClassService },
    { type: NgControlService }
];
ClrAbstractContainer.propDecorators = {
    label: [{ type: ContentChild, args: [ClrLabel, { static: false },] }],
    controlSuccessComponent: [{ type: ContentChild, args: [ClrControlSuccess,] }],
    controlErrorComponent: [{ type: ContentChild, args: [ClrControlError,] }],
    controlHelperComponent: [{ type: ContentChild, args: [ClrControlHelper,] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClrAbstractContainer, [{
        type: Directive
    }], function () { return [{ type: ɵngcc1.IfControlStateService }, { type: ɵngcc2.LayoutService, decorators: [{
                type: Optional
            }] }, { type: ɵngcc3.ControlClassService }, { type: ɵngcc4.NgControlService }]; }, { label: [{
            type: ContentChild,
            args: [ClrLabel, { static: false }]
        }], controlSuccessComponent: [{
            type: ContentChild,
            args: [ClrControlSuccess]
        }], controlErrorComponent: [{
            type: ContentChild,
            args: [ClrControlError]
        }], controlHelperComponent: [{
            type: ContentChild,
            args: [ClrControlHelper]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtY29udGFpbmVyLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jbHItYW5ndWxhci9zcmMvZm9ybXMvY29tbW9uL2Fic3RyYWN0LWNvbnRhaW5lci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFFSCxPQUFPLEVBQW9CLFlBQVksRUFBRSxTQUFTLEVBQWEsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRy9GLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ2xFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUUzRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ25DLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBRXhFLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxhQUFhLEVBQUUsTUFBTSw2Q0FBNkMsQ0FBQztBQUNuRyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDOUMsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUMxQyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxVQUFVLENBQUM7Ozs7OztBQUc1QyxNQUFNLE9BQWdCLG9CQUFvQjtBQUFHLElBZ0QzQyxZQUNZLHFCQUE0QyxFQUNoQyxhQUE0QixFQUN4QyxtQkFBd0MsRUFDeEMsZ0JBQWtDO0FBQzdDLFFBSlcsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUF1QjtBQUFDLFFBQ2pDLGtCQUFhLEdBQWIsYUFBYSxDQUFlO0FBQUMsUUFDekMsd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtBQUFDLFFBQ3pDLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBa0I7QUFDaEQsUUFwRFksa0JBQWEsR0FBbUIsRUFBRSxDQUFDO0FBQy9DLFFBQUUsYUFBUSxHQUFHLEtBQUssQ0FB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Q0FBQztBQUM3RSxJQUFFLENBQUM7QUFDSCxJQUNFLE9BQU87QUFDVCxRQUFJLE9BQU8sSUFBSSxDQUFDLGFBQWEsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLENBQUM7QUFDbEUsSUFBRSxDQUFDO0FBQ0gsSUFDVSxhQUFhO0FBQ3ZCLFFBQUksSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7QUFDL0IsWUFBTSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDO0FBQ3ZDLGdCQUFRLElBQUksRUFBRSxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFNBQVM7QUFDbkUsZ0JBQVEsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXO0FBQ3JDLGdCQUFRLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTtBQUNuQyxnQkFBUSxTQUFTLEVBQUUsSUFBSSxDQUFDLFNBQVM7QUFDakMsYUFBTyxDQUFDLENBQUM7QUFDVCxTQUFLO0FBQ0wsSUFBRSxDQUFDO0FBQ0g7Z0RBL0dDLFNBQVM7Ozs7Ozs7Ozs7OztXQUNSO0FBQUM7QUFBOEMsWUFOeEMscUJBQXFCO0FBQUksWUFMekIsYUFBYSx1QkE2RGpCLFFBQVE7QUFBTyxZQTFEWCxtQkFBbUI7QUFBSSxZQUp2QixnQkFBZ0I7QUFBRztBQUFHO0FBQzNCLG9CQWNELFlBQVksU0FBQyxRQUFRLEVBQUUsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFO0FBQ3RDLHNDQU9GLFlBQVksU0FBQyxpQkFBaUI7QUFBTyxvQ0FDckMsWUFBWSxTQUFDLGVBQWU7QUFBTyxxQ0FDbkMsWUFBWSxTQUFDLGdCQUFnQjtBQUFNOzs7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtMjAyMSBWTXdhcmUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFRoaXMgc29mdHdhcmUgaXMgcmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UuXG4gKiBUaGUgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBpbiBMSUNFTlNFIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHByb2plY3QuXG4gKi9cblxuaW1wb3J0IHsgQWZ0ZXJDb250ZW50SW5pdCwgQ29udGVudENoaWxkLCBEaXJlY3RpdmUsIE9uRGVzdHJveSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5nQ29udHJvbCB9IGZyb20gJ0Bhbmd1bGFyL2Zvcm1zJztcblxuaW1wb3J0IHsgTmdDb250cm9sU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL25nLWNvbnRyb2wuc2VydmljZSc7XG5pbXBvcnQgeyBMYXlvdXRTZXJ2aWNlIH0gZnJvbSAnLi9wcm92aWRlcnMvbGF5b3V0LnNlcnZpY2UnO1xuaW1wb3J0IHsgRHluYW1pY1dyYXBwZXIgfSBmcm9tICcuLi8uLi91dGlscy9ob3N0LXdyYXBwaW5nL2R5bmFtaWMtd3JhcHBlcic7XG5pbXBvcnQgeyBDbHJMYWJlbCB9IGZyb20gJy4vbGFiZWwnO1xuaW1wb3J0IHsgQ29udHJvbENsYXNzU2VydmljZSB9IGZyb20gJy4vcHJvdmlkZXJzL2NvbnRyb2wtY2xhc3Muc2VydmljZSc7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IElmQ29udHJvbFN0YXRlU2VydmljZSwgQ09OVFJPTF9TVEFURSB9IGZyb20gJy4vaWYtY29udHJvbC1zdGF0ZS9pZi1jb250cm9sLXN0YXRlLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xyQ29udHJvbFN1Y2Nlc3MgfSBmcm9tICcuL3N1Y2Nlc3MnO1xuaW1wb3J0IHsgQ2xyQ29udHJvbEVycm9yIH0gZnJvbSAnLi9lcnJvcic7XG5pbXBvcnQgeyBDbHJDb250cm9sSGVscGVyIH0gZnJvbSAnLi9oZWxwZXInO1xuXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDbHJBYnN0cmFjdENvbnRhaW5lciBpbXBsZW1lbnRzIER5bmFtaWNXcmFwcGVyLCBPbkRlc3Ryb3ksIEFmdGVyQ29udGVudEluaXQge1xuICBwcm90ZWN0ZWQgc3Vic2NyaXB0aW9uczogU3Vic2NyaXB0aW9uW10gPSBbXTtcbiAgX2R5bmFtaWMgPSBmYWxzZTtcbiAgQENvbnRlbnRDaGlsZChDbHJMYWJlbCwgeyBzdGF0aWM6IGZhbHNlIH0pXG4gIGxhYmVsOiBDbHJMYWJlbDtcbiAgY29udHJvbDogTmdDb250cm9sO1xuICBwcml2YXRlIHN0YXRlOiBDT05UUk9MX1NUQVRFO1xuXG4gIC8qKlxuICAgKiBGaW5kIFN1Y2Nlc3MsIEVycm9yIGFuZCBIZWxwZXIgY29udHJvbCBjb21wb25lbnRzLlxuICAgKi9cbiAgQENvbnRlbnRDaGlsZChDbHJDb250cm9sU3VjY2VzcykgY29udHJvbFN1Y2Nlc3NDb21wb25lbnQ6IENsckNvbnRyb2xTdWNjZXNzO1xuICBAQ29udGVudENoaWxkKENsckNvbnRyb2xFcnJvcikgY29udHJvbEVycm9yQ29tcG9uZW50OiBDbHJDb250cm9sRXJyb3I7XG4gIEBDb250ZW50Q2hpbGQoQ2xyQ29udHJvbEhlbHBlcikgY29udHJvbEhlbHBlckNvbXBvbmVudDogQ2xyQ29udHJvbEhlbHBlcjtcblxuICAvKipcbiAgICogQE5PVEVcbiAgICogSGVscGVyIGNvbnRyb2wgaXMgYSBiaXQgZGlmZmVyZW50IHRoYW4gdGhlIG90aGVycywgaXQgbXVzdCBiZSB2aXNpYmxlIG1vc3Qgb2YgdGhlIHRpbWU6XG4gICAqICAgLSBIZWxwZXIgbXVzdCBOT1QgYmUgdmlzaWJsZSB3aGVuIENPTlRST0xfU1RBVEUgaXMgbm90IE5PTkUgYW5kIFN1Y2Nlc3Mgb3IgRXJyb3IgY29tcG9uZW50cyBhcmUgXFxcbiAgICogZGVmaW5lZC5cbiAgICpcbiAgICogRm9yIGV4YW1wbGUgdXNlciBpbXBsZW1lbnQgb25seSBFcnJvciBjb250cm9sIHRoZW4gaWYgQ09OVFJPTF9TVEFURSBpcyBWQUxJRCB0aGVuIGhlbHBlclxuICAgKiBjb250cm9sIG11c3QgYmUgdmlzaWJsZS5cbiAgICovXG4gIGdldCBzaG93SGVscGVyKCk6IGJvb2xlYW4ge1xuICAgIC8vIHdpdGhvdXQgZXhpc3RlbmNlIG9mIGhlbHBlciBjb21wb25lbnQgdGhlcmUgaXMgbm8gbmVlZCBvZiBhZGRpdGlvbmFsIGNoZWNrcy5cbiAgICBpZiAoISF0aGlzLmNvbnRyb2xIZWxwZXJDb21wb25lbnQgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIC8qIEhlbHBlciBDb21wb25lbnQgZXhpc3QgYW5kIHRoZSBzdGF0ZSBvZiB0aGUgZm9ybSBpcyBOT05FIChub3QgdG91Y2hlZCkgKi9cbiAgICAgICghIXRoaXMuY29udHJvbEhlbHBlckNvbXBvbmVudCAmJiB0aGlzLnN0YXRlID09PSBDT05UUk9MX1NUQVRFLk5PTkUpIHx8XG4gICAgICAvKiBvciB0aGVyZSBpcyBubyBzdWNjZXNzIGNvbXBvbmVudCBidXQgdGhlIHN0YXRlIG9mIHRoZSBmb3JtIGlzIFZBTElEIC0gc2hvdyBoZWxwZXIgaW5mb3JtYXRpb24gKi9cbiAgICAgICghIXRoaXMuY29udHJvbFN1Y2Nlc3NDb21wb25lbnQgPT09IGZhbHNlICYmIHRoaXMuc3RhdGUgPT09IENPTlRST0xfU1RBVEUuVkFMSUQpIHx8XG4gICAgICAvKiBvciB0aGVyZSBpcyBubyBlcnJvciBjb21wb25lbnQgYnV0IHRoZSBzdGF0ZSBvZiB0aGUgZm9ybSBpcyBJTlZBTElEIC0gc2hvdyBoZWxwZXIgaW5mb3JtYXRpb24gKi9cbiAgICAgICghIXRoaXMuY29udHJvbEVycm9yQ29tcG9uZW50ID09PSBmYWxzZSAmJiB0aGlzLnN0YXRlID09PSBDT05UUk9MX1NUQVRFLklOVkFMSUQpXG4gICAgKTtcbiAgfVxuXG4gIGdldCBzaG93VmFsaWQoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUgPT09IENPTlRST0xfU1RBVEUuVkFMSUQgJiYgISF0aGlzLmNvbnRyb2xTdWNjZXNzQ29tcG9uZW50O1xuICB9XG5cbiAgZ2V0IHNob3dJbnZhbGlkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLnN0YXRlID09PSBDT05UUk9MX1NUQVRFLklOVkFMSUQgJiYgISF0aGlzLmNvbnRyb2xFcnJvckNvbXBvbmVudDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBpZkNvbnRyb2xTdGF0ZVNlcnZpY2U6IElmQ29udHJvbFN0YXRlU2VydmljZSxcbiAgICBAT3B0aW9uYWwoKSBwcm90ZWN0ZWQgbGF5b3V0U2VydmljZTogTGF5b3V0U2VydmljZSxcbiAgICBwcm90ZWN0ZWQgY29udHJvbENsYXNzU2VydmljZTogQ29udHJvbENsYXNzU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgbmdDb250cm9sU2VydmljZTogTmdDb250cm9sU2VydmljZVxuICApIHtcbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaChcbiAgICAgIHRoaXMuaWZDb250cm9sU3RhdGVTZXJ2aWNlLnN0YXR1c0NoYW5nZXMuc3Vic2NyaWJlKChzdGF0ZTogQ09OVFJPTF9TVEFURSkgPT4ge1xuICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gICAgICAgIHRoaXMudXBkYXRlSGVscGVycygpO1xuICAgICAgfSlcbiAgICApO1xuXG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2goXG4gICAgICB0aGlzLm5nQ29udHJvbFNlcnZpY2UuY29udHJvbENoYW5nZXMuc3Vic2NyaWJlKGNvbnRyb2wgPT4ge1xuICAgICAgICB0aGlzLmNvbnRyb2wgPSBjb250cm9sO1xuICAgICAgfSlcbiAgICApO1xuICB9XG5cbiAgbmdBZnRlckNvbnRlbnRJbml0KCkge1xuICAgIC8qKlxuICAgICAqIFdlIGdvbm5hIHNldCB0aGUgaGVscGVyIGNvbnRyb2wgc3RhdGUsIGFmdGVyIGFsbCBvciBtb3N0IG9mIHRoZSBjb21wb25lbnRzXG4gICAgICogYXJlIHJlYWR5IC0gYWxzbyB0aGlzIHdpbGwgdHJpZ2dlciBzb21lIGluaXRpYWwgZmxvd3MgaW50byB3cmFwcGVycyBhbmQgY29udHJvbHMsXG4gICAgICogbGlrZSBsb2NhdGluZyBJRHMgIGFuZCBzZXR0aW5nICBhdHRyaWJ1dGVzLlxuICAgICAqL1xuICAgIHRoaXMudXBkYXRlSGVscGVycygpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5zdWJzY3JpcHRpb25zLmZvckVhY2goc3Vic2NyaXB0aW9uID0+IHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpKTtcbiAgfVxuXG4gIGNvbnRyb2xDbGFzcygpIHtcbiAgICAvKipcbiAgICAgKiBEZWNpZGUgd2hhdCBzdWJ0ZXh0IHRvIGRpc3BsYXk6XG4gICAgICogICAtIGNvbnRhaW5lciBpcyB2YWxpZCBidXQgbm8gc3VjY2VzcyBjb21wb25lbnQgaXMgaW1wbGVtZW50ZWQgLSB1c2UgaGVscGVyIGNsYXNzXG4gICAgICogICAtIGNvbnRhaW5lciBpcyB2YWxpZCBhbmQgc3VjY2VzcyBjb21wb25lbnQgaXMgaW1wbGVtZW50ZWQgLSB1c2Ugc3VjY2VzcyBjbGFzc1xuICAgICAqL1xuICAgIGlmICghdGhpcy5jb250cm9sU3VjY2Vzc0NvbXBvbmVudCAmJiB0aGlzLnN0YXRlID09PSBDT05UUk9MX1NUQVRFLlZBTElEKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb250cm9sQ2xhc3NTZXJ2aWNlLmNvbnRyb2xDbGFzcyhDT05UUk9MX1NUQVRFLk5PTkUsIHRoaXMuYWRkR3JpZCgpKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUGFzcyBmb3JtIGNvbnRyb2wgc3RhdGUgYW5kIHJldHVybiBzdHJpbmcgb2YgY2xhc3NlcyB0byBiZSBhcHBsaWVkIHRvIHRoZSBjb250YWluZXIuXG4gICAgICovXG4gICAgcmV0dXJuIHRoaXMuY29udHJvbENsYXNzU2VydmljZS5jb250cm9sQ2xhc3ModGhpcy5zdGF0ZSwgdGhpcy5hZGRHcmlkKCkpO1xuICB9XG5cbiAgYWRkR3JpZCgpIHtcbiAgICByZXR1cm4gdGhpcy5sYXlvdXRTZXJ2aWNlICYmICF0aGlzLmxheW91dFNlcnZpY2UuaXNWZXJ0aWNhbCgpO1xuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVIZWxwZXJzKCkge1xuICAgIGlmICh0aGlzLm5nQ29udHJvbFNlcnZpY2UpIHtcbiAgICAgIHRoaXMubmdDb250cm9sU2VydmljZS5zZXRIZWxwZXJzKHtcbiAgICAgICAgc2hvdzogdGhpcy5zaG93SW52YWxpZCB8fCB0aGlzLnNob3dIZWxwZXIgfHwgdGhpcy5zaG93VmFsaWQsXG4gICAgICAgIHNob3dJbnZhbGlkOiB0aGlzLnNob3dJbnZhbGlkLFxuICAgICAgICBzaG93SGVscGVyOiB0aGlzLnNob3dIZWxwZXIsXG4gICAgICAgIHNob3dWYWxpZDogdGhpcy5zaG93VmFsaWQsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==