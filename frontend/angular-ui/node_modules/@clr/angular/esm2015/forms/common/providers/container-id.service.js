import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
let counter = 0;
/**
 * @TODO No idea why I need to use provideIn .. without I'm getting error that
 * ContainerIdService is not defined - But this must be optional service!?
 *
 * There is something wrong - will come back to investigate it when I have more time
 *
 */
export class ContainerIdService {
    constructor() {
        this._id = `clr-form-container-${++counter}`;
        this._idChange = new BehaviorSubject(this._id);
    }
    get id() {
        return this._id;
    }
    set id(value) {
        this._id = value;
        this._idChange.next(value);
    }
    get idChange() {
        return this._idChange.asObservable();
    }
}
ContainerIdService.ɵfac = function ContainerIdService_Factory(t) { return new (t || ContainerIdService)(); };
ContainerIdService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ContainerIdService, factory: ContainerIdService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ContainerIdService, [{
        type: Injectable
    }], function () { return []; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGFpbmVyLWlkLnNlcnZpY2UuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2Nsci1hbmd1bGFyL3NyYy9mb3Jtcy9jb21tb24vcHJvdmlkZXJzL2NvbnRhaW5lci1pZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLGVBQWUsRUFBYyxNQUFNLE1BQU0sQ0FBQzs7QUFFbkQsSUFBSSxPQUFPLEdBQUcsQ0FBQyxDQUFDO0FBRWhCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFFSCxNQUFNLE9BQU8sa0JBQWtCO0FBQy9CLElBRkE7QUFDRSxRQUNRLFFBQUcsR0FBRyxzQkFBc0IsRUFBRSxPQUFPLEVBQUUsQ0FBQztBQUNsRCxRQVNVLGNBQVMsR0FBNEIsSUFBSSxlQUFlLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQzdFLElBR0EsQ0FBQztBQUNELElBZEUsSUFBSSxFQUFFO0FBQUssUUFDVCxPQUFPLElBQUksQ0FBQyxHQUFHLENBQUM7QUFDcEIsSUFBRSxDQUFDO0FBQ0gsSUFDRSxJQUFJLEVBQUUsQ0FBQyxLQUFhO0FBQ3RCLFFBQUksSUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUM7QUFDckIsUUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUMvQixJQUFFLENBQUM7QUFDSCxJQUVFLElBQVcsUUFBUTtBQUFLLFFBQ3RCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUN6QyxJQUFFLENBQUM7QUFDSDs4Q0FoQkMsVUFBVTs7OztnREFDVDtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbmxldCBjb3VudGVyID0gMDtcblxuLyoqXG4gKiBAVE9ETyBObyBpZGVhIHdoeSBJIG5lZWQgdG8gdXNlIHByb3ZpZGVJbiAuLiB3aXRob3V0IEknbSBnZXR0aW5nIGVycm9yIHRoYXRcbiAqIENvbnRhaW5lcklkU2VydmljZSBpcyBub3QgZGVmaW5lZCAtIEJ1dCB0aGlzIG11c3QgYmUgb3B0aW9uYWwgc2VydmljZSE/XG4gKlxuICogVGhlcmUgaXMgc29tZXRoaW5nIHdyb25nIC0gd2lsbCBjb21lIGJhY2sgdG8gaW52ZXN0aWdhdGUgaXQgd2hlbiBJIGhhdmUgbW9yZSB0aW1lXG4gKlxuICovXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ29udGFpbmVySWRTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBfaWQgPSBgY2xyLWZvcm0tY29udGFpbmVyLSR7Kytjb3VudGVyfWA7XG4gIGdldCBpZCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9pZDtcbiAgfVxuXG4gIHNldCBpZCh2YWx1ZTogc3RyaW5nKSB7XG4gICAgdGhpcy5faWQgPSB2YWx1ZTtcbiAgICB0aGlzLl9pZENoYW5nZS5uZXh0KHZhbHVlKTtcbiAgfVxuXG4gIHByaXZhdGUgX2lkQ2hhbmdlOiBCZWhhdmlvclN1YmplY3Q8c3RyaW5nPiA9IG5ldyBCZWhhdmlvclN1YmplY3QodGhpcy5faWQpO1xuICBwdWJsaWMgZ2V0IGlkQ2hhbmdlKCk6IE9ic2VydmFibGU8c3RyaW5nPiB7XG4gICAgcmV0dXJuIHRoaXMuX2lkQ2hhbmdlLmFzT2JzZXJ2YWJsZSgpO1xuICB9XG59XG4iXX0=