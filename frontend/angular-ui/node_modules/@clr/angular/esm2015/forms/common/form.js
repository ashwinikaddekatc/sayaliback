/**
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { ContentChildren, Directive, HostListener, Input } from '@angular/core';
import { LayoutService } from './providers/layout.service';
import { MarkControlService } from './providers/mark-control.service';
import { ClrLabel } from './label';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './providers/layout.service';
import * as ɵngcc2 from './providers/mark-control.service';
export class ClrForm {
    constructor(layoutService, markControlService) {
        this.layoutService = layoutService;
        this.markControlService = markControlService;
    }
    set labelSize(size) {
        const sizeNumber = parseInt(size, 10) || 2;
        this.layoutService.labelSize = sizeNumber;
    }
    // Trying to avoid adding an input and keep this backwards compatible at the same time
    markAsTouched() {
        this.markControlService.markAsTouched();
    }
    onFormSubmit() {
        this.markAsTouched();
    }
}
ClrForm.ɵfac = function ClrForm_Factory(t) { return new (t || ClrForm)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.LayoutService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.MarkControlService)); };
ClrForm.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClrForm, selectors: [["", "clrForm", ""]], contentQueries: function ClrForm_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrLabel, 1);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.labels = _t);
    } }, hostVars: 6, hostBindings: function ClrForm_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("submit", function ClrForm_submit_HostBindingHandler() { return ctx.onFormSubmit(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("clr-form", true)("clr-form-horizontal", ctx.layoutService.isHorizontal())("clr-form-compact", ctx.layoutService.isCompact());
    } }, inputs: { labelSize: ["clrLabelSize", "labelSize"] }, features: [ɵngcc0.ɵɵProvidersFeature([LayoutService, MarkControlService])] });
ClrForm.ctorParameters = () => [
    { type: LayoutService },
    { type: MarkControlService }
];
ClrForm.propDecorators = {
    labelSize: [{ type: Input, args: ['clrLabelSize',] }],
    labels: [{ type: ContentChildren, args: [ClrLabel, { descendants: true },] }],
    onFormSubmit: [{ type: HostListener, args: ['submit',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClrForm, [{
        type: Directive,
        args: [{
                selector: '[clrForm]',
                providers: [LayoutService, MarkControlService],
                host: {
                    '[class.clr-form]': 'true',
                    '[class.clr-form-horizontal]': 'layoutService.isHorizontal()',
                    '[class.clr-form-compact]': 'layoutService.isCompact()'
                }
            }]
    }], function () { return [{ type: ɵngcc1.LayoutService }, { type: ɵngcc2.MarkControlService }]; }, { labelSize: [{
            type: Input,
            args: ['clrLabelSize']
        }], onFormSubmit: [{
            type: HostListener,
            args: ['submit']
        }], labels: [{
            type: ContentChildren,
            args: [ClrLabel, { descendants: true }]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY2xyLWFuZ3VsYXIvc3JjL2Zvcm1zL2NvbW1vbi9mb3JtLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUVILE9BQU8sRUFBRSxlQUFlLEVBQUUsU0FBUyxFQUFFLFlBQVksRUFBYSxLQUFLLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0YsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzNELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxTQUFTLENBQUM7Ozs7QUFXbkMsTUFBTSxPQUFPLE9BQU87QUFDcEIsSUFNRSxZQUFtQixhQUE0QixFQUFVLGtCQUFzQztBQUFJLFFBQWhGLGtCQUFhLEdBQWIsYUFBYSxDQUFlO0FBQUMsUUFBUyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQW9CO0FBQUMsSUFBRSxDQUFDO0FBQ3JHLElBUEUsSUFDSSxTQUFTLENBQUMsSUFBcUI7QUFDckMsUUFBSSxNQUFNLFVBQVUsR0FBRyxRQUFRLENBQUMsSUFBYyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN6RCxRQUFJLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQztBQUM5QyxJQUFFLENBQUM7QUFDSCxJQUdFLHNGQUFzRjtBQUN4RixJQUFFLGFBQWE7QUFDZixRQUFJLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxhQUFhLEVBQUUsQ0FBQztBQUM1QyxJQUFFLENBQUM7QUFDSCxJQUtFLFlBQVk7QUFDZCxRQUFJLElBQUksQ0FBQyxhQUFhLEVBQUUsQ0FBQztBQUN6QixJQUFFLENBQUM7QUFDSDttQ0E5QkMsU0FBUyxTQUFDLGtCQUNULFFBQVEsRUFBRSxXQUFXLGtCQUNyQixTQUFTLEVBQUUsQ0FBQyxhQUFhLEVBQUUsa0JBQWtCLENBQUMsa0JBQzlDO0VBQUksRUFBRSxzQkFDSixrQkFBa0IsRUFBRSxNQUFNLHNCQUMxQiw2QkFBNkIsRUFBRSw4QkFBOEIsc0JBQzdEO1NBQTBCLEVBQUUsMkJBQTJCO0dBQ3hELGVBQ0Y7Ozs7Ozs7NklBQ0k7QUFBQztBQUNVLFlBZFAsYUFBYTtBQUFJLFlBQ2pCLGtCQUFrQjtBQUFHO0FBQUc7QUFBMkIsd0JBYXpELEtBQUssU0FBQyxjQUFjO0FBQ2xCLHFCQVlGLGVBQWUsU0FBQyxRQUFRLEVBQUUsRUFBRSxXQUFXLEVBQUUsSUFBSSxFQUFFO0FBQzdDLDJCQUVGLFlBQVksU0FBQyxRQUFRO0FBQ3BCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7b0JBQUU7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE2LTIwMjAgVk13YXJlLCBJbmMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBUaGlzIHNvZnR3YXJlIGlzIHJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICogVGhlIGZ1bGwgbGljZW5zZSBpbmZvcm1hdGlvbiBjYW4gYmUgZm91bmQgaW4gTElDRU5TRSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBwcm9qZWN0LlxuICovXG5cbmltcG9ydCB7IENvbnRlbnRDaGlsZHJlbiwgRGlyZWN0aXZlLCBIb3N0TGlzdGVuZXIsIFF1ZXJ5TGlzdCwgSW5wdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExheW91dFNlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy9sYXlvdXQuc2VydmljZSc7XG5pbXBvcnQgeyBNYXJrQ29udHJvbFNlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy9tYXJrLWNvbnRyb2wuc2VydmljZSc7XG5pbXBvcnQgeyBDbHJMYWJlbCB9IGZyb20gJy4vbGFiZWwnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbY2xyRm9ybV0nLFxuICBwcm92aWRlcnM6IFtMYXlvdXRTZXJ2aWNlLCBNYXJrQ29udHJvbFNlcnZpY2VdLFxuICBob3N0OiB7XG4gICAgJ1tjbGFzcy5jbHItZm9ybV0nOiAndHJ1ZScsXG4gICAgJ1tjbGFzcy5jbHItZm9ybS1ob3Jpem9udGFsXSc6ICdsYXlvdXRTZXJ2aWNlLmlzSG9yaXpvbnRhbCgpJyxcbiAgICAnW2NsYXNzLmNsci1mb3JtLWNvbXBhY3RdJzogJ2xheW91dFNlcnZpY2UuaXNDb21wYWN0KCknLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBDbHJGb3JtIHtcbiAgQElucHV0KCdjbHJMYWJlbFNpemUnKVxuICBzZXQgbGFiZWxTaXplKHNpemU6IG51bWJlciB8IHN0cmluZykge1xuICAgIGNvbnN0IHNpemVOdW1iZXIgPSBwYXJzZUludChzaXplIGFzIHN0cmluZywgMTApIHx8IDI7XG4gICAgdGhpcy5sYXlvdXRTZXJ2aWNlLmxhYmVsU2l6ZSA9IHNpemVOdW1iZXI7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgbGF5b3V0U2VydmljZTogTGF5b3V0U2VydmljZSwgcHJpdmF0ZSBtYXJrQ29udHJvbFNlcnZpY2U6IE1hcmtDb250cm9sU2VydmljZSkge31cblxuICAvLyBUcnlpbmcgdG8gYXZvaWQgYWRkaW5nIGFuIGlucHV0IGFuZCBrZWVwIHRoaXMgYmFja3dhcmRzIGNvbXBhdGlibGUgYXQgdGhlIHNhbWUgdGltZVxuICBtYXJrQXNUb3VjaGVkKCkge1xuICAgIHRoaXMubWFya0NvbnRyb2xTZXJ2aWNlLm1hcmtBc1RvdWNoZWQoKTtcbiAgfVxuXG4gIEBDb250ZW50Q2hpbGRyZW4oQ2xyTGFiZWwsIHsgZGVzY2VuZGFudHM6IHRydWUgfSlcbiAgbGFiZWxzOiBRdWVyeUxpc3Q8Q2xyTGFiZWw+O1xuXG4gIEBIb3N0TGlzdGVuZXIoJ3N1Ym1pdCcpXG4gIG9uRm9ybVN1Ym1pdCgpIHtcbiAgICB0aGlzLm1hcmtBc1RvdWNoZWQoKTtcbiAgfVxufVxuIl19