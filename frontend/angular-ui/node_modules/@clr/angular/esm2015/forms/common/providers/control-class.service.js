/*
 * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Injectable, Optional } from '@angular/core';
import { LayoutService } from './layout.service';
import { CONTROL_STATE } from '../if-control-state/if-control-state.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './layout.service';
const CLASS_ERROR = 'clr-error';
const CLASS_SUCCESS = 'clr-success';
export class ControlClassService {
    constructor(layoutService) {
        this.layoutService = layoutService;
        this.className = '';
    }
    controlClass(state = CONTROL_STATE.NONE, grid = false, additional = '') {
        const controlClasses = [this.className, additional];
        switch (state) {
            case CONTROL_STATE.VALID:
                controlClasses.push(CLASS_SUCCESS);
                break;
            case CONTROL_STATE.INVALID:
                controlClasses.push(CLASS_ERROR);
                break;
        }
        if (grid && this.layoutService && this.className.indexOf('clr-col') === -1) {
            controlClasses.push(`clr-col-md-${this.layoutService.maxLabelSize - this.layoutService.labelSize} clr-col-12`);
        }
        return controlClasses.join(' ').trim();
    }
    // We want to remove the column classes from the input up to the container
    initControlClass(renderer, element) {
        if (element && element.className) {
            this.className = element.className;
            const klasses = element.className.split(' ');
            klasses.forEach(klass => {
                if (klass.startsWith('clr-col')) {
                    renderer.removeClass(element, klass);
                }
            });
        }
    }
}
ControlClassService.ɵfac = function ControlClassService_Factory(t) { return new (t || ControlClassService)(ɵngcc0.ɵɵinject(ɵngcc1.LayoutService, 8)); };
ControlClassService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: ControlClassService, factory: ControlClassService.ɵfac });
ControlClassService.ctorParameters = () => [
    { type: LayoutService, decorators: [{ type: Optional }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ControlClassService, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.LayoutService, decorators: [{
                type: Optional
            }] }]; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udHJvbC1jbGFzcy5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jbHItYW5ndWxhci9zcmMvZm9ybXMvY29tbW9uL3Byb3ZpZGVycy9jb250cm9sLWNsYXNzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBRUgsT0FBTyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDaEUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSw4Q0FBOEMsQ0FBQzs7O0FBRTdFLE1BQU0sV0FBVyxHQUFHLFdBQVcsQ0FBQztBQUNoQyxNQUFNLGFBQWEsR0FBRyxhQUFhLENBQUM7QUFHcEMsTUFBTSxPQUFPLG1CQUFtQjtBQUNoQyxJQUVFLFlBQWdDLGFBQTRCO0FBQUksUUFBaEMsa0JBQWEsR0FBYixhQUFhLENBQWU7QUFBQyxRQUY3RCxjQUFTLEdBQUcsRUFBRSxDQUFDO0FBQ2pCLElBQ2lFLENBQUM7QUFDbEUsSUFDRSxZQUFZLENBQUMsUUFBdUIsYUFBYSxDQUFDLElBQUksRUFBRSxJQUFJLEdBQUcsS0FBSyxFQUFFLFVBQVUsR0FBRyxFQUFFO0FBQ3ZGLFFBQUksTUFBTSxjQUFjLEdBQUcsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0FBQ3hELFFBQ0ksUUFBUSxLQUFLLEVBQUU7QUFDbkIsWUFBTSxLQUFLLGFBQWEsQ0FBQyxLQUFLO0FBQzlCLGdCQUFRLGNBQWMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7QUFDM0MsZ0JBQVEsTUFBTTtBQUNkLFlBQU0sS0FBSyxhQUFhLENBQUMsT0FBTztBQUNoQyxnQkFBUSxjQUFjLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQ3pDLGdCQUFRLE1BQU07QUFDZCxTQUFLO0FBQ0wsUUFDSSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsYUFBYSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO0FBQ2hGLFlBQU0sY0FBYyxDQUFDLElBQUksQ0FBQyxjQUFjLElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxhQUFhLENBQUMsQ0FBQztBQUNySCxTQUFLO0FBQ0wsUUFBSSxPQUFPLGNBQWMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDM0MsSUFBRSxDQUFDO0FBQ0gsSUFDRSwwRUFBMEU7QUFDNUUsSUFBRSxnQkFBZ0IsQ0FBQyxRQUFtQixFQUFFLE9BQW9CO0FBQzVELFFBQUksSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLFNBQVMsRUFBRTtBQUN0QyxZQUFNLElBQUksQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLFNBQVMsQ0FBQztBQUN6QyxZQUFNLE1BQU0sT0FBTyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0FBQ25ELFlBQU0sT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtBQUM5QixnQkFBUSxJQUFJLEtBQUssQ0FBQyxVQUFVLENBQUMsU0FBUyxDQUFDLEVBQUU7QUFDekMsb0JBQVUsUUFBUSxDQUFDLFdBQVcsQ0FBQyxPQUFPLEVBQUUsS0FBSyxDQUFDLENBQUM7QUFDL0MsaUJBQVM7QUFDVCxZQUFNLENBQUMsQ0FBQyxDQUFDO0FBQ1QsU0FBSztBQUNMLElBQUUsQ0FBQztBQUNIOytDQXBDQyxVQUFVO3lIQUNUO0FBQUM7QUFDVSxZQVJKLGFBQWEsdUJBVVAsUUFBUTtBQUFNOzs7OztrQ0FBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLypcbiAqIENvcHlyaWdodCAoYykgMjAxNi0yMDIxIFZNd2FyZSwgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogVGhpcyBzb2Z0d2FyZSBpcyByZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZS5cbiAqIFRoZSBmdWxsIGxpY2Vuc2UgaW5mb3JtYXRpb24gY2FuIGJlIGZvdW5kIGluIExJQ0VOU0UgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgcHJvamVjdC5cbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlLCBPcHRpb25hbCwgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBMYXlvdXRTZXJ2aWNlIH0gZnJvbSAnLi9sYXlvdXQuc2VydmljZSc7XG5pbXBvcnQgeyBDT05UUk9MX1NUQVRFIH0gZnJvbSAnLi4vaWYtY29udHJvbC1zdGF0ZS9pZi1jb250cm9sLXN0YXRlLnNlcnZpY2UnO1xuXG5jb25zdCBDTEFTU19FUlJPUiA9ICdjbHItZXJyb3InO1xuY29uc3QgQ0xBU1NfU1VDQ0VTUyA9ICdjbHItc3VjY2Vzcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDb250cm9sQ2xhc3NTZXJ2aWNlIHtcbiAgY2xhc3NOYW1lID0gJyc7XG5cbiAgY29uc3RydWN0b3IoQE9wdGlvbmFsKCkgcHJpdmF0ZSBsYXlvdXRTZXJ2aWNlOiBMYXlvdXRTZXJ2aWNlKSB7fVxuXG4gIGNvbnRyb2xDbGFzcyhzdGF0ZTogQ09OVFJPTF9TVEFURSA9IENPTlRST0xfU1RBVEUuTk9ORSwgZ3JpZCA9IGZhbHNlLCBhZGRpdGlvbmFsID0gJycpIHtcbiAgICBjb25zdCBjb250cm9sQ2xhc3NlcyA9IFt0aGlzLmNsYXNzTmFtZSwgYWRkaXRpb25hbF07XG5cbiAgICBzd2l0Y2ggKHN0YXRlKSB7XG4gICAgICBjYXNlIENPTlRST0xfU1RBVEUuVkFMSUQ6XG4gICAgICAgIGNvbnRyb2xDbGFzc2VzLnB1c2goQ0xBU1NfU1VDQ0VTUyk7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBDT05UUk9MX1NUQVRFLklOVkFMSUQ6XG4gICAgICAgIGNvbnRyb2xDbGFzc2VzLnB1c2goQ0xBU1NfRVJST1IpO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICBpZiAoZ3JpZCAmJiB0aGlzLmxheW91dFNlcnZpY2UgJiYgdGhpcy5jbGFzc05hbWUuaW5kZXhPZignY2xyLWNvbCcpID09PSAtMSkge1xuICAgICAgY29udHJvbENsYXNzZXMucHVzaChgY2xyLWNvbC1tZC0ke3RoaXMubGF5b3V0U2VydmljZS5tYXhMYWJlbFNpemUgLSB0aGlzLmxheW91dFNlcnZpY2UubGFiZWxTaXplfSBjbHItY29sLTEyYCk7XG4gICAgfVxuICAgIHJldHVybiBjb250cm9sQ2xhc3Nlcy5qb2luKCcgJykudHJpbSgpO1xuICB9XG5cbiAgLy8gV2Ugd2FudCB0byByZW1vdmUgdGhlIGNvbHVtbiBjbGFzc2VzIGZyb20gdGhlIGlucHV0IHVwIHRvIHRoZSBjb250YWluZXJcbiAgaW5pdENvbnRyb2xDbGFzcyhyZW5kZXJlcjogUmVuZGVyZXIyLCBlbGVtZW50OiBIVE1MRWxlbWVudCkge1xuICAgIGlmIChlbGVtZW50ICYmIGVsZW1lbnQuY2xhc3NOYW1lKSB7XG4gICAgICB0aGlzLmNsYXNzTmFtZSA9IGVsZW1lbnQuY2xhc3NOYW1lO1xuICAgICAgY29uc3Qga2xhc3NlcyA9IGVsZW1lbnQuY2xhc3NOYW1lLnNwbGl0KCcgJyk7XG4gICAgICBrbGFzc2VzLmZvckVhY2goa2xhc3MgPT4ge1xuICAgICAgICBpZiAoa2xhc3Muc3RhcnRzV2l0aCgnY2xyLWNvbCcpKSB7XG4gICAgICAgICAgcmVuZGVyZXIucmVtb3ZlQ2xhc3MoZWxlbWVudCwga2xhc3MpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==