/*
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject, ReplaySubject } from 'rxjs';
import { MultiSelectComboboxModel } from '../model/multi-select-combobox.model';
import * as ɵngcc0 from '@angular/core';
export class OptionSelectionService {
    constructor() {
        this.loading = false;
        this._currentInput = '';
        this._inputChanged = new BehaviorSubject('');
        this.inputChanged = this._inputChanged.asObservable();
        this._selectionChanged = new ReplaySubject(1);
    }
    get currentInput() {
        return this._currentInput;
    }
    set currentInput(input) {
        // clear value in single selection model when input is empty
        if (!input && !this.multiselectable) {
            this.setSelectionValue(null);
        }
        this._currentInput = input;
        this._inputChanged.next(input);
    }
    // This observable is for notifying the ClrOption to update its
    // selection by comparing the value
    get selectionChanged() {
        return this._selectionChanged.asObservable();
    }
    select(item) {
        if (!item || this.selectionModel.containsItem(item)) {
            return;
        }
        this.selectionModel.select(item);
        this._selectionChanged.next(this.selectionModel);
    }
    toggle(item) {
        if (!item) {
            return;
        }
        if (this.selectionModel.containsItem(item)) {
            this.selectionModel.unselect(item);
        }
        else {
            this.selectionModel.select(item);
        }
        this._selectionChanged.next(this.selectionModel);
    }
    unselect(item) {
        if (!item || !this.selectionModel.containsItem(item)) {
            return;
        }
        this.selectionModel.unselect(item);
        this._selectionChanged.next(this.selectionModel);
    }
    get multiselectable() {
        return this.selectionModel instanceof MultiSelectComboboxModel;
    }
    // TODO: Add support for trackBy and compareFn
    setSelectionValue(value) {
        // NOTE: Currently we assume that no 2 options will have the same value
        // but Eudes and I discussed that this is a possibility but we will handle
        // this later
        // if selection is undefined, or its value hasn't changed, or changing from null <-> undefined, that's not really changing so we return
        if (!this.selectionModel || this.selectionModel.model === value || (!this.selectionModel.model && !value)) {
            return;
        }
        this.selectionModel.model = value;
        this._selectionChanged.next(this.selectionModel);
    }
}
OptionSelectionService.ɵfac = function OptionSelectionService_Factory(t) { return new (t || OptionSelectionService)(); };
OptionSelectionService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: OptionSelectionService, factory: OptionSelectionService.ɵfac });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(OptionSelectionService, [{
        type: Injectable
    }], function () { return []; }, null); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9uLXNlbGVjdGlvbi5zZXJ2aWNlLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jbHItYW5ndWxhci9zcmMvZm9ybXMvY29tYm9ib3gvcHJvdmlkZXJzL29wdGlvbi1zZWxlY3Rpb24uc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFFSCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBYyxlQUFlLEVBQUUsYUFBYSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBRWxFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRSxNQUFNLHNDQUFzQyxDQUFDOztBQUloRixNQUFNLE9BQU8sc0JBQXNCO0FBQUcsSUFEdEM7QUFDRSxRQUVPLFlBQU8sR0FBRyxLQUFLLENBQUM7QUFDekIsUUFDVSxrQkFBYSxHQUFHLEVBQUUsQ0FBQztBQUM3QixRQVdVLGtCQUFhLEdBQTRCLElBQUksZUFBZSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzNFLFFBQUUsaUJBQVksR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksRUFBRSxDQUFDO0FBQ25ELFFBQ1Usc0JBQWlCLEdBQW9DLElBQUksYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3BGLElBcURBLENBQUM7QUFDRCxJQXJFRSxJQUFJLFlBQVk7QUFBSyxRQUNuQixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUM7QUFDOUIsSUFBRSxDQUFDO0FBQ0gsSUFBRSxJQUFJLFlBQVksQ0FBQyxLQUFLO0FBQ3hCLFFBQUksNERBQTREO0FBQ2hFLFFBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUU7QUFDekMsWUFBTSxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDbkMsU0FBSztBQUNMLFFBQUksSUFBSSxDQUFDLGFBQWEsR0FBRyxLQUFLLENBQUM7QUFDL0IsUUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUNuQyxJQUFFLENBQUM7QUFDSCxJQUtFLCtEQUErRDtBQUNqRSxJQUFFLG1DQUFtQztBQUNyQyxJQUFFLElBQUksZ0JBQWdCO0FBQUssUUFDdkIsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsWUFBWSxFQUFFLENBQUM7QUFDakQsSUFBRSxDQUFDO0FBQ0gsSUFDRSxNQUFNLENBQUMsSUFBTztBQUNoQixRQUFJLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDekQsWUFBTSxPQUFPO0FBQ2IsU0FBSztBQUNMLFFBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDckMsUUFBSSxJQUFJLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUNyRCxJQUFFLENBQUM7QUFDSCxJQUNFLE1BQU0sQ0FBQyxJQUFPO0FBQ2hCLFFBQUksSUFBSSxDQUFDLElBQUksRUFBRTtBQUNmLFlBQU0sT0FBTztBQUNiLFNBQUs7QUFDTCxRQUFJLElBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEVBQUU7QUFDaEQsWUFBTSxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN6QyxTQUFLO0FBQUMsYUFBSztBQUNYLFlBQU0sSUFBSSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDdkMsU0FBSztBQUNMLFFBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDckQsSUFBRSxDQUFDO0FBQ0gsSUFDRSxRQUFRLENBQUMsSUFBTztBQUNsQixRQUFJLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsRUFBRTtBQUMxRCxZQUFNLE9BQU87QUFDYixTQUFLO0FBQ0wsUUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN2QyxRQUFJLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO0FBQ3JELElBQUUsQ0FBQztBQUNILElBQ0UsSUFBSSxlQUFlO0FBQUssUUFDdEIsT0FBTyxJQUFJLENBQUMsY0FBYyxZQUFZLHdCQUF3QixDQUFDO0FBQ25FLElBQUUsQ0FBQztBQUNILElBQ0UsOENBQThDO0FBQ2hELElBQUUsaUJBQWlCLENBQUMsS0FBYztBQUFJLFFBQ2xDLHVFQUF1RTtBQUMzRSxRQUFJLDBFQUEwRTtBQUM5RSxRQUFJLGFBQWE7QUFDakIsUUFDSSx1SUFBdUk7QUFDM0ksUUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsSUFBSSxJQUFJLENBQUMsY0FBYyxDQUFDLEtBQUssS0FBSyxLQUFLLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDL0csWUFBTSxPQUFPO0FBQ2IsU0FBSztBQUNMLFFBQ0ksSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0FBQ3RDLFFBQUksSUFBSSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDckQsSUFBRSxDQUFDO0FBQ0g7a0RBMUVDLFVBQVU7Ozs7Z0RBQ1Q7QUFBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtMjAyMCBWTXdhcmUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFRoaXMgc29mdHdhcmUgaXMgcmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UuXG4gKiBUaGUgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBpbiBMSUNFTlNFIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHByb2plY3QuXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgQmVoYXZpb3JTdWJqZWN0LCBSZXBsYXlTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7IE11bHRpU2VsZWN0Q29tYm9ib3hNb2RlbCB9IGZyb20gJy4uL21vZGVsL211bHRpLXNlbGVjdC1jb21ib2JveC5tb2RlbCc7XG5pbXBvcnQgeyBDb21ib2JveE1vZGVsIH0gZnJvbSAnLi4vbW9kZWwvY29tYm9ib3gubW9kZWwnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgT3B0aW9uU2VsZWN0aW9uU2VydmljZTxUPiB7XG4gIHB1YmxpYyBzZWxlY3Rpb25Nb2RlbDogQ29tYm9ib3hNb2RlbDxUPjtcbiAgcHVibGljIGxvYWRpbmcgPSBmYWxzZTtcbiAgcHVibGljIGRpc3BsYXlGaWVsZDogc3RyaW5nO1xuICBwcml2YXRlIF9jdXJyZW50SW5wdXQgPSAnJztcbiAgZ2V0IGN1cnJlbnRJbnB1dCgpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9jdXJyZW50SW5wdXQ7XG4gIH1cbiAgc2V0IGN1cnJlbnRJbnB1dChpbnB1dCkge1xuICAgIC8vIGNsZWFyIHZhbHVlIGluIHNpbmdsZSBzZWxlY3Rpb24gbW9kZWwgd2hlbiBpbnB1dCBpcyBlbXB0eVxuICAgIGlmICghaW5wdXQgJiYgIXRoaXMubXVsdGlzZWxlY3RhYmxlKSB7XG4gICAgICB0aGlzLnNldFNlbGVjdGlvblZhbHVlKG51bGwpO1xuICAgIH1cbiAgICB0aGlzLl9jdXJyZW50SW5wdXQgPSBpbnB1dDtcbiAgICB0aGlzLl9pbnB1dENoYW5nZWQubmV4dChpbnB1dCk7XG4gIH1cbiAgcHJpdmF0ZSBfaW5wdXRDaGFuZ2VkOiBCZWhhdmlvclN1YmplY3Q8c3RyaW5nPiA9IG5ldyBCZWhhdmlvclN1YmplY3QoJycpO1xuICBpbnB1dENoYW5nZWQgPSB0aGlzLl9pbnB1dENoYW5nZWQuYXNPYnNlcnZhYmxlKCk7XG5cbiAgcHJpdmF0ZSBfc2VsZWN0aW9uQ2hhbmdlZDogUmVwbGF5U3ViamVjdDxDb21ib2JveE1vZGVsPFQ+PiA9IG5ldyBSZXBsYXlTdWJqZWN0KDEpO1xuXG4gIC8vIFRoaXMgb2JzZXJ2YWJsZSBpcyBmb3Igbm90aWZ5aW5nIHRoZSBDbHJPcHRpb24gdG8gdXBkYXRlIGl0c1xuICAvLyBzZWxlY3Rpb24gYnkgY29tcGFyaW5nIHRoZSB2YWx1ZVxuICBnZXQgc2VsZWN0aW9uQ2hhbmdlZCgpOiBPYnNlcnZhYmxlPENvbWJvYm94TW9kZWw8VD4+IHtcbiAgICByZXR1cm4gdGhpcy5fc2VsZWN0aW9uQ2hhbmdlZC5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIHNlbGVjdChpdGVtOiBUKSB7XG4gICAgaWYgKCFpdGVtIHx8IHRoaXMuc2VsZWN0aW9uTW9kZWwuY29udGFpbnNJdGVtKGl0ZW0pKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc2VsZWN0aW9uTW9kZWwuc2VsZWN0KGl0ZW0pO1xuICAgIHRoaXMuX3NlbGVjdGlvbkNoYW5nZWQubmV4dCh0aGlzLnNlbGVjdGlvbk1vZGVsKTtcbiAgfVxuXG4gIHRvZ2dsZShpdGVtOiBUKSB7XG4gICAgaWYgKCFpdGVtKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0aGlzLnNlbGVjdGlvbk1vZGVsLmNvbnRhaW5zSXRlbShpdGVtKSkge1xuICAgICAgdGhpcy5zZWxlY3Rpb25Nb2RlbC51bnNlbGVjdChpdGVtKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZWxlY3Rpb25Nb2RlbC5zZWxlY3QoaXRlbSk7XG4gICAgfVxuICAgIHRoaXMuX3NlbGVjdGlvbkNoYW5nZWQubmV4dCh0aGlzLnNlbGVjdGlvbk1vZGVsKTtcbiAgfVxuXG4gIHVuc2VsZWN0KGl0ZW06IFQpIHtcbiAgICBpZiAoIWl0ZW0gfHwgIXRoaXMuc2VsZWN0aW9uTW9kZWwuY29udGFpbnNJdGVtKGl0ZW0pKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuc2VsZWN0aW9uTW9kZWwudW5zZWxlY3QoaXRlbSk7XG4gICAgdGhpcy5fc2VsZWN0aW9uQ2hhbmdlZC5uZXh0KHRoaXMuc2VsZWN0aW9uTW9kZWwpO1xuICB9XG5cbiAgZ2V0IG11bHRpc2VsZWN0YWJsZSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5zZWxlY3Rpb25Nb2RlbCBpbnN0YW5jZW9mIE11bHRpU2VsZWN0Q29tYm9ib3hNb2RlbDtcbiAgfVxuXG4gIC8vIFRPRE86IEFkZCBzdXBwb3J0IGZvciB0cmFja0J5IGFuZCBjb21wYXJlRm5cbiAgc2V0U2VsZWN0aW9uVmFsdWUodmFsdWU6IFQgfCBUW10pOiB2b2lkIHtcbiAgICAvLyBOT1RFOiBDdXJyZW50bHkgd2UgYXNzdW1lIHRoYXQgbm8gMiBvcHRpb25zIHdpbGwgaGF2ZSB0aGUgc2FtZSB2YWx1ZVxuICAgIC8vIGJ1dCBFdWRlcyBhbmQgSSBkaXNjdXNzZWQgdGhhdCB0aGlzIGlzIGEgcG9zc2liaWxpdHkgYnV0IHdlIHdpbGwgaGFuZGxlXG4gICAgLy8gdGhpcyBsYXRlclxuXG4gICAgLy8gaWYgc2VsZWN0aW9uIGlzIHVuZGVmaW5lZCwgb3IgaXRzIHZhbHVlIGhhc24ndCBjaGFuZ2VkLCBvciBjaGFuZ2luZyBmcm9tIG51bGwgPC0+IHVuZGVmaW5lZCwgdGhhdCdzIG5vdCByZWFsbHkgY2hhbmdpbmcgc28gd2UgcmV0dXJuXG4gICAgaWYgKCF0aGlzLnNlbGVjdGlvbk1vZGVsIHx8IHRoaXMuc2VsZWN0aW9uTW9kZWwubW9kZWwgPT09IHZhbHVlIHx8ICghdGhpcy5zZWxlY3Rpb25Nb2RlbC5tb2RlbCAmJiAhdmFsdWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdGhpcy5zZWxlY3Rpb25Nb2RlbC5tb2RlbCA9IHZhbHVlO1xuICAgIHRoaXMuX3NlbGVjdGlvbkNoYW5nZWQubmV4dCh0aGlzLnNlbGVjdGlvbk1vZGVsKTtcbiAgfVxufVxuIl19