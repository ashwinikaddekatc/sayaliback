/**
 * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { isPlatformBrowser } from '@angular/common';
import { Component, ContentChild, ElementRef, HostListener, PLATFORM_ID, Renderer2, ViewChild, ViewContainerRef, Injector, Self, Optional, Input, Output, EventEmitter, Inject, ChangeDetectorRef, } from '@angular/core';
import { POPOVER_HOST_ANCHOR } from '../../popover/common/popover-host-anchor.token';
import { OptionSelectionService } from './providers/option-selection.service';
import { WrappedFormControl } from '../common/wrapped-control';
import { ClrComboboxContainer } from './combobox-container';
import { NgControl } from '@angular/forms';
import { ClrOptionSelected } from './option-selected.directive';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { AriaService } from '../../utils/aria/aria.service';
import { IF_ACTIVE_ID_PROVIDER } from '../../utils/conditional/if-active.service';
import { MultiSelectComboboxModel } from './model/multi-select-combobox.model';
import { SingleSelectComboboxModel } from './model/single-select-combobox.model';
import { COMBOBOX_FOCUS_HANDLER_PROVIDER, ComboboxFocusHandler } from './providers/combobox-focus-handler.service';
import { FOCUS_SERVICE_PROVIDER } from '../../utils/focus/focus.service';
import { BACKSPACE } from '../../utils/key-codes/key-codes';
import { ClrAxis } from '../../utils/popover/enums/axis.enum';
import { ClrAlignment } from '../../utils/popover/enums/alignment.enum';
import { ClrSide } from '../../utils/popover/enums/side.enum';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import { ClrPopoverEventsService } from '../../utils/popover/providers/popover-events.service';
import { ClrPopoverPositionService } from '../../utils/popover/providers/popover-position.service';
import { ComboboxContainerService } from './providers/combobox-container.service';
import { LoadingListener } from '../../utils/loading/loading-listener';
import { ClrLoadingState } from '../../utils/loading/loading';
import { IfControlStateService, CONTROL_STATE } from '../common/if-control-state/if-control-state.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/forms';
import * as ɵngcc2 from './providers/option-selection.service';
import * as ɵngcc3 from '../../utils/i18n/common-strings.service';
import * as ɵngcc4 from '../../utils/popover/providers/popover-toggle.service';
import * as ɵngcc5 from '../../utils/popover/providers/popover-position.service';
import * as ɵngcc6 from '../common/if-control-state/if-control-state.service';
import * as ɵngcc7 from './providers/combobox-container.service';
import * as ɵngcc8 from '../../utils/aria/aria.service';
import * as ɵngcc9 from './providers/combobox-focus-handler.service';
import * as ɵngcc10 from '../../utils/popover/popover-anchor';
import * as ɵngcc11 from '@angular/common';
import * as ɵngcc12 from '../../utils/popover/popover-open-close-button';
import * as ɵngcc13 from '../../icon/icon';
import * as ɵngcc14 from '../../utils/popover/popover-content';
import * as ɵngcc15 from '../../utils/focus/key-focus/roving-tabindex';
import * as ɵngcc16 from '../../utils/focus/key-focus/key-focus-item';

const _c0 = ["textboxInput"];
const _c1 = ["trigger"];
const _c2 = function (a0) { return { $implicit: a0 }; };
function ClrCombobox_span_1_span_1_ng_container_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementContainer(0, 18);
} if (rf & 2) {
    const i_r6 = ɵngcc0.ɵɵnextContext().index;
    const ctx_r7 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵproperty("ngTemplateOutlet", ctx_r7.optionSelected.template)("ngTemplateOutletContext", ɵngcc0.ɵɵpureFunction1(2, _c2, ctx_r7.optionSelectionService.selectionModel.model[i_r6]));
} }
function ClrCombobox_span_1_span_1_Template(rf, ctx) { if (rf & 1) {
    const _r10 = ɵngcc0.ɵɵgetCurrentView();
    ɵngcc0.ɵɵelementStart(0, "span", 12);
    ɵngcc0.ɵɵelementStart(1, "span", 13);
    ɵngcc0.ɵɵelementStart(2, "span", 14);
    ɵngcc0.ɵɵtemplate(3, ClrCombobox_span_1_span_1_ng_container_3_Template, 1, 4, "ng-container", 15);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(4, "span", 13);
    ɵngcc0.ɵɵelementStart(5, "button", 16);
    ɵngcc0.ɵɵlistener("click", function ClrCombobox_span_1_span_1_Template_button_click_5_listener() { ɵngcc0.ɵɵrestoreView(_r10); const item_r5 = ctx.$implicit; const ctx_r9 = ɵngcc0.ɵɵnextContext(2); return ctx_r9.unselect(item_r5); });
    ɵngcc0.ɵɵelement(6, "cds-icon", 17);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const i_r6 = ctx.index;
    const ctx_r4 = ɵngcc0.ɵɵnextContext(2);
    ɵngcc0.ɵɵadvance(3);
    ɵngcc0.ɵɵproperty("ngIf", ctx_r4.optionSelected);
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵproperty("disabled", (ctx_r4.control == null ? null : ctx_r4.control.disabled) ? true : null);
    ɵngcc0.ɵɵattribute("aria-label", ctx_r4.commonStrings.keys.comboboxDelete + " " + ctx_r4.optionSelectionService.selectionModel.toString(ctx_r4.displayField, i_r6));
} }
function ClrCombobox_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 10);
    ɵngcc0.ɵɵtemplate(1, ClrCombobox_span_1_span_1_Template, 7, 3, "span", 11);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("clrRovingTabindexDisabled", ctx_r0.control == null ? null : ctx_r0.control.disabled);
    ɵngcc0.ɵɵattribute("aria-label", ctx_r0.getSelectionAriaLabel())("aria-disabled", (ctx_r0.control == null ? null : ctx_r0.control.disabled) ? true : null);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngForOf", ctx_r0.multiSelectModel);
} }
function ClrCombobox_div_9_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 19);
    ɵngcc0.ɵɵprojection(1);
    ɵngcc0.ɵɵelementEnd();
} }
const _c3 = ["*"];
export class ClrCombobox extends WrappedFormControl {
    constructor(vcr, injector, control, renderer, el, optionSelectionService, commonStrings, toggleService, positionService, controlStateService, containerService, platformId, ariaService, focusHandler, cdr) {
        super(vcr, ClrComboboxContainer, injector, control, renderer, el);
        this.control = control;
        this.renderer = renderer;
        this.el = el;
        this.optionSelectionService = optionSelectionService;
        this.commonStrings = commonStrings;
        this.toggleService = toggleService;
        this.positionService = positionService;
        this.controlStateService = controlStateService;
        this.containerService = containerService;
        this.platformId = platformId;
        this.ariaService = ariaService;
        this.focusHandler = focusHandler;
        this.cdr = cdr;
        this.index = 1;
        this.invalid = false;
        this.focused = false;
        this._searchText = '';
        this.smartPosition = {
            axis: ClrAxis.VERTICAL,
            side: ClrSide.AFTER,
            anchor: ClrAlignment.START,
            content: ClrAlignment.START,
        };
        this.placeholder = '';
        this.clrInputChange = new EventEmitter(false);
        this.clrOpenChange = this.toggleService.openChange;
        // This output should be used to set up a live region using aria-live and populate it with updates that reflect each combobox change
        this.clrSelectionChange = this.optionSelectionService
            .selectionChanged;
        if (control) {
            control.valueAccessor = this;
        }
        // default to SingleSelectComboboxModel, in case the optional input [ClrMulti] isn't used
        this.optionSelectionService.selectionModel = new SingleSelectComboboxModel();
        this.updateControlValue();
    }
    // Override the id of WrappedFormControl, as we want to move it to the embedded input.
    // Otherwise the label/component connection does not work and screen readers do not read the label.
    get id() {
        return this.controlIdService.id + '-combobox';
    }
    set id(id) {
        super.id = id;
    }
    inputId() {
        return this.controlIdService.id;
    }
    get openState() {
        return this.toggleService.open;
    }
    set searchText(text) {
        // if input text has changed since last time, fire a change event so application can react to it
        if (text !== this._searchText) {
            this._searchText = text;
            this.clrInputChange.emit(this.searchText);
            this.optionSelectionService.currentInput = this.searchText;
        }
    }
    get searchText() {
        return this._searchText;
    }
    get multiSelectModel() {
        if (!this.multiSelect) {
            throw Error('multiSelectModel is not available in single selection context');
        }
        return this.optionSelectionService.selectionModel.model;
    }
    loadingStateChange(state) {
        this.optionSelectionService.loading = state === ClrLoadingState.LOADING;
        this.positionService.realign();
        if (state !== ClrLoadingState.LOADING && isPlatformBrowser(this.platformId)) {
            setTimeout(() => {
                this.focusFirstActive();
            });
        }
    }
    get disabled() {
        return this.control && this.control.disabled;
    }
    unselect(item) {
        if (!this.disabled) {
            this.optionSelectionService.unselect(item);
        }
    }
    set multiSelect(value) {
        if (value) {
            this.optionSelectionService.selectionModel = new MultiSelectComboboxModel();
        }
        else {
            // in theory, setting this again should not cause errors even though we already set it in constructor,
            // since the initial call to writeValue (caused by [ngModel] input) should happen after this
            this.optionSelectionService.selectionModel = new SingleSelectComboboxModel();
        }
        this.updateControlValue();
    }
    get multiSelect() {
        return this.optionSelectionService.multiselectable;
    }
    get ariaControls() {
        return this.ariaService.ariaControls;
    }
    get ariaOwns() {
        return this.ariaService.ariaOwns;
    }
    get ariaDescribedBySelection() {
        return 'selection-' + this.id;
    }
    get displayField() {
        return this.optionSelectionService.displayField;
    }
    onBlur() {
        this.onTouchedCallback();
        if (this.control.control.updateOn === 'blur') {
            this.control.control.updateValueAndValidity();
        }
        this.focused = false;
    }
    onFocus() {
        this.focused = true;
    }
    getSelectionAriaLabel() {
        if (this.containerService && this.containerService.labelText) {
            return `${this.containerService.labelText} ${this.commonStrings.keys.comboboxSelection}`;
        }
        return this.commonStrings.keys.comboboxSelection;
    }
    onKeyUp(event) {
        // if BACKSPACE in multiselect mode, delete the last pill if text is empty
        if (event.keyCode === BACKSPACE && this.multiSelect && this._searchText.length === 0) {
            const multiModel = this.optionSelectionService.selectionModel.model;
            if (multiModel && multiModel.length > 0) {
                const lastItem = multiModel[multiModel.length - 1];
                this.control.control.markAsTouched();
                this.optionSelectionService.unselect(lastItem);
            }
        }
    }
    initializeSubscriptions() {
        this.subscriptions.push(this.optionSelectionService.selectionChanged.subscribe((newSelection) => {
            this.updateInputValue(newSelection);
            if (this.multiSelect) {
                this.positionService.realign();
            }
            if (!this.multiSelect && newSelection && !newSelection.isEmpty()) {
                this.toggleService.open = false;
            }
            this.updateControlValue();
        }));
        this.subscriptions.push(this.toggleService.openChange.subscribe(open => {
            if (open) {
                this.focusFirstActive();
            }
            if (this.multiSelect) {
                this.searchText = '';
            }
            else {
                this.searchText = this.getDisplayNames(this.optionSelectionService.selectionModel.model)[0] || '';
            }
        }));
        this.subscriptions.push(this.toggleService.popoverAligned.subscribe(popoverNode => {
            // When used outside a combobox container
            if (!this.containerService) {
                return;
            }
            const popover = popoverNode;
            // Update position if popover hides the label
            if (popover.getBoundingClientRect().top < this.el.nativeElement.getBoundingClientRect().top) {
                this.renderer.setStyle(popoverNode, 'top', `${popover.offsetTop + this.containerService.labelOffset}px`);
            }
        }));
        if (this.controlStateService) {
            this.subscriptions.push(this.controlStateService.statusChanges.subscribe(invalid => {
                this.invalid = invalid === CONTROL_STATE.INVALID;
            }));
        }
    }
    focusFirstActive() {
        this.focusHandler.focusFirstActive();
    }
    updateInputValue(model) {
        if (!this.multiSelect) {
            this.searchText = model.model ? this.getDisplayNames(model.model)[0] : '';
            if (this.searchText) {
                this.optionSelectionService.currentInput = this.searchText;
            }
        }
    }
    updateControlValue() {
        if (this.onChangeCallback) {
            this.onChangeCallback(this.optionSelectionService.selectionModel.model);
        }
    }
    // ControlValueAccessor implementation methods
    writeValue(value) {
        this.optionSelectionService.selectionModel.model = value;
        this.updateInputValue(this.optionSelectionService.selectionModel);
    }
    registerOnChange(onChange) {
        this.onChangeCallback = onChange;
    }
    getActiveDescendant() {
        const model = this.focusHandler.pseudoFocus.model;
        return model ? model.id : null;
    }
    registerOnTouched(onTouched) {
        this.onTouchedCallback = onTouched;
    }
    setDisabledState() {
        // do nothing
    }
    focusInput() {
        this.focusHandler.focusInput();
    }
    getDisplayNames(model) {
        if (this.displayField) {
            if (!Array.isArray(model)) {
                model = [model];
            }
            return model.map(item => (item ? item[this.displayField] : null));
        }
        return [this.optionSelectionService.selectionModel.model];
    }
    // Lifecycle methods
    ngAfterContentInit() {
        this.initializeSubscriptions();
        // Initialize with preselected value
        if (!this.optionSelectionService.selectionModel.isEmpty()) {
            this.updateInputValue(this.optionSelectionService.selectionModel);
        }
    }
    ngAfterViewInit() {
        this.focusHandler.componentCdRef = this.cdr;
        this.focusHandler.textInput = this.textbox.nativeElement;
        this.focusHandler.trigger = this.trigger.nativeElement;
        // The text input is the actual element we are wrapping
        // This assignment is needed by the wrapper, so it can set
        // the aria properties on the input element, not on the component.
        this.el = this.textbox;
    }
    ngOnDestroy() {
        this.subscriptions.forEach((sub) => sub.unsubscribe());
    }
}
ClrCombobox.ɵfac = function ClrCombobox_Factory(t) { return new (t || ClrCombobox)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NgControl, 10), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.OptionSelectionService), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ClrPopoverToggleService), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ClrPopoverPositionService), ɵngcc0.ɵɵdirectiveInject(ɵngcc6.IfControlStateService, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc7.ComboboxContainerService, 8), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID), ɵngcc0.ɵɵdirectiveInject(ɵngcc8.AriaService), ɵngcc0.ɵɵdirectiveInject(ɵngcc9.ComboboxFocusHandler), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
ClrCombobox.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrCombobox, selectors: [["clr-combobox"]], contentQueries: function ClrCombobox_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrOptionSelected, 1);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.optionSelected = _t.first);
    } }, viewQuery: function ClrCombobox_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵviewQuery(_c0, 1);
        ɵngcc0.ɵɵviewQuery(_c1, 1);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.textbox = _t.first);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.trigger = _t.first);
    } }, hostVars: 6, hostBindings: function ClrCombobox_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("keydown", function ClrCombobox_keydown_HostBindingHandler($event) { return ctx.onKeyUp($event); });
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("aria-required", true)("clr-combobox", true)("clr-combobox-disabled", ctx.control == null ? null : ctx.control.disabled);
    } }, inputs: { placeholder: "placeholder", multiSelect: ["clrMulti", "multiSelect"] }, outputs: { clrInputChange: "clrInputChange", clrOpenChange: "clrOpenChange", clrSelectionChange: "clrSelectionChange" }, features: [ɵngcc0.ɵɵProvidersFeature([
            ClrPopoverToggleService,
            { provide: POPOVER_HOST_ANCHOR, useExisting: ElementRef },
            OptionSelectionService,
            { provide: LoadingListener, useExisting: ClrCombobox },
            IF_ACTIVE_ID_PROVIDER,
            AriaService,
            FOCUS_SERVICE_PROVIDER,
            COMBOBOX_FOCUS_HANDLER_PROVIDER,
            ClrPopoverToggleService,
            ClrPopoverEventsService,
            ClrPopoverPositionService,
        ]), ɵngcc0.ɵɵInheritDefinitionFeature], ngContentSelectors: _c3, decls: 10, vars: 21, consts: [["clrPopoverAnchor", "", 1, "clr-combobox-wrapper", 3, "click"], ["role", "grid", "clrRovingTabindex", "", "clrDirection", "both", 3, "clrRovingTabindexDisabled", 4, "ngIf"], [1, "clr-combobox-input-wrapper"], ["type", "text", "role", "combobox", "aria-haspopup", "listbox", "aria-autocomplete", "list", "autocomplete", "off", "aria-multiline", "false", 1, "clr-input", "clr-combobox-input", 3, "id", "ngModel", "disabled", "ngModelChange", "blur", "focus"], ["textboxInput", ""], ["clrPopoverOpenCloseButton", "", "type", "button", "tabindex", "-1", 1, "clr-combobox-trigger", 3, "disabled"], ["trigger", ""], ["shape", "angle", "direction", "down", "size", "12"], [1, "clr-focus-indicator"], ["role", "dialog", 4, "clrPopoverContent", "clrPopoverContentAt", "clrPopoverContentOutsideClickToClose", "clrPopoverContentScrollToClose"], ["role", "grid", "clrRovingTabindex", "", "clrDirection", "both", 3, "clrRovingTabindexDisabled"], ["class", "label label-combobox-pill", "role", "row", 4, "ngFor", "ngForOf"], ["role", "row", 1, "label", "label-combobox-pill"], ["role", "gridcell"], ["clrKeyFocusItem", "", 1, "clr-combobox-pill-content"], [3, "ngTemplateOutlet", "ngTemplateOutletContext", 4, "ngIf"], ["clrKeyFocusItem", "", "type", "button", 1, "clr-combobox-remove-btn", 3, "disabled", "click"], ["shape", "window-close", "size", "12"], [3, "ngTemplateOutlet", "ngTemplateOutletContext"], ["role", "dialog"]], template: function ClrCombobox_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵlistener("click", function ClrCombobox_Template_div_click_0_listener() { return ctx.focusInput(); });
        ɵngcc0.ɵɵtemplate(1, ClrCombobox_span_1_Template, 2, 4, "span", 1);
        ɵngcc0.ɵɵelementStart(2, "span", 2);
        ɵngcc0.ɵɵelementStart(3, "input", 3, 4);
        ɵngcc0.ɵɵlistener("ngModelChange", function ClrCombobox_Template_input_ngModelChange_3_listener($event) { return ctx.searchText = $event; })("blur", function ClrCombobox_Template_input_blur_3_listener() { return ctx.onBlur(); })("focus", function ClrCombobox_Template_input_focus_3_listener() { return ctx.onFocus(); });
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementStart(5, "button", 5, 6);
        ɵngcc0.ɵɵelement(7, "cds-icon", 7);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelement(8, "div", 8);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(9, ClrCombobox_div_9_Template, 2, 0, "div", 9);
    } if (rf & 2) {
        ɵngcc0.ɵɵclassProp("multi", ctx.multiSelect)("invalid", ctx.invalid);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.multiSelect && ctx.optionSelectionService.selectionModel.model);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("id", ctx.inputId())("ngModel", ctx.searchText)("disabled", (ctx.control == null ? null : ctx.control.disabled) ? true : null);
        ɵngcc0.ɵɵattribute("aria-expanded", ctx.openState)("aria-owns", ctx.ariaOwns)("aria-invalid", (ctx.control == null ? null : ctx.control.invalid) ? true : null)("aria-activedescendant", ctx.getActiveDescendant())("placeholder", ctx.placeholder);
        ɵngcc0.ɵɵadvance(2);
        ɵngcc0.ɵɵproperty("disabled", (ctx.control == null ? null : ctx.control.disabled) || null);
        ɵngcc0.ɵɵattribute("aria-label", ctx.commonStrings.keys.comboboxOpen);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵclassProp("clr-focus", ctx.focused);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("clrPopoverContent", ctx.openState)("clrPopoverContentAt", ctx.smartPosition)("clrPopoverContentOutsideClickToClose", false)("clrPopoverContentScrollToClose", false);
    } }, directives: [ɵngcc10.ClrPopoverAnchor, ɵngcc11.NgIf, ɵngcc1.DefaultValueAccessor, ɵngcc1.NgControlStatus, ɵngcc1.NgModel, ɵngcc12.ClrPopoverOpenCloseButton, ɵngcc13.CdsIconCustomTag, ɵngcc14.ClrPopoverContent, ɵngcc15.ClrRovingTabindex, ɵngcc11.NgForOf, ɵngcc16.ClrKeyFocusItem, ɵngcc11.NgTemplateOutlet], encapsulation: 2 });
ClrCombobox.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: Injector },
    { type: NgControl, decorators: [{ type: Self }, { type: Optional }] },
    { type: Renderer2 },
    { type: ElementRef },
    { type: OptionSelectionService },
    { type: ClrCommonStringsService },
    { type: ClrPopoverToggleService },
    { type: ClrPopoverPositionService },
    { type: IfControlStateService, decorators: [{ type: Optional }] },
    { type: ComboboxContainerService, decorators: [{ type: Optional }] },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: AriaService },
    { type: ComboboxFocusHandler },
    { type: ChangeDetectorRef }
];
ClrCombobox.propDecorators = {
    textbox: [{ type: ViewChild, args: ['textboxInput',] }],
    trigger: [{ type: ViewChild, args: ['trigger',] }],
    optionSelected: [{ type: ContentChild, args: [ClrOptionSelected,] }],
    placeholder: [{ type: Input, args: ['placeholder',] }],
    multiSelect: [{ type: Input, args: ['clrMulti',] }],
    onKeyUp: [{ type: HostListener, args: ['keydown', ['$event'],] }],
    clrInputChange: [{ type: Output, args: ['clrInputChange',] }],
    clrOpenChange: [{ type: Output, args: ['clrOpenChange',] }],
    clrSelectionChange: [{ type: Output, args: ['clrSelectionChange',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClrCombobox, [{
        type: Component,
        args: [{
                selector: 'clr-combobox',
                template: "<!--\n* Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\n* This software is released under MIT license.\n* The full license information can be found in LICENSE in the root directory of this project.\n-->\n\n<!-- The (click) handler is needed to auto-focus on input field which can not currently occupy the whole\n     width of the component, after being wrapped to a new line -->\n<div\n  class=\"clr-combobox-wrapper\"\n  clrPopoverAnchor\n  (click)=\"focusInput()\"\n  [class.multi]=\"multiSelect\"\n  [class.invalid]=\"invalid\"\n>\n  <span\n    *ngIf=\"multiSelect && optionSelectionService.selectionModel.model\"\n    role=\"grid\"\n    clrRovingTabindex\n    [clrRovingTabindexDisabled]=\"control?.disabled\"\n    clrDirection=\"both\"\n    [attr.aria-label]=\"getSelectionAriaLabel()\"\n    [attr.aria-disabled]=\"control?.disabled? true: null\"\n  >\n    <span *ngFor=\"let item of multiSelectModel; let i = index\" class=\"label label-combobox-pill\" role=\"row\">\n      <span role=\"gridcell\">\n        <span class=\"clr-combobox-pill-content\" clrKeyFocusItem>\n          <ng-container\n            *ngIf=\"optionSelected\"\n            [ngTemplateOutlet]=\"optionSelected.template\"\n            [ngTemplateOutletContext]=\"{$implicit: optionSelectionService.selectionModel.model[i]}\"\n          >\n          </ng-container>\n        </span>\n      </span>\n      <span role=\"gridcell\">\n        <button\n          clrKeyFocusItem\n          type=\"button\"\n          class=\"clr-combobox-remove-btn\"\n          [disabled]=\"control?.disabled? true: null\"\n          [attr.aria-label]=\"commonStrings.keys.comboboxDelete + ' ' + optionSelectionService.selectionModel.toString(displayField, i)\"\n          (click)=\"unselect(item)\"\n        >\n          <cds-icon shape=\"window-close\" size=\"12\"></cds-icon>\n        </button>\n      </span>\n    </span>\n  </span>\n\n  <span class=\"clr-combobox-input-wrapper\">\n    <input\n      #textboxInput\n      type=\"text\"\n      [id]=\"inputId()\"\n      role=\"combobox\"\n      class=\"clr-input clr-combobox-input\"\n      [(ngModel)]=\"searchText\"\n      (blur)=\"onBlur()\"\n      (focus)=\"onFocus()\"\n      [attr.aria-expanded]=\"openState\"\n      [attr.aria-owns]=\"ariaOwns\"\n      aria-haspopup=\"listbox\"\n      aria-autocomplete=\"list\"\n      autocomplete=\"off\"\n      [attr.aria-invalid]=\"control?.invalid? true: null\"\n      [disabled]=\"control?.disabled? true: null\"\n      [attr.aria-activedescendant]=\"getActiveDescendant()\"\n      [attr.placeholder]=\"placeholder\"\n      aria-multiline=\"false\"\n    />\n  </span>\n\n  <!-- No click handler, as it uses the handler on the .clr-combobox-wrapper -->\n  <button\n    clrPopoverOpenCloseButton\n    #trigger\n    type=\"button\"\n    class=\"clr-combobox-trigger\"\n    tabindex=\"-1\"\n    [disabled]=\"control?.disabled || null\"\n    [attr.aria-label]=\"commonStrings.keys.comboboxOpen\"\n  >\n    <cds-icon shape=\"angle\" direction=\"down\" size=\"12\"></cds-icon>\n  </button>\n\n  <div class=\"clr-focus-indicator\" [class.clr-focus]=\"focused\"></div>\n</div>\n\n<!-- Both close handlers are handled manually due to issues in Edge browser.\n     Additionally 'outsideClickToClose' has complex handling that's necessary\n     to be manual due to the component architecture -->\n<div role=\"dialog\" *clrPopoverContent=\"openState at smartPosition; outsideClickToClose: false; scrollToClose: false\">\n  <ng-content></ng-content>\n</div>\n",
                providers: [
                    ClrPopoverToggleService,
                    { provide: POPOVER_HOST_ANCHOR, useExisting: ElementRef },
                    OptionSelectionService,
                    { provide: LoadingListener, useExisting: ClrCombobox },
                    IF_ACTIVE_ID_PROVIDER,
                    AriaService,
                    FOCUS_SERVICE_PROVIDER,
                    COMBOBOX_FOCUS_HANDLER_PROVIDER,
                    ClrPopoverToggleService,
                    ClrPopoverEventsService,
                    ClrPopoverPositionService,
                ],
                host: {
                    '[class.aria-required]': 'true',
                    '[class.clr-combobox]': 'true',
                    '[class.clr-combobox-disabled]': 'control?.disabled'
                }
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.Injector }, { type: ɵngcc1.NgControl, decorators: [{
                type: Self
            }, {
                type: Optional
            }] }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }, { type: ɵngcc2.OptionSelectionService }, { type: ɵngcc3.ClrCommonStringsService }, { type: ɵngcc4.ClrPopoverToggleService }, { type: ɵngcc5.ClrPopoverPositionService }, { type: ɵngcc6.IfControlStateService, decorators: [{
                type: Optional
            }] }, { type: ɵngcc7.ComboboxContainerService, decorators: [{
                type: Optional
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }, { type: ɵngcc8.AriaService }, { type: ɵngcc9.ComboboxFocusHandler }, { type: ɵngcc0.ChangeDetectorRef }]; }, { placeholder: [{
            type: Input,
            args: ['placeholder']
        }], clrInputChange: [{
            type: Output,
            args: ['clrInputChange']
        }], clrOpenChange: [{
            type: Output,
            args: ['clrOpenChange']
        }], clrSelectionChange: [{
            type: Output,
            args: ['clrSelectionChange']
        }], multiSelect: [{
            type: Input,
            args: ['clrMulti']
        }], onKeyUp: [{
            type: HostListener,
            args: ['keydown', ['$event']]
        }], textbox: [{
            type: ViewChild,
            args: ['textboxInput']
        }], trigger: [{
            type: ViewChild,
            args: ['trigger']
        }], optionSelected: [{
            type: ContentChild,
            args: [ClrOptionSelected]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,