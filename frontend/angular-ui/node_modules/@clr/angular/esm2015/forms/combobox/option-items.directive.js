/*
 * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { NgForOf } from '@angular/common';
import { Directive, Input, IterableDiffers, TemplateRef, ViewContainerRef, } from '@angular/core';
import { OptionSelectionService } from './providers/option-selection.service';
import { ClrPopoverPositionService } from '../../utils/popover/providers/popover-position.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './providers/option-selection.service';
import * as ɵngcc2 from '../../utils/popover/providers/popover-position.service';
export class ClrOptionItems {
    constructor(template, differs, optionService, positionService, vcr) {
        this.template = template;
        this.differs = differs;
        this.optionService = optionService;
        this.positionService = positionService;
        this.vcr = vcr;
        this.subscriptions = [];
        this.filter = '';
        this.differ = null;
        this.iterableProxy = new NgForOf(this.vcr, this.template, this.differs);
        this.subscriptions.push(optionService.inputChanged.subscribe(filter => {
            this.filter = filter;
            this.updateItems();
        }));
    }
    set rawItems(items) {
        this._rawItems = items ? items : [];
        this.updateItems();
    }
    set trackBy(value) {
        this.iterableProxy.ngForTrackBy = value;
    }
    set field(field) {
        this._filterField = field;
        this.optionService.displayField = field;
    }
    updateItems() {
        if (!this._rawItems || this.filter === undefined || this.filter === null) {
            return;
        }
        if (this._filterField) {
            this.filteredItems = this._rawItems.filter(item => {
                const objValue = item[this._filterField];
                return objValue ? objValue.toString().toLowerCase().indexOf(this.filter.toLowerCase().toString()) > -1 : false;
            });
        }
        else {
            // Filter by all item object values
            this.filteredItems = this._rawItems.filter(item => {
                if (typeof item !== 'object') {
                    return item.toString().toLowerCase().indexOf(this.filter.toString().toLowerCase()) > -1;
                }
                const objValues = Object.values(item).filter(value => {
                    return value ? value.toString().toLowerCase().indexOf(this.filter.toString().toLowerCase()) > -1 : false;
                });
                return objValues.length > 0;
            });
        }
        this.iterableProxy.ngForOf = this.filteredItems;
    }
    ngDoCheck() {
        if (!this.differ) {
            this.differ = this.differs.find(this.filteredItems).create(this.iterableProxy.ngForTrackBy);
        }
        if (this.differ) {
            const changes = this.differ.diff(this.filteredItems);
            if (changes) {
                this.iterableProxy.ngDoCheck();
                this.positionService.realign();
            }
        }
    }
    ngOnDestroy() {
        this.subscriptions.forEach(sub => sub.unsubscribe());
    }
}
ClrOptionItems.ɵfac = function ClrOptionItems_Factory(t) { return new (t || ClrOptionItems)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.IterableDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.OptionSelectionService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ClrPopoverPositionService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };
ClrOptionItems.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ClrOptionItems, selectors: [["", "clrOptionItems", "", "clrOptionItemsOf", ""]], inputs: { rawItems: ["clrOptionItemsOf", "rawItems"], trackBy: ["clrOptionItemsTrackBy", "trackBy"], field: ["clrOptionItemsField", "field"] } });
ClrOptionItems.ctorParameters = () => [
    { type: TemplateRef },
    { type: IterableDiffers },
    { type: OptionSelectionService },
    { type: ClrPopoverPositionService },
    { type: ViewContainerRef }
];
ClrOptionItems.propDecorators = {
    rawItems: [{ type: Input, args: ['clrOptionItemsOf',] }],
    trackBy: [{ type: Input, args: ['clrOptionItemsTrackBy',] }],
    field: [{ type: Input, args: ['clrOptionItemsField',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClrOptionItems, [{
        type: Directive,
        args: [{
                selector: '[clrOptionItems][clrOptionItemsOf]'
            }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.IterableDiffers }, { type: ɵngcc1.OptionSelectionService }, { type: ɵngcc2.ClrPopoverPositionService }, { type: ɵngcc0.ViewContainerRef }]; }, { rawItems: [{
            type: Input,
            args: ['clrOptionItemsOf']
        }], trackBy: [{
            type: Input,
            args: ['clrOptionItemsTrackBy']
        }], field: [{
            type: Input,
            args: ['clrOptionItemsField']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,