/**
 * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, ElementRef, HostBinding, HostListener, Inject, Input } from '@angular/core';
import { OptionSelectionService } from './providers/option-selection.service';
import { ComboboxFocusHandler, OptionData as OptionProxy } from './providers/combobox-focus-handler.service';
import { UNIQUE_ID, UNIQUE_ID_PROVIDER } from '../../utils/id-generator/id-generator.service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../utils/i18n/common-strings.service';
import * as ɵngcc2 from './providers/combobox-focus-handler.service';
import * as ɵngcc3 from './providers/option-selection.service';
import * as ɵngcc4 from '@angular/common';

function ClrOption_span_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "span", 1);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.commonStrings.keys.comboboxSelected, " ");
} }
const _c0 = ["*"];
export class ClrOption {
    constructor(elRef, commonStrings, focusHandler, optionSelectionService, autoId) {
        this.elRef = elRef;
        this.commonStrings = commonStrings;
        this.focusHandler = focusHandler;
        this.optionSelectionService = optionSelectionService;
        this.autoId = autoId;
        // A proxy with only the necessary data to be used for a11y and the focus handler service.
        this.optionProxy = new OptionProxy(null, null);
        this.optionProxy.el = this.elRef.nativeElement;
    }
    set optionId(id) {
        this._id = id;
        this.optionProxy.id = this._id;
    }
    get optionId() {
        return this._id;
    }
    set value(value) {
        this._value = value;
        this.optionProxy.value = value;
    }
    get value() {
        return this._value;
    }
    get selected() {
        return (this.optionSelectionService.selectionModel && this.optionSelectionService.selectionModel.containsItem(this.value));
    }
    ngOnInit() {
        if (!this._id) {
            this._id = 'clr-option-' + this.autoId;
            this.optionProxy.id = this._id;
        }
    }
    onClick() {
        if (this.optionSelectionService.multiselectable) {
            this.optionSelectionService.toggle(this.value);
        }
        else {
            this.optionSelectionService.select(this.value);
        }
        // As the popover stays open in multi-select mode now, we have to take focus back to the input
        // This way we achieve two things:
        // - do not lose focus
        // - we're still able to use onBlur for "outside-click" handling
        this.focusHandler.focusInput();
    }
    get focusClass() {
        return this.focusHandler.pseudoFocus.containsItem(this.optionProxy);
    }
}
ClrOption.ɵfac = function ClrOption_Factory(t) { return new (t || ClrOption)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.ComboboxFocusHandler), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.OptionSelectionService), ɵngcc0.ɵɵdirectiveInject(UNIQUE_ID)); };
ClrOption.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrOption, selectors: [["clr-option"]], hostVars: 9, hostBindings: function ClrOption_HostBindings(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵlistener("click", function ClrOption_click_HostBindingHandler() { return ctx.onClick(); });
    } if (rf & 2) {
        ɵngcc0.ɵɵattribute("role", "option")("tabindex", -1)("id", ctx.optionId);
        ɵngcc0.ɵɵclassProp("clr-combobox-option", true)("active", ctx.selected)("clr-focus", ctx.focusClass);
    } }, inputs: { optionId: ["id", "optionId"], value: ["clrValue", "value"] }, features: [ɵngcc0.ɵɵProvidersFeature([UNIQUE_ID_PROVIDER])], ngContentSelectors: _c0, decls: 2, vars: 1, consts: [["class", "clr-sr-only", 4, "ngIf"], [1, "clr-sr-only"]], template: function ClrOption_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
        ɵngcc0.ɵɵtemplate(1, ClrOption_span_1_Template, 2, 1, "span", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.selected);
    } }, directives: [ɵngcc4.NgIf], encapsulation: 2 });
ClrOption.ctorParameters = () => [
    { type: ElementRef },
    { type: ClrCommonStringsService },
    { type: ComboboxFocusHandler },
    { type: OptionSelectionService },
    { type: String, decorators: [{ type: Inject, args: [UNIQUE_ID,] }] }
];
ClrOption.propDecorators = {
    optionId: [{ type: Input, args: ['id',] }],
    value: [{ type: Input, args: ['clrValue',] }],
    selected: [{ type: HostBinding, args: ['class.active',] }],
    onClick: [{ type: HostListener, args: ['click',] }],
    focusClass: [{ type: HostBinding, args: ['class.clr-focus',] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClrOption, [{
        type: Component,
        args: [{
                selector: 'clr-option',
                template: `<ng-content></ng-content>
    <span *ngIf="selected" class="clr-sr-only"> {{ commonStrings.keys.comboboxSelected }} </span> `,
                providers: [UNIQUE_ID_PROVIDER],
                host: {
                    '[class.clr-combobox-option]': 'true',
                    '[attr.role]': '"option"',
                    // Do not remove. Or click-selection will not work.
                    '[attr.tabindex]': '-1',
                    '[attr.id]': 'optionId'
                }
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.ClrCommonStringsService }, { type: ɵngcc2.ComboboxFocusHandler }, { type: ɵngcc3.OptionSelectionService }, { type: String, decorators: [{
                type: Inject,
                args: [UNIQUE_ID]
            }] }]; }, { optionId: [{
            type: Input,
            args: ['id']
        }], value: [{
            type: Input,
            args: ['clrValue']
        }], selected: [{
            type: HostBinding,
            args: ['class.active']
        }], onClick: [{
            type: HostListener,
            args: ['click']
        }], focusClass: [{
            type: HostBinding,
            args: ['class.clr-focus']
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9uLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jbHItYW5ndWxhci9zcmMvZm9ybXMvY29tYm9ib3gvb3B0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUV4RyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUM5RSxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsVUFBVSxJQUFJLFdBQVcsRUFBRSxNQUFNLDRDQUE0QyxDQUFDO0FBQzdHLE9BQU8sRUFBRSxTQUFTLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSwrQ0FBK0MsQ0FBQztBQUM5RixPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFjbEYsTUFBTSxPQUFPLFNBQVM7QUFBRyxJQStCdkIsWUFDUyxLQUFpQixFQUNqQixhQUFzQyxFQUNyQyxZQUFxQyxFQUNyQyxzQkFBaUQsRUFDOUIsTUFBYztBQUMxQyxRQUxRLFVBQUssR0FBTCxLQUFLLENBQVk7QUFBQyxRQUNsQixrQkFBYSxHQUFiLGFBQWEsQ0FBeUI7QUFBQyxRQUN0QyxpQkFBWSxHQUFaLFlBQVksQ0FBeUI7QUFBQyxRQUN0QywyQkFBc0IsR0FBdEIsc0JBQXNCLENBQTJCO0FBQUMsUUFDL0IsV0FBTSxHQUFOLE1BQU0sQ0FBUTtBQUM3QyxRQXBDRSwwRkFBMEY7QUFDNUYsUUFBUyxnQkFBVyxHQUFtQixJQUFJLFdBQVcsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDbkUsUUFtQ0ksSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUM7QUFDbkQsSUFB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Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtMjAyMSBWTXdhcmUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFRoaXMgc29mdHdhcmUgaXMgcmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UuXG4gKiBUaGUgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBpbiBMSUNFTlNFIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHByb2plY3QuXG4gKi9cbmltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgSG9zdEJpbmRpbmcsIEhvc3RMaXN0ZW5lciwgSW5qZWN0LCBJbnB1dCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IE9wdGlvblNlbGVjdGlvblNlcnZpY2UgfSBmcm9tICcuL3Byb3ZpZGVycy9vcHRpb24tc2VsZWN0aW9uLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ29tYm9ib3hGb2N1c0hhbmRsZXIsIE9wdGlvbkRhdGEgYXMgT3B0aW9uUHJveHkgfSBmcm9tICcuL3Byb3ZpZGVycy9jb21ib2JveC1mb2N1cy1oYW5kbGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgVU5JUVVFX0lELCBVTklRVUVfSURfUFJPVklERVIgfSBmcm9tICcuLi8uLi91dGlscy9pZC1nZW5lcmF0b3IvaWQtZ2VuZXJhdG9yLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2UgfSBmcm9tICcuLi8uLi91dGlscy9pMThuL2NvbW1vbi1zdHJpbmdzLnNlcnZpY2UnO1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnY2xyLW9wdGlvbicsXG4gIHRlbXBsYXRlOiBgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICAgIDxzcGFuICpuZ0lmPVwic2VsZWN0ZWRcIiBjbGFzcz1cImNsci1zci1vbmx5XCI+IHt7IGNvbW1vblN0cmluZ3Mua2V5cy5jb21ib2JveFNlbGVjdGVkIH19IDwvc3Bhbj4gYCxcbiAgcHJvdmlkZXJzOiBbVU5JUVVFX0lEX1BST1ZJREVSXSxcbiAgaG9zdDoge1xuICAgICdbY2xhc3MuY2xyLWNvbWJvYm94LW9wdGlvbl0nOiAndHJ1ZScsXG4gICAgJ1thdHRyLnJvbGVdJzogJ1wib3B0aW9uXCInLFxuICAgIC8vIERvIG5vdCByZW1vdmUuIE9yIGNsaWNrLXNlbGVjdGlvbiB3aWxsIG5vdCB3b3JrLlxuICAgICdbYXR0ci50YWJpbmRleF0nOiAnLTEnLFxuICAgICdbYXR0ci5pZF0nOiAnb3B0aW9uSWQnLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBDbHJPcHRpb248VD4gaW1wbGVtZW50cyBPbkluaXQge1xuICAvLyBBIHByb3h5IHdpdGggb25seSB0aGUgbmVjZXNzYXJ5IGRhdGEgdG8gYmUgdXNlZCBmb3IgYTExeSBhbmQgdGhlIGZvY3VzIGhhbmRsZXIgc2VydmljZS5cbiAgcHVibGljIG9wdGlvblByb3h5OiBPcHRpb25Qcm94eTxUPiA9IG5ldyBPcHRpb25Qcm94eShudWxsLCBudWxsKTtcblxuICBwcml2YXRlIF9pZDogc3RyaW5nO1xuICBASW5wdXQoJ2lkJylcbiAgc2V0IG9wdGlvbklkKGlkOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9pZCA9IGlkO1xuICAgIHRoaXMub3B0aW9uUHJveHkuaWQgPSB0aGlzLl9pZDtcbiAgfVxuICBnZXQgb3B0aW9uSWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2lkO1xuICB9XG5cbiAgcHJpdmF0ZSBfdmFsdWU6IFQ7XG4gIEBJbnB1dCgnY2xyVmFsdWUnKVxuICBzZXQgdmFsdWUodmFsdWU6IFQpIHtcbiAgICB0aGlzLl92YWx1ZSA9IHZhbHVlO1xuICAgIHRoaXMub3B0aW9uUHJveHkudmFsdWUgPSB2YWx1ZTtcbiAgfVxuICBnZXQgdmFsdWUoKTogVCB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbHVlO1xuICB9XG5cbiAgQEhvc3RCaW5kaW5nKCdjbGFzcy5hY3RpdmUnKVxuICBnZXQgc2VsZWN0ZWQoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMub3B0aW9uU2VsZWN0aW9uU2VydmljZS5zZWxlY3Rpb25Nb2RlbCAmJiB0aGlzLm9wdGlvblNlbGVjdGlvblNlcnZpY2Uuc2VsZWN0aW9uTW9kZWwuY29udGFpbnNJdGVtKHRoaXMudmFsdWUpXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHB1YmxpYyBlbFJlZjogRWxlbWVudFJlZixcbiAgICBwdWJsaWMgY29tbW9uU3RyaW5nczogQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2UsXG4gICAgcHJpdmF0ZSBmb2N1c0hhbmRsZXI6IENvbWJvYm94Rm9jdXNIYW5kbGVyPFQ+LFxuICAgIHByaXZhdGUgb3B0aW9uU2VsZWN0aW9uU2VydmljZTogT3B0aW9uU2VsZWN0aW9uU2VydmljZTxUPixcbiAgICBASW5qZWN0KFVOSVFVRV9JRCkgcHJpdmF0ZSBhdXRvSWQ6IHN0cmluZ1xuICApIHtcbiAgICB0aGlzLm9wdGlvblByb3h5LmVsID0gdGhpcy5lbFJlZi5uYXRpdmVFbGVtZW50O1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgaWYgKCF0aGlzLl9pZCkge1xuICAgICAgdGhpcy5faWQgPSAnY2xyLW9wdGlvbi0nICsgdGhpcy5hdXRvSWQ7XG4gICAgICB0aGlzLm9wdGlvblByb3h5LmlkID0gdGhpcy5faWQ7XG4gICAgfVxuICB9XG5cbiAgQEhvc3RMaXN0ZW5lcignY2xpY2snKVxuICBvbkNsaWNrKCkge1xuICAgIGlmICh0aGlzLm9wdGlvblNlbGVjdGlvblNlcnZpY2UubXVsdGlzZWxlY3RhYmxlKSB7XG4gICAgICB0aGlzLm9wdGlvblNlbGVjdGlvblNlcnZpY2UudG9nZ2xlKHRoaXMudmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9wdGlvblNlbGVjdGlvblNlcnZpY2Uuc2VsZWN0KHRoaXMudmFsdWUpO1xuICAgIH1cbiAgICAvLyBBcyB0aGUgcG9wb3ZlciBzdGF5cyBvcGVuIGluIG11bHRpLXNlbGVjdCBtb2RlIG5vdywgd2UgaGF2ZSB0byB0YWtlIGZvY3VzIGJhY2sgdG8gdGhlIGlucHV0XG4gICAgLy8gVGhpcyB3YXkgd2UgYWNoaWV2ZSB0d28gdGhpbmdzOlxuICAgIC8vIC0gZG8gbm90IGxvc2UgZm9jdXNcbiAgICAvLyAtIHdlJ3JlIHN0aWxsIGFibGUgdG8gdXNlIG9uQmx1ciBmb3IgXCJvdXRzaWRlLWNsaWNrXCIgaGFuZGxpbmdcbiAgICB0aGlzLmZvY3VzSGFuZGxlci5mb2N1c0lucHV0KCk7XG4gIH1cblxuICBASG9zdEJpbmRpbmcoJ2NsYXNzLmNsci1mb2N1cycpXG4gIGdldCBmb2N1c0NsYXNzKCkge1xuICAgIHJldHVybiB0aGlzLmZvY3VzSGFuZGxlci5wc2V1ZG9Gb2N1cy5jb250YWluc0l0ZW0odGhpcy5vcHRpb25Qcm94eSk7XG4gIH1cbn1cbiJdfQ==