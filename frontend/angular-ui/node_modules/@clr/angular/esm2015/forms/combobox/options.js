/**
 * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { Component, ContentChildren, ElementRef, Inject, Input, Optional, } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { POPOVER_HOST_ANCHOR } from '../../popover/common/popover-host-anchor.token';
import { OptionSelectionService } from './providers/option-selection.service';
import { IF_ACTIVE_ID } from '../../utils/conditional/if-active.service';
import { AriaService } from '../../utils/aria/aria.service';
import { ClrCommonStringsService } from '../../utils/i18n/common-strings.service';
import { LoadingListener } from '../../utils/loading/loading-listener';
import { ClrLoadingState } from '../../utils/loading/loading';
import { ClrOption } from './option';
import { ComboboxFocusHandler } from './providers/combobox-focus-handler.service';
import { fromEvent } from 'rxjs';
import { ClrPopoverToggleService } from '../../utils/popover/providers/popover-toggle.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './providers/option-selection.service';
import * as ɵngcc2 from '../../utils/aria/aria.service';
import * as ɵngcc3 from '../../utils/i18n/common-strings.service';
import * as ɵngcc4 from './providers/combobox-focus-handler.service';
import * as ɵngcc5 from '../../utils/popover/providers/popover-toggle.service';
import * as ɵngcc6 from '@angular/common';
import * as ɵngcc7 from '../../progress/spinner/spinner';

function ClrOptions_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 2);
    ɵngcc0.ɵɵelementStart(1, "clr-spinner", 3);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementStart(3, "span", 4);
    ɵngcc0.ɵɵtext(4);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.commonStrings.keys.loading, " ");
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r0.searchText(ctx_r0.optionSelectionService.currentInput), " ");
} }
function ClrOptions_div_1_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div");
    ɵngcc0.ɵɵelementStart(1, "span", 5);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    const ctx_r1 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate1(" ", ctx_r1.commonStrings.keys.comboboxNoResults, " ");
} }
const _c0 = ["*"];
let nbOptionsComponents = 0;
export class ClrOptions {
    constructor(optionSelectionService, id, ariaService, el, commonStrings, focusHandler, toggleService, parentHost, document) {
        this.optionSelectionService = optionSelectionService;
        this.id = id;
        this.ariaService = ariaService;
        this.el = el;
        this.commonStrings = commonStrings;
        this.focusHandler = focusHandler;
        this.toggleService = toggleService;
        this.document = document;
        this.loading = false;
        this.subscriptions = [];
        if (!parentHost) {
            throw new Error('clr-options should only be used inside of a clr-combobox');
        }
        if (!this.optionsId) {
            this.optionsId = 'clr-options-' + nbOptionsComponents++;
        }
    }
    searchText(input) {
        return this.commonStrings.parse(this.commonStrings.keys.comboboxSearching, { INPUT: input });
    }
    /**
     * Tests if the list of options is empty, meaning it doesn't contain any items
     */
    get emptyOptions() {
        return !this.optionSelectionService.loading && this.items.length === 0;
    }
    set optionsId(id) {
        this.ariaService.ariaControls = id;
        this.ariaService.ariaOwns = id;
    }
    get optionsId() {
        return this.ariaService.ariaControls;
    }
    set items(items) {
        this._items = items;
        this.focusHandler.addOptionValues(this._items.map(option => option.optionProxy));
    }
    get items() {
        return this._items;
    }
    loadingStateChange(state) {
        this.loading = state === ClrLoadingState.LOADING;
    }
    ngAfterViewInit() {
        this.focusHandler.listbox = this.el.nativeElement;
        this.subscriptions.push(fromEvent(this.document, 'scroll', { capture: true }).subscribe(event => {
            if (this.toggleService.open &&
                event.target !== this.el.nativeElement &&
                event.target !== this.focusHandler.textInput) {
                this.toggleService.open = false;
            }
        }));
    }
    ngOnDestroy() {
        this.subscriptions.forEach(sub => sub.unsubscribe());
    }
}
ClrOptions.ɵfac = function ClrOptions_Factory(t) { return new (t || ClrOptions)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.OptionSelectionService), ɵngcc0.ɵɵdirectiveInject(IF_ACTIVE_ID), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.AriaService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.ClrCommonStringsService), ɵngcc0.ɵɵdirectiveInject(ɵngcc4.ComboboxFocusHandler), ɵngcc0.ɵɵdirectiveInject(ɵngcc5.ClrPopoverToggleService), ɵngcc0.ɵɵdirectiveInject(POPOVER_HOST_ANCHOR, 8), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };
ClrOptions.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: ClrOptions, selectors: [["clr-options"]], contentQueries: function ClrOptions_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, ClrOption, 0);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.items = _t);
    } }, hostVars: 4, hostBindings: function ClrOptions_HostBindings(rf, ctx) { if (rf & 2) {
        ɵngcc0.ɵɵhostProperty("id", ctx.optionsId);
        ɵngcc0.ɵɵattribute("role", "listbox");
        ɵngcc0.ɵɵclassProp("clr-combobox-options", true);
    } }, inputs: { optionsId: ["id", "optionsId"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: LoadingListener, useExisting: ClrOptions }])], ngContentSelectors: _c0, decls: 3, vars: 2, consts: [["class", "clr-combobox-options-loading", 4, "ngIf"], [4, "ngIf"], [1, "clr-combobox-options-loading"], ["clrInline", ""], [1, "clr-combobox-options-text"], [1, "clr-combobox-options-empty-text"]], template: function ClrOptions_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵtemplate(0, ClrOptions_div_0_Template, 5, 2, "div", 0);
        ɵngcc0.ɵɵtemplate(1, ClrOptions_div_1_Template, 3, 1, "div", 1);
        ɵngcc0.ɵɵprojection(2);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.optionSelectionService.loading);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngIf", ctx.emptyOptions);
    } }, directives: [ɵngcc6.NgIf, ɵngcc7.ClrSpinner], encapsulation: 2 });
ClrOptions.ctorParameters = () => [
    { type: OptionSelectionService },
    { type: Number, decorators: [{ type: Inject, args: [IF_ACTIVE_ID,] }] },
    { type: AriaService },
    { type: ElementRef },
    { type: ClrCommonStringsService },
    { type: ComboboxFocusHandler },
    { type: ClrPopoverToggleService },
    { type: ElementRef, decorators: [{ type: Optional }, { type: Inject, args: [POPOVER_HOST_ANCHOR,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
ClrOptions.propDecorators = {
    optionsId: [{ type: Input, args: ['id',] }],
    items: [{ type: ContentChildren, args: [ClrOption,] }]
};
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(ClrOptions, [{
        type: Component,
        args: [{
                selector: 'clr-options',
                template: `
    <div *ngIf="optionSelectionService.loading" class="clr-combobox-options-loading">
      <clr-spinner clrInline>
        {{ commonStrings.keys.loading }}
      </clr-spinner>
      <span class="clr-combobox-options-text">
        {{ searchText(optionSelectionService.currentInput) }}
      </span>
    </div>

    <!-- Rendered if data set is empty -->
    <div *ngIf="emptyOptions">
      <span class="clr-combobox-options-empty-text">
        {{ commonStrings.keys.comboboxNoResults }}
      </span>
    </div>

    <!--Option Groups and Options will be projected here-->
    <ng-content></ng-content>
  `,
                providers: [{ provide: LoadingListener, useExisting: ClrOptions }],
                host: {
                    '[class.clr-combobox-options]': 'true',
                    '[attr.role]': '"listbox"',
                    '[id]': 'optionsId'
                }
            }]
    }], function () { return [{ type: ɵngcc1.OptionSelectionService }, { type: Number, decorators: [{
                type: Inject,
                args: [IF_ACTIVE_ID]
            }] }, { type: ɵngcc2.AriaService }, { type: ɵngcc0.ElementRef }, { type: ɵngcc3.ClrCommonStringsService }, { type: ɵngcc4.ComboboxFocusHandler }, { type: ɵngcc5.ClrPopoverToggleService }, { type: ɵngcc0.ElementRef, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [POPOVER_HOST_ANCHOR]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }]; }, { optionsId: [{
            type: Input,
            args: ['id']
        }], items: [{
            type: ContentChildren,
            args: [ClrOption]
        }] }); })();

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9ucy5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY2xyLWFuZ3VsYXIvc3JjL2Zvcm1zL2NvbWJvYm94L29wdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBRUgsT0FBTyxFQUNMLFNBQVMsRUFDVCxlQUFlLEVBQ2YsVUFBVSxFQUNWLE1BQU0sRUFDTixLQUFLLEVBQ0wsUUFBUSxHQUlULE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxnREFBZ0QsQ0FBQztBQUNyRixPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUM5RSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sMkNBQTJDLENBQUM7QUFDekUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBQzVELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ2xGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxzQ0FBc0MsQ0FBQztBQUN2RSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDOUQsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUNyQyxPQUFPLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUNsRixPQUFPLEVBQUUsU0FBUyxFQUFnQixNQUFNLE1BQU0sQ0FBQztBQUMvQyxPQUFPLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxzREFBc0QsQ0FBQzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFFL0YsSUFBSSxtQkFBbUIsR0FBRyxDQUFDLENBQUM7QUErQjVCLE1BQU0sT0FBTyxVQUFVO0FBQUcsSUFJeEIsWUFDUyxzQkFBaUQsRUFDM0IsRUFBVSxFQUMvQixXQUF3QixFQUN4QixFQUFjLEVBQ2YsYUFBc0MsRUFDckMsWUFBcUMsRUFDckMsYUFBc0MsRUFHOUMsVUFBc0IsRUFDSSxRQUFhO0FBQ3hDLFFBWFEsMkJBQXNCLEdBQXRCLHNCQUFzQixDQUEyQjtBQUFDLFFBQzVCLE9BQUUsR0FBRixFQUFFLENBQVE7QUFBQyxRQUNoQyxnQkFBVyxHQUFYLFdBQVcsQ0FBYTtBQUFDLFFBQ3pCLE9BQUUsR0FBRixFQUFFLENBQVk7QUFBQyxRQUNoQixrQkFBYSxHQUFiLGFBQWEsQ0FBeUI7QUFBQyxRQUN0QyxpQkFBWSxHQUFaLFlBQVksQ0FBeUI7QUFBQyxRQUN0QyxrQkFBYSxHQUFiLGFBQWEsQ0FBeUI7QUFBQyxRQUlyQixhQUFRLEdBQVIsUUFBUSxDQUFLO0FBQzNDLFFBZlMsWUFBTyxHQUFHLEtBQUssQ0FBQztBQUN6QixRQUFVLGtCQUFhLEdBQW1CLEVBQUUsQ0FBQztBQUM3QyxRQWNJLElBQUksQ0FBQyxVQUFVLEVBQUU7QUFDckIsWUFBTSxNQUFNLElBQUksS0FBSyxDQUFDLDBEQUEwRCxDQUFDLENBQUM7QUFDbEYsU0FBSztBQUNMLFFBQ0ksSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7QUFDekIsWUFBTSxJQUFJLENBQUMsU0FBUyxHQUFHLGNBQWMsR0FBRyxtQkFBbUIsRUFBRSxDQUFDO0FBQzlELFNBQUs7QUFDTCxJQUFFLENBQUM7QUFDSCxJQUNTLFVBQVUsQ0FBQyxLQUFhO0FBQ2pDLFFBQUksT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBQ2pHLElBQUUsQ0FBQztBQUNILElBQ0U7QUFDRjtBQUNFLE9BQUc7QUFDTCxJQUFFLElBQVcsWUFBWTtBQUN6QixRQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsc0JBQXNCLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQztBQUMzRSxJQUFFLENBQUM7QUFDSCxJQUNFLElBQ0ksU0FBUyxDQUFDLEVBQVU7QUFDMUIsUUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUM7QUFDdkMsUUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsR0FBRyxFQUFFLENBQUM7QUFDbkMsSUFBRSxDQUFDO0FBQ0gsSUFDRSxJQUFJLFNBQVM7QUFBSyxRQUNoQixPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsWUFBWSxDQUFDO0FBQ3pDLElBQUUsQ0FBQztBQUNILElBRUUsSUFDSSxLQUFLLENBQUMsS0FBOEI7QUFDMUMsUUFBSSxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQztBQUN4QixRQUFJLElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUM7QUFDckYsSUFBRSxDQUFDO0FBQ0gsSUFDRSxJQUFJLEtBQUs7QUFBSyxRQUNaLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQztBQUN2QixJQUFFLENBQUM7QUFDSCxJQUNFLGtCQUFrQixDQUFDLEtBQXNCO0FBQUksUUFDM0MsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLEtBQUssZUFBZSxDQUFDLE9BQU8sQ0FBQztBQUNyRCxJQUFFLENBQUM7QUFDSCxJQUNFLGVBQWU7QUFDakIsUUFBSSxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQztBQUN0RCxRQUNJLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUNyQixTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxRQUFRLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUU7QUFDOUUsWUFBUSxJQUNFLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSTtBQUNqQyxnQkFBVyxLQUFlLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYTtBQUMzRCxnQkFBVyxLQUFlLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxFQUN2RDtBQUNWLGdCQUFVLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQztBQUMxQyxhQUFTO0FBQ1QsUUFBTSxDQUFDLENBQUMsQ0FDSCxDQUFDO0FBQ04sSUFBRSxDQUFDO0FBQ0gsSUFDRSxXQUFXO0FBQ2IsUUFBSSxJQUFJLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQyxDQUFDO0FBQ3pELElBQUUsQ0FBQztBQUNIO3NDQTlHQyxTQUFTLFNBQUMsa0JBQ1QsUUFBUSxFQUFFLGFBQWEsa0JBQ3ZCLFFBQVEsRUFBRTs7NkJBbUJULGtCQUNEO0NBQVMsRUFBRSxDQUFDLEVBQUUsT0FBTyxFQUFFO1VBQWUsRUFBRTtPQUFXLEVBQUUsVUFBVSxFQUFFLENBQUMsa0JBQ2xFLElBQUksRUFBRSxzQkFDSjtvQkFBOEIsRUFBRSxNQUFNLHNCQUN0QyxhQUFhLEVBQUUsV0FBVztJQUMxQixNQUFNLEVBQUUsV0FBVyxtQkFDcEI7SUFDRjs7Ozs7Ozs7Ozs7MkVBQ0k7QUFBQztBQUFvQyxZQTFDakMsc0JBQXNCO0FBQUkseUNBZ0Q5QixNQUFNLFNBQUMsWUFBWTtBQUFTLFlBOUN4QixXQUFXO0FBQUksWUFadEIsVUFBVTtBQUNWLFlBWU8sdUJBQXVCO0FBQUksWUFJM0Isb0JBQW9CO0FBQUksWUFFeEIsdUJBQXVCO0FBQUksWUFuQmxDLFVBQVUsdUJBZ0VQLFFBQVEsWUFDUixNQUFNLFNBQUMsbUJBQW1CO0FBQ3hCLDRDQUNGLE1BQU0sU0FBQyxRQUFRO0FBQVE7QUFBRztBQUVwQix3QkFvQlIsS0FBSyxTQUFDLElBQUk7QUFDUixvQkFVRixlQUFlLFNBQUMsU0FBUztBQUN4Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztvQkFBRTtBQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTYtMjAyMCBWTXdhcmUsIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIFRoaXMgc29mdHdhcmUgaXMgcmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UuXG4gKiBUaGUgZnVsbCBsaWNlbnNlIGluZm9ybWF0aW9uIGNhbiBiZSBmb3VuZCBpbiBMSUNFTlNFIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHByb2plY3QuXG4gKi9cblxuaW1wb3J0IHtcbiAgQ29tcG9uZW50LFxuICBDb250ZW50Q2hpbGRyZW4sXG4gIEVsZW1lbnRSZWYsXG4gIEluamVjdCxcbiAgSW5wdXQsXG4gIE9wdGlvbmFsLFxuICBRdWVyeUxpc3QsXG4gIEFmdGVyVmlld0luaXQsXG4gIE9uRGVzdHJveSxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBQT1BPVkVSX0hPU1RfQU5DSE9SIH0gZnJvbSAnLi4vLi4vcG9wb3Zlci9jb21tb24vcG9wb3Zlci1ob3N0LWFuY2hvci50b2tlbic7XG5pbXBvcnQgeyBPcHRpb25TZWxlY3Rpb25TZXJ2aWNlIH0gZnJvbSAnLi9wcm92aWRlcnMvb3B0aW9uLXNlbGVjdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IElGX0FDVElWRV9JRCB9IGZyb20gJy4uLy4uL3V0aWxzL2NvbmRpdGlvbmFsL2lmLWFjdGl2ZS5zZXJ2aWNlJztcbmltcG9ydCB7IEFyaWFTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvYXJpYS9hcmlhLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xyQ29tbW9uU3RyaW5nc1NlcnZpY2UgfSBmcm9tICcuLi8uLi91dGlscy9pMThuL2NvbW1vbi1zdHJpbmdzLnNlcnZpY2UnO1xuaW1wb3J0IHsgTG9hZGluZ0xpc3RlbmVyIH0gZnJvbSAnLi4vLi4vdXRpbHMvbG9hZGluZy9sb2FkaW5nLWxpc3RlbmVyJztcbmltcG9ydCB7IENsckxvYWRpbmdTdGF0ZSB9IGZyb20gJy4uLy4uL3V0aWxzL2xvYWRpbmcvbG9hZGluZyc7XG5pbXBvcnQgeyBDbHJPcHRpb24gfSBmcm9tICcuL29wdGlvbic7XG5pbXBvcnQgeyBDb21ib2JveEZvY3VzSGFuZGxlciB9IGZyb20gJy4vcHJvdmlkZXJzL2NvbWJvYm94LWZvY3VzLWhhbmRsZXIuc2VydmljZSc7XG5pbXBvcnQgeyBmcm9tRXZlbnQsIFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQ2xyUG9wb3ZlclRvZ2dsZVNlcnZpY2UgfSBmcm9tICcuLi8uLi91dGlscy9wb3BvdmVyL3Byb3ZpZGVycy9wb3BvdmVyLXRvZ2dsZS5zZXJ2aWNlJztcblxubGV0IG5iT3B0aW9uc0NvbXBvbmVudHMgPSAwO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdjbHItb3B0aW9ucycsXG4gIHRlbXBsYXRlOiBgXG4gICAgPGRpdiAqbmdJZj1cIm9wdGlvblNlbGVjdGlvblNlcnZpY2UubG9hZGluZ1wiIGNsYXNzPVwiY2xyLWNvbWJvYm94LW9wdGlvbnMtbG9hZGluZ1wiPlxuICAgICAgPGNsci1zcGlubmVyIGNscklubGluZT5cbiAgICAgICAge3sgY29tbW9uU3RyaW5ncy5rZXlzLmxvYWRpbmcgfX1cbiAgICAgIDwvY2xyLXNwaW5uZXI+XG4gICAgICA8c3BhbiBjbGFzcz1cImNsci1jb21ib2JveC1vcHRpb25zLXRleHRcIj5cbiAgICAgICAge3sgc2VhcmNoVGV4dChvcHRpb25TZWxlY3Rpb25TZXJ2aWNlLmN1cnJlbnRJbnB1dCkgfX1cbiAgICAgIDwvc3Bhbj5cbiAgICA8L2Rpdj5cblxuICAgIDwhLS0gUmVuZGVyZWQgaWYgZGF0YSBzZXQgaXMgZW1wdHkgLS0+XG4gICAgPGRpdiAqbmdJZj1cImVtcHR5T3B0aW9uc1wiPlxuICAgICAgPHNwYW4gY2xhc3M9XCJjbHItY29tYm9ib3gtb3B0aW9ucy1lbXB0eS10ZXh0XCI+XG4gICAgICAgIHt7IGNvbW1vblN0cmluZ3Mua2V5cy5jb21ib2JveE5vUmVzdWx0cyB9fVxuICAgICAgPC9zcGFuPlxuICAgIDwvZGl2PlxuXG4gICAgPCEtLU9wdGlvbiBHcm91cHMgYW5kIE9wdGlvbnMgd2lsbCBiZSBwcm9qZWN0ZWQgaGVyZS0tPlxuICAgIDxuZy1jb250ZW50PjwvbmctY29udGVudD5cbiAgYCxcbiAgcHJvdmlkZXJzOiBbeyBwcm92aWRlOiBMb2FkaW5nTGlzdGVuZXIsIHVzZUV4aXN0aW5nOiBDbHJPcHRpb25zIH1dLFxuICBob3N0OiB7XG4gICAgJ1tjbGFzcy5jbHItY29tYm9ib3gtb3B0aW9uc10nOiAndHJ1ZScsXG4gICAgJ1thdHRyLnJvbGVdJzogJ1wibGlzdGJveFwiJyxcbiAgICAnW2lkXSc6ICdvcHRpb25zSWQnLFxuICB9LFxufSlcbmV4cG9ydCBjbGFzcyBDbHJPcHRpb25zPFQ+IGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgTG9hZGluZ0xpc3RlbmVyLCBPbkRlc3Ryb3kge1xuICBwdWJsaWMgbG9hZGluZyA9IGZhbHNlO1xuICBwcml2YXRlIHN1YnNjcmlwdGlvbnM6IFN1YnNjcmlwdGlvbltdID0gW107XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHVibGljIG9wdGlvblNlbGVjdGlvblNlcnZpY2U6IE9wdGlvblNlbGVjdGlvblNlcnZpY2U8VD4sXG4gICAgQEluamVjdChJRl9BQ1RJVkVfSUQpIHB1YmxpYyBpZDogbnVtYmVyLFxuICAgIHByaXZhdGUgYXJpYVNlcnZpY2U6IEFyaWFTZXJ2aWNlLFxuICAgIHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsXG4gICAgcHVibGljIGNvbW1vblN0cmluZ3M6IENsckNvbW1vblN0cmluZ3NTZXJ2aWNlLFxuICAgIHByaXZhdGUgZm9jdXNIYW5kbGVyOiBDb21ib2JveEZvY3VzSGFuZGxlcjxUPixcbiAgICBwcml2YXRlIHRvZ2dsZVNlcnZpY2U6IENsclBvcG92ZXJUb2dnbGVTZXJ2aWNlLFxuICAgIEBPcHRpb25hbCgpXG4gICAgQEluamVjdChQT1BPVkVSX0hPU1RfQU5DSE9SKVxuICAgIHBhcmVudEhvc3Q6IEVsZW1lbnRSZWYsXG4gICAgQEluamVjdChET0NVTUVOVCkgcHJpdmF0ZSBkb2N1bWVudDogYW55XG4gICkge1xuICAgIGlmICghcGFyZW50SG9zdCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdjbHItb3B0aW9ucyBzaG91bGQgb25seSBiZSB1c2VkIGluc2lkZSBvZiBhIGNsci1jb21ib2JveCcpO1xuICAgIH1cblxuICAgIGlmICghdGhpcy5vcHRpb25zSWQpIHtcbiAgICAgIHRoaXMub3B0aW9uc0lkID0gJ2Nsci1vcHRpb25zLScgKyBuYk9wdGlvbnNDb21wb25lbnRzKys7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHNlYXJjaFRleHQoaW5wdXQ6IHN0cmluZykge1xuICAgIHJldHVybiB0aGlzLmNvbW1vblN0cmluZ3MucGFyc2UodGhpcy5jb21tb25TdHJpbmdzLmtleXMuY29tYm9ib3hTZWFyY2hpbmcsIHsgSU5QVVQ6IGlucHV0IH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRlc3RzIGlmIHRoZSBsaXN0IG9mIG9wdGlvbnMgaXMgZW1wdHksIG1lYW5pbmcgaXQgZG9lc24ndCBjb250YWluIGFueSBpdGVtc1xuICAgKi9cbiAgcHVibGljIGdldCBlbXB0eU9wdGlvbnMoKSB7XG4gICAgcmV0dXJuICF0aGlzLm9wdGlvblNlbGVjdGlvblNlcnZpY2UubG9hZGluZyAmJiB0aGlzLml0ZW1zLmxlbmd0aCA9PT0gMDtcbiAgfVxuXG4gIEBJbnB1dCgnaWQnKVxuICBzZXQgb3B0aW9uc0lkKGlkOiBzdHJpbmcpIHtcbiAgICB0aGlzLmFyaWFTZXJ2aWNlLmFyaWFDb250cm9scyA9IGlkO1xuICAgIHRoaXMuYXJpYVNlcnZpY2UuYXJpYU93bnMgPSBpZDtcbiAgfVxuXG4gIGdldCBvcHRpb25zSWQoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gdGhpcy5hcmlhU2VydmljZS5hcmlhQ29udHJvbHM7XG4gIH1cblxuICBfaXRlbXM6IFF1ZXJ5TGlzdDxDbHJPcHRpb248VD4+O1xuICBAQ29udGVudENoaWxkcmVuKENsck9wdGlvbilcbiAgc2V0IGl0ZW1zKGl0ZW1zOiBRdWVyeUxpc3Q8Q2xyT3B0aW9uPFQ+Pikge1xuICAgIHRoaXMuX2l0ZW1zID0gaXRlbXM7XG4gICAgdGhpcy5mb2N1c0hhbmRsZXIuYWRkT3B0aW9uVmFsdWVzKHRoaXMuX2l0ZW1zLm1hcChvcHRpb24gPT4gb3B0aW9uLm9wdGlvblByb3h5KSk7XG4gIH1cblxuICBnZXQgaXRlbXMoKTogUXVlcnlMaXN0PENsck9wdGlvbjxUPj4ge1xuICAgIHJldHVybiB0aGlzLl9pdGVtcztcbiAgfVxuXG4gIGxvYWRpbmdTdGF0ZUNoYW5nZShzdGF0ZTogQ2xyTG9hZGluZ1N0YXRlKTogdm9pZCB7XG4gICAgdGhpcy5sb2FkaW5nID0gc3RhdGUgPT09IENsckxvYWRpbmdTdGF0ZS5MT0FESU5HO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHRoaXMuZm9jdXNIYW5kbGVyLmxpc3Rib3ggPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQ7XG5cbiAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaChcbiAgICAgIGZyb21FdmVudCh0aGlzLmRvY3VtZW50LCAnc2Nyb2xsJywgeyBjYXB0dXJlOiB0cnVlIH0pLnN1YnNjcmliZShldmVudCA9PiB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICB0aGlzLnRvZ2dsZVNlcnZpY2Uub3BlbiAmJlxuICAgICAgICAgIChldmVudCBhcyBFdmVudCkudGFyZ2V0ICE9PSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQgJiZcbiAgICAgICAgICAoZXZlbnQgYXMgRXZlbnQpLnRhcmdldCAhPT0gdGhpcy5mb2N1c0hhbmRsZXIudGV4dElucHV0XG4gICAgICAgICkge1xuICAgICAgICAgIHRoaXMudG9nZ2xlU2VydmljZS5vcGVuID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5mb3JFYWNoKHN1YiA9PiBzdWIudW5zdWJzY3JpYmUoKSk7XG4gIH1cbn1cbiJdfQ==