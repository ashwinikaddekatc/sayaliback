"use strict";
/*
 * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const jsdom_1 = require("jsdom");
const add_assets_to_config_file_1 = require("../utility/add-assets-to-config-file");
const add_module_import_to_module_1 = require("../utility/add-module-import-to-module");
const angular_config_filename_1 = require("../utility/angular-config-filename");
const compare_versions_1 = require("../utility/compare-versions");
const find_app_module_1 = require("../utility/find-app-module");
const get_file_content_1 = require("../utility/get-file-content");
const get_index_html_path_1 = require("../utility/get-index-html-path");
const get_json_file_1 = require("../utility/get-json-file");
const run_npm_install_1 = require("../utility/run-npm-install");
const update_json_file_1 = require("../utility/update-json-file");
const versions_1 = require("./versions");
let projectSettings = {};
function setProjectSettings(options) {
    return (host) => {
        if (!host.exists(angular_config_filename_1.configFileName)) {
            throw new schematics_1.SchematicsException('Could not install Clarity, requires Angular and Angular CLI version 6 or greater');
        }
        projectSettings = Object.assign({}, options);
        const config = get_json_file_1.getJsonFile(host, angular_config_filename_1.configFileName);
        if (!options.project) {
            if (!config.defaultProject) {
                throw new schematics_1.SchematicsException('Could not find a default project, please specify --project PROJECT_NAME');
            }
            projectSettings.project = config.defaultProject;
        }
        projectSettings.module = find_app_module_1.findAppModule(host, config, projectSettings.project || '');
        projectSettings.indexHtml = get_index_html_path_1.getIndexHtmlPath(config, projectSettings.project || '');
    };
}
function addClarityDependencies(host) {
    update_json_file_1.updateJsonFile(host, 'package.json', json => {
        json.dependencies['@cds/city'] = json.dependencies['@cds/city'] || versions_1.cdsCityVersion;
        const existingCoreVersion = json.dependencies['@cds/core'];
        if (!existingCoreVersion) {
            json.dependencies['@cds/core'] = versions_1.cdsAngularVersion;
            json.dependencies['@cds/angular'] = json.dependencies['@cds/angular'] || versions_1.cdsAngularVersion;
        }
        else {
            // If the version of @cds/core in the package.json is higher than the latest @cds/angular version,
            // set the version of @cds/angular to the latest one.
            // Otherwise, set the version of @cds/angular to the version of @cds/core from package.json.
            const ngVersionToAdd = compare_versions_1.compareVersions(existingCoreVersion, versions_1.cdsAngularVersion) > -1 ? versions_1.cdsAngularVersion : existingCoreVersion;
            json.dependencies['@cds/angular'] = ngVersionToAdd;
        }
    });
}
function addAssetsToConfigFile(host, context) {
    update_json_file_1.updateJsonFile(host, angular_config_filename_1.configFileName, json => {
        const project = Object.keys(json.projects).find(key => key === projectSettings.project);
        if (!project) {
            context.logger.warn(`Could not update CLI config file to add styles. You'll have to add them manually.`);
            return;
        }
        const target = json.projects[project].targets || json.projects[project].architect;
        const pathPrefix = json.apps ? '../' : '';
        const assets = [
            'node_modules/normalize.css/normalize.css',
            'node_modules/@cds/core/global.min.css',
            'node_modules/@cds/core/styles/module.shims.min.css',
            'node_modules/@cds/city/css/bundles/default.min.css',
        ];
        add_assets_to_config_file_1.updateStyleAssets(target, pathPrefix, assets);
    });
}
function importCdsModule() {
    return (host) => add_module_import_to_module_1.addModuleImportToModule(host, 'CdsModule', '@cds/angular', projectSettings.module || '');
}
function addCdsTextToBodyTag() {
    return (host, context) => {
        const stepFailedWarnMessage = `Could not update index.html to add 'cds-body' attribute. You'll have to add it manually.`;
        const indexFilePath = projectSettings.indexHtml;
        let indexFile;
        if (!indexFilePath) {
            context.logger.warn(stepFailedWarnMessage);
            return;
        }
        try {
            indexFile = get_file_content_1.getFileContent(host, indexFilePath);
        }
        catch (e) {
            context.logger.debug(e);
            context.logger.warn(stepFailedWarnMessage);
            return;
        }
        const dom = new jsdom_1.JSDOM(indexFile);
        const bodyTag = dom.window.document.querySelector('body');
        if (!bodyTag) {
            context.logger.warn(stepFailedWarnMessage);
            return;
        }
        bodyTag.setAttribute('cds-text', 'body');
        const updatedContent = dom.serialize();
        host.overwrite(indexFilePath, updatedContent);
    };
}
// Chain a series of tasks to setup @cds/angular
// 1. Add Clarity dependencies
// 2. Add style assets to angular.json
// 3. Add CdsModule to NgModule
// 4. Add cds-text="body" to the body tag in index.html
// 5. Run npm install
function default_1(options) {
    return schematics_1.chain([
        setProjectSettings(options),
        addClarityDependencies,
        addAssetsToConfigFile,
        importCdsModule,
        addCdsTextToBodyTag,
        run_npm_install_1.runNpmInstall,
    ]);
}
exports.default = default_1;
//# sourceMappingURL=index.js.map