"use strict";
/*
 * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const schematics_1 = require("@angular-devkit/schematics");
const testing_1 = require("@angular-devkit/schematics/testing");
const path_1 = require("path");
const angular_config_filename_1 = require("../utility/angular-config-filename");
const get_file_content_1 = require("../utility/get-file-content");
const setup_project_1 = require("../utility/setup-project");
const versions_1 = require("./versions");
const PROJECT_NAME = 'foo';
const collectionPath = path_1.join(__dirname, '../cds-collection.json');
const packageJsonPath = '/package.json';
describe('ng add @cds/angular', () => {
    it('should print an error if executed in an empty directory', () => __awaiter(void 0, void 0, void 0, function* () {
        const runner = new testing_1.SchematicTestRunner('schematics', collectionPath);
        try {
            yield runner.runSchematicAsync('ng-add', { module: 'app' }, schematics_1.Tree.empty()).toPromise();
            fail('expected to throw');
        }
        catch (e) {
            expect(e instanceof schematics_1.SchematicsException);
            expect(e.message).toEqual('Could not install Clarity, requires Angular and Angular CLI version 6 or greater');
        }
    }));
    describe('in a new Angular workspace', () => __awaiter(void 0, void 0, void 0, function* () {
        let runner;
        let workspaceTree;
        beforeEach(() => __awaiter(void 0, void 0, void 0, function* () {
            runner = new testing_1.SchematicTestRunner('schematics', collectionPath);
            workspaceTree = yield setup_project_1.setupProject(new testing_1.UnitTestTree(new schematics_1.HostTree()), runner, PROJECT_NAME);
        }));
        it('should add dependencies to Clarity packages', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield runner.runSchematicAsync('ng-add', {}, workspaceTree).toPromise();
            expect(tree.files).toContain(packageJsonPath);
            const { dependencies } = JSON.parse(get_file_content_1.getFileContent(tree, packageJsonPath));
            expect(dependencies).toBeDefined();
            expect(dependencies['@cds/core']).toEqual(versions_1.cdsAngularVersion);
            expect(dependencies['@cds/angular']).toEqual(versions_1.cdsAngularVersion);
            expect(dependencies['@cds/city']).toEqual(versions_1.cdsCityVersion);
        }));
        it('should add @cds/angular with version the same as the already defined @cds/core version', () => __awaiter(void 0, void 0, void 0, function* () {
            const alreadyDefinedCoreVersion = '~5.0.1';
            const packageJsonBuffer = workspaceTree.read(packageJsonPath);
            const packageJson = JSON.parse((packageJsonBuffer === null || packageJsonBuffer === void 0 ? void 0 : packageJsonBuffer.toString()) || '');
            packageJson.dependencies['@cds/core'] = alreadyDefinedCoreVersion;
            workspaceTree.overwrite(packageJsonPath, JSON.stringify(packageJson, null, 2));
            const tree = yield runner.runSchematicAsync('ng-add', {}, workspaceTree).toPromise();
            expect(tree.files).toContain(packageJsonPath);
            const { dependencies } = JSON.parse(get_file_content_1.getFileContent(tree, packageJsonPath));
            expect(dependencies).toBeDefined();
            expect(dependencies['@cds/core']).toEqual(alreadyDefinedCoreVersion);
            expect(dependencies['@cds/angular']).toEqual(alreadyDefinedCoreVersion);
            expect(dependencies['@cds/city']).toEqual(versions_1.cdsCityVersion);
        }));
        it("should add the latest version of @cds/angular if there's a newer version of @cds/core in the package.json", () => __awaiter(void 0, void 0, void 0, function* () {
            const alreadyDefinedCoreVersion = '~100.0.0';
            const packageJsonBuffer = workspaceTree.read(packageJsonPath);
            const packageJson = JSON.parse((packageJsonBuffer === null || packageJsonBuffer === void 0 ? void 0 : packageJsonBuffer.toString()) || '');
            packageJson.dependencies['@cds/core'] = alreadyDefinedCoreVersion;
            workspaceTree.overwrite(packageJsonPath, JSON.stringify(packageJson, null, 2));
            const tree = yield runner.runSchematicAsync('ng-add', {}, workspaceTree).toPromise();
            expect(tree.files).toContain(packageJsonPath);
            const { dependencies } = JSON.parse(get_file_content_1.getFileContent(tree, packageJsonPath));
            expect(dependencies).toBeDefined();
            expect(dependencies['@cds/core']).toEqual(alreadyDefinedCoreVersion);
            expect(dependencies['@cds/angular']).toEqual(versions_1.cdsAngularVersion);
            expect(dependencies['@cds/city']).toEqual(versions_1.cdsCityVersion);
        }));
        it('should not override the existing version of @cds/city', () => __awaiter(void 0, void 0, void 0, function* () {
            const alreadyDefinedCityVersion = '~1.0.0';
            const packageJsonBuffer = workspaceTree.read(packageJsonPath);
            const packageJson = JSON.parse((packageJsonBuffer === null || packageJsonBuffer === void 0 ? void 0 : packageJsonBuffer.toString()) || '');
            packageJson.dependencies['@cds/city'] = alreadyDefinedCityVersion;
            workspaceTree.overwrite(packageJsonPath, JSON.stringify(packageJson, null, 2));
            const tree = yield runner.runSchematicAsync('ng-add', {}, workspaceTree).toPromise();
            expect(tree.files).toContain(packageJsonPath);
            const { dependencies } = JSON.parse(get_file_content_1.getFileContent(tree, packageJsonPath));
            expect(dependencies).toBeDefined();
            expect(dependencies['@cds/city']).toEqual(alreadyDefinedCityVersion);
            expect(dependencies['@cds/core']).toEqual(versions_1.cdsAngularVersion);
            expect(dependencies['@cds/angular']).toEqual(versions_1.cdsAngularVersion);
        }));
        it('should add Clarity assets in the configuration file', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield runner.runSchematicAsync('ng-add', {}, workspaceTree).toPromise();
            const configFilePath = `/${angular_config_filename_1.configFileName}`;
            expect(tree.files).toContain(configFilePath);
            const configFile = JSON.parse(get_file_content_1.getFileContent(tree, configFilePath));
            const styles = configFile.projects[PROJECT_NAME].architect.build.options.styles;
            expect(styles.includes('node_modules/normalize.css/normalize.css')).toBeTruthy();
            expect(styles.includes('node_modules/@cds/core/global.min.css')).toBeTruthy();
            expect(styles.includes('node_modules/@cds/core/styles/module.shims.min.css')).toBeTruthy();
            expect(styles.includes('node_modules/@cds/city/css/bundles/default.min.css')).toBeTruthy();
        }));
        it('should import CdsModule to the root module', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield runner.runSchematicAsync('ng-add', {}, workspaceTree).toPromise();
            const rootModulePath = '/src/app/app.module.ts';
            const content = get_file_content_1.getFileContent(tree, rootModulePath);
            expect(content).toMatch(/import { CdsModule } from '@cds\/angular'/);
        }));
        it('should add cds-text tag to the body tag in the index.html', () => __awaiter(void 0, void 0, void 0, function* () {
            const tree = yield runner.runSchematicAsync('ng-add', {}, workspaceTree).toPromise();
            const indexHtmlPath = '/src/index.html';
            const content = get_file_content_1.getFileContent(tree, indexHtmlPath);
            expect(content).toMatch(/<body cds-text="body">/);
        }));
    }));
});
//# sourceMappingURL=index.spec.js.map