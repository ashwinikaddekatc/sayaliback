{"ast":null,"code":"import _slicedToArray from \"C:/Users/HP/Desktop/new cns-portal/CNS-Portal/frontend/angular-ui/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _createForOfIteratorHelper from \"C:/Users/HP/Desktop/new cns-portal/CNS-Portal/frontend/angular-ui/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\n\n/*\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport is from 'ramda/es/is.js';\nimport isEmpty from 'ramda/es/isEmpty.js';\nimport isNil from 'ramda/es/isNil.js';\nexport function isNilOrEmpty(val) {\n  return isNil(val) || isEmpty(val);\n}\nexport function isString(val) {\n  return is(String, val);\n}\nexport function isNumericString(val) {\n  return isString(val) && !isEmpty(val.trim()) && +val === +val;\n}\nexport function isStringOrNil(val) {\n  return is(String, val) || isNil(val);\n}\nexport function isStringAndNotNilOrEmpty(val) {\n  return isString(val) && !isNil(val) && !isEmpty(val);\n}\nexport function isObject(val) {\n  return is(Object, val);\n}\nexport function isMap(val) {\n  return is(Map, val);\n}\nexport function isObjectAndNotNilOrEmpty(val) {\n  return !isNilOrEmpty(val) && isObject(val);\n}\nexport function hasPropertyChanged(val, oldVal) {\n  return val !== oldVal;\n} // marks nil values (undefined, null, empty string) as changed\n\nexport function hasStringPropertyChanged(val, oldVal) {\n  return isStringOrNil(val) && hasPropertyChanged(val, oldVal);\n} // ignores nil values when checking for changes\n\nexport function hasStringPropertyChangedAndNotNil(val, oldVal) {\n  return !isNilOrEmpty(val) && hasPropertyChanged(val, oldVal);\n}\nexport function getEnumValues(enumeration) {\n  return Object.values(enumeration);\n}\nexport function createId() {\n  var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '_';\n  return \"\".concat(prefix).concat(Math.random().toString(36).substr(2, 9));\n} // used by deepClone() tested through integration\n\nfunction cloneMap(mp) {\n  var clonedMap = new Map();\n\n  var _iterator = _createForOfIteratorHelper(mp),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _slicedToArray(_step.value, 2),\n          key = _step$value[0],\n          val = _step$value[1];\n\n      if (isMap(val)) {\n        clonedMap.set(key, cloneMap(val));\n      } else {\n        clonedMap.set(key, val);\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return clonedMap;\n}\n\nexport function deepClone(obj) {\n  // this will clone almost anything (maps, arrays, objects, etc.) to the lowest of the low levels\n  // be careful using this carelessly b/c it CAN have performance implications!\n  return isMap(obj) ? cloneMap(obj) : JSON.parse(JSON.stringify(obj));\n} // this utility is a little restrictive on its inputs. it expects a specific format.\n// going outside of that format (like passing an object or function as the value) can yield unintended results.\n// this does NOT eval anything. that would be bad.\n// 'isValid:true status:success': string =>\n// [['isValid', true], ['status', 'success']]: [string, string | number | boolean][]\n\nexport function convertStringPropValuePairsToTuple(propValString) {\n  // starts as a string like... \"isValid:true status:success\"\n  return propValString.split(' ').map(function (str) {\n    return str.split(':');\n  }).map(function (pv) {\n    var _pv = _slicedToArray(pv, 2),\n        propname = _pv[0],\n        propValAsString = _pv[1];\n\n    if (propValAsString === 'true') {\n      return [propname, true];\n    }\n\n    if (propValAsString === 'false') {\n      return [propname, false];\n    }\n\n    if (propValAsString === 'null') {\n      return [propname, null];\n    }\n\n    if (propValAsString === 'undefined') {\n      return [propname, undefined];\n    }\n\n    if (isNumericString(propValAsString)) {\n      return [propname, +propValAsString];\n    } // else it's a string and that's ok\n\n\n    return [propname, propValAsString];\n  }); // returns as [['isValide', true], ['status', 'success']]\n}\nexport function anyOrAllPropertiesPass(obj, propValuePairs, anyOrAll) {\n  if (!propValuePairs) {\n    return true;\n  }\n\n  var tests = convertStringPropValuePairsToTuple(propValuePairs);\n\n  if (!obj) {\n    return false;\n  }\n\n  if (tests.length < 1) {\n    return true;\n  } else {\n    var testResults = tests.filter(function (pvArry) {\n      var _pvArry = _slicedToArray(pvArry, 2),\n          propname = _pvArry[0],\n          expectedVal = _pvArry[1];\n\n      if (expectedVal === false) {\n        return !obj[propname];\n      }\n\n      return obj[propname] === expectedVal;\n    });\n    return anyOrAll === 'all' ? testResults.length === tests.length : testResults.length > 0;\n  }\n}\nexport function allPropertiesPass(obj, propValuePairs) {\n  return anyOrAllPropertiesPass(obj, propValuePairs, 'all');\n}\nexport function anyPropertiesPass(obj, propValuePairs) {\n  return anyOrAllPropertiesPass(obj, propValuePairs, 'any');\n}\nexport function getMillisecondsFromSeconds(sec) {\n  return isNil(sec) ? 0 : Number(sec) * 1000;\n} //# sourceMappingURL=identity.js.map","map":{"version":3,"sources":["C:/Users/HP/Desktop/new cns-portal/CNS-Portal/frontend/angular-ui/node_modules/@cds/core/internal/utils/identity.js"],"names":["is","isEmpty","isNil","isNilOrEmpty","val","isString","String","isNumericString","trim","isStringOrNil","isStringAndNotNilOrEmpty","isObject","Object","isMap","Map","isObjectAndNotNilOrEmpty","hasPropertyChanged","oldVal","hasStringPropertyChanged","hasStringPropertyChangedAndNotNil","getEnumValues","enumeration","values","createId","prefix","Math","random","toString","substr","cloneMap","mp","clonedMap","key","set","deepClone","obj","JSON","parse","stringify","convertStringPropValuePairsToTuple","propValString","split","map","str","pv","propname","propValAsString","undefined","anyOrAllPropertiesPass","propValuePairs","anyOrAll","tests","length","testResults","filter","pvArry","expectedVal","allPropertiesPass","anyPropertiesPass","getMillisecondsFromSeconds","sec","Number"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport is from 'ramda/es/is.js';\nimport isEmpty from 'ramda/es/isEmpty.js';\nimport isNil from 'ramda/es/isNil.js';\nexport function isNilOrEmpty(val) {\n    return isNil(val) || isEmpty(val);\n}\nexport function isString(val) {\n    return is(String, val);\n}\nexport function isNumericString(val) {\n    return isString(val) && !isEmpty(val.trim()) && +val === +val;\n}\nexport function isStringOrNil(val) {\n    return is(String, val) || isNil(val);\n}\nexport function isStringAndNotNilOrEmpty(val) {\n    return isString(val) && !isNil(val) && !isEmpty(val);\n}\nexport function isObject(val) {\n    return is(Object, val);\n}\nexport function isMap(val) {\n    return is(Map, val);\n}\nexport function isObjectAndNotNilOrEmpty(val) {\n    return !isNilOrEmpty(val) && isObject(val);\n}\nexport function hasPropertyChanged(val, oldVal) {\n    return val !== oldVal;\n}\n// marks nil values (undefined, null, empty string) as changed\nexport function hasStringPropertyChanged(val, oldVal) {\n    return isStringOrNil(val) && hasPropertyChanged(val, oldVal);\n}\n// ignores nil values when checking for changes\nexport function hasStringPropertyChangedAndNotNil(val, oldVal) {\n    return !isNilOrEmpty(val) && hasPropertyChanged(val, oldVal);\n}\nexport function getEnumValues(enumeration) {\n    return Object.values(enumeration);\n}\nexport function createId(prefix = '_') {\n    return `${prefix}${Math.random().toString(36).substr(2, 9)}`;\n}\n// used by deepClone() tested through integration\nfunction cloneMap(mp) {\n    const clonedMap = new Map();\n    for (const [key, val] of mp) {\n        if (isMap(val)) {\n            clonedMap.set(key, cloneMap(val));\n        }\n        else {\n            clonedMap.set(key, val);\n        }\n    }\n    return clonedMap;\n}\nexport function deepClone(obj) {\n    // this will clone almost anything (maps, arrays, objects, etc.) to the lowest of the low levels\n    // be careful using this carelessly b/c it CAN have performance implications!\n    return isMap(obj) ? cloneMap(obj) : JSON.parse(JSON.stringify(obj));\n}\n// this utility is a little restrictive on its inputs. it expects a specific format.\n// going outside of that format (like passing an object or function as the value) can yield unintended results.\n// this does NOT eval anything. that would be bad.\n// 'isValid:true status:success': string =>\n// [['isValid', true], ['status', 'success']]: [string, string | number | boolean][]\nexport function convertStringPropValuePairsToTuple(propValString) {\n    // starts as a string like... \"isValid:true status:success\"\n    return propValString\n        .split(' ')\n        .map(str => str.split(':'))\n        .map(pv => {\n        const [propname, propValAsString] = pv;\n        if (propValAsString === 'true') {\n            return [propname, true];\n        }\n        if (propValAsString === 'false') {\n            return [propname, false];\n        }\n        if (propValAsString === 'null') {\n            return [propname, null];\n        }\n        if (propValAsString === 'undefined') {\n            return [propname, undefined];\n        }\n        if (isNumericString(propValAsString)) {\n            return [propname, +propValAsString];\n        }\n        // else it's a string and that's ok\n        return [propname, propValAsString];\n    });\n    // returns as [['isValide', true], ['status', 'success']]\n}\nexport function anyOrAllPropertiesPass(obj, propValuePairs, anyOrAll) {\n    if (!propValuePairs) {\n        return true;\n    }\n    const tests = convertStringPropValuePairsToTuple(propValuePairs);\n    if (!obj) {\n        return false;\n    }\n    if (tests.length < 1) {\n        return true;\n    }\n    else {\n        const testResults = tests.filter(pvArry => {\n            const [propname, expectedVal] = pvArry;\n            if (expectedVal === false) {\n                return !obj[propname];\n            }\n            return obj[propname] === expectedVal;\n        });\n        return anyOrAll === 'all' ? testResults.length === tests.length : testResults.length > 0;\n    }\n}\nexport function allPropertiesPass(obj, propValuePairs) {\n    return anyOrAllPropertiesPass(obj, propValuePairs, 'all');\n}\nexport function anyPropertiesPass(obj, propValuePairs) {\n    return anyOrAllPropertiesPass(obj, propValuePairs, 'any');\n}\nexport function getMillisecondsFromSeconds(sec) {\n    return isNil(sec) ? 0 : Number(sec) * 1000;\n}\n//# sourceMappingURL=identity.js.map"]},"metadata":{},"sourceType":"module"}