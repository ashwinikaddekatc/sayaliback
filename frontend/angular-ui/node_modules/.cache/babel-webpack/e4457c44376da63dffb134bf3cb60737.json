{"ast":null,"code":"import _classCallCheck from \"C:/Users/HP/Desktop/new cns-portal/CNS-Portal/frontend/angular-ui/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/HP/Desktop/new cns-portal/CNS-Portal/frontend/angular-ui/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n\n/**\n * Whether the current browser supports `adoptedStyleSheets`.\n */\nexport var supportsAdoptingStyleSheets = window.ShadowRoot && (window.ShadyCSS === undefined || window.ShadyCSS.nativeShadow) && 'adoptedStyleSheets' in Document.prototype && 'replace' in CSSStyleSheet.prototype;\nvar constructionToken = Symbol();\nexport var CSSResult = /*#__PURE__*/function () {\n  function CSSResult(cssText, safeToken) {\n    _classCallCheck(this, CSSResult);\n\n    if (safeToken !== constructionToken) {\n      throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n    }\n\n    this.cssText = cssText;\n  } // Note, this is a getter so that it's lazy. In practice, this means\n  // stylesheets are not created until the first element instance is made.\n\n\n  _createClass(CSSResult, [{\n    key: \"styleSheet\",\n    get: function get() {\n      if (this._styleSheet === undefined) {\n        // Note, if `supportsAdoptingStyleSheets` is true then we assume\n        // CSSStyleSheet is constructable.\n        if (supportsAdoptingStyleSheets) {\n          this._styleSheet = new CSSStyleSheet();\n\n          this._styleSheet.replaceSync(this.cssText);\n        } else {\n          this._styleSheet = null;\n        }\n      }\n\n      return this._styleSheet;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this.cssText;\n    }\n  }]);\n\n  return CSSResult;\n}();\n/**\n * Wrap a value for interpolation in a [[`css`]] tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\n\nexport var unsafeCSS = function unsafeCSS(value) {\n  return new CSSResult(String(value), constructionToken);\n};\n\nvar textFromCSSResult = function textFromCSSResult(value) {\n  if (value instanceof CSSResult) {\n    return value.cssText;\n  } else if (typeof value === 'number') {\n    return value;\n  } else {\n    throw new Error(\"Value passed to 'css' function must be a 'css' function result: \".concat(value, \". Use 'unsafeCSS' to pass non-literal values, but\\n            take care to ensure page security.\"));\n  }\n};\n/**\n * Template tag which which can be used with LitElement's [[LitElement.styles |\n * `styles`]] property to set element styles. For security reasons, only literal\n * string values may be used. To incorporate non-literal values [[`unsafeCSS`]]\n * may be used inside a template string part.\n */\n\n\nexport var css = function css(strings) {\n  for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    values[_key - 1] = arguments[_key];\n  }\n\n  var cssText = values.reduce(function (acc, v, idx) {\n    return acc + textFromCSSResult(v) + strings[idx + 1];\n  }, strings[0]);\n  return new CSSResult(cssText, constructionToken);\n}; //# sourceMappingURL=css-tag.js.map","map":{"version":3,"sources":["C:/Users/HP/Desktop/new cns-portal/CNS-Portal/frontend/angular-ui/node_modules/lit-element/lib/css-tag.js"],"names":["supportsAdoptingStyleSheets","window","ShadowRoot","ShadyCSS","undefined","nativeShadow","Document","prototype","CSSStyleSheet","constructionToken","Symbol","CSSResult","cssText","safeToken","Error","_styleSheet","replaceSync","unsafeCSS","value","String","textFromCSSResult","css","strings","values","reduce","acc","v","idx"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA,OAAO,IAAMA,2BAA2B,GAAIC,MAAM,CAACC,UAAR,KACtCD,MAAM,CAACE,QAAP,KAAoBC,SAApB,IAAiCH,MAAM,CAACE,QAAP,CAAgBE,YADX,KAEtC,wBAAwBC,QAAQ,CAACC,SAFK,IAGtC,aAAaC,aAAa,CAACD,SAHzB;AAIP,IAAME,iBAAiB,GAAGC,MAAM,EAAhC;AACA,WAAaC,SAAb;AACI,qBAAYC,OAAZ,EAAqBC,SAArB,EAAgC;AAAA;;AAC5B,QAAIA,SAAS,KAAKJ,iBAAlB,EAAqC;AACjC,YAAM,IAAIK,KAAJ,CAAU,mEAAV,CAAN;AACH;;AACD,SAAKF,OAAL,GAAeA,OAAf;AACH,GANL,CAOI;AACA;;;AARJ;AAAA;AAAA,SASI,eAAiB;AACb,UAAI,KAAKG,WAAL,KAAqBX,SAAzB,EAAoC;AAChC;AACA;AACA,YAAIJ,2BAAJ,EAAiC;AAC7B,eAAKe,WAAL,GAAmB,IAAIP,aAAJ,EAAnB;;AACA,eAAKO,WAAL,CAAiBC,WAAjB,CAA6B,KAAKJ,OAAlC;AACH,SAHD,MAIK;AACD,eAAKG,WAAL,GAAmB,IAAnB;AACH;AACJ;;AACD,aAAO,KAAKA,WAAZ;AACH;AAtBL;AAAA;AAAA,WAuBI,oBAAW;AACP,aAAO,KAAKH,OAAZ;AACH;AAzBL;;AAAA;AAAA;AA2BA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMK,SAAS,GAAG,SAAZA,SAAY,CAACC,KAAD,EAAW;AAChC,SAAO,IAAIP,SAAJ,CAAcQ,MAAM,CAACD,KAAD,CAApB,EAA6BT,iBAA7B,CAAP;AACH,CAFM;;AAGP,IAAMW,iBAAiB,GAAG,SAApBA,iBAAoB,CAACF,KAAD,EAAW;AACjC,MAAIA,KAAK,YAAYP,SAArB,EAAgC;AAC5B,WAAOO,KAAK,CAACN,OAAb;AACH,GAFD,MAGK,IAAI,OAAOM,KAAP,KAAiB,QAArB,EAA+B;AAChC,WAAOA,KAAP;AACH,GAFI,MAGA;AACD,UAAM,IAAIJ,KAAJ,2EAA6EI,KAA7E,uGAAN;AAEH;AACJ,CAXD;AAYA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,IAAMG,GAAG,GAAG,SAANA,GAAM,CAACC,OAAD,EAAwB;AAAA,oCAAXC,MAAW;AAAXA,IAAAA,MAAW;AAAA;;AACvC,MAAMX,OAAO,GAAGW,MAAM,CAACC,MAAP,CAAc,UAACC,GAAD,EAAMC,CAAN,EAASC,GAAT;AAAA,WAAiBF,GAAG,GAAGL,iBAAiB,CAACM,CAAD,CAAvB,GAA6BJ,OAAO,CAACK,GAAG,GAAG,CAAP,CAArD;AAAA,GAAd,EAA8EL,OAAO,CAAC,CAAD,CAArF,CAAhB;AACA,SAAO,IAAIX,SAAJ,CAAcC,OAAd,EAAuBH,iBAAvB,CAAP;AACH,CAHM,C,CAIP","sourcesContent":["/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n/**\n * Whether the current browser supports `adoptedStyleSheets`.\n */\nexport const supportsAdoptingStyleSheets = (window.ShadowRoot) &&\n    (window.ShadyCSS === undefined || window.ShadyCSS.nativeShadow) &&\n    ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `supportsAdoptingStyleSheets` is true then we assume\n            // CSSStyleSheet is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a [[`css`]] tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else if (typeof value === 'number') {\n        return value;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's [[LitElement.styles |\n * `styles`]] property to set element styles. For security reasons, only literal\n * string values may be used. To incorporate non-literal values [[`unsafeCSS`]]\n * may be used inside a template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map"]},"metadata":{},"sourceType":"module"}