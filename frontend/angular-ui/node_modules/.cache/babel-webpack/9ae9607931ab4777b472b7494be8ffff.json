{"ast":null,"code":"/**\r\n * @license\r\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at\r\n * http://polymer.github.io/LICENSE.txt\r\n * The complete set of authors may be found at\r\n * http://polymer.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at\r\n * http://polymer.github.io/CONTRIBUTORS.txt\r\n * Code distributed by Google as part of the polymer project is also\r\n * subject to an additional IP rights grant found at\r\n * http://polymer.github.io/PATENTS.txt\r\n */\nimport { marker, Template } from './template.js';\n/**\r\n * The default TemplateFactory which caches Templates keyed on\r\n * result.type and result.strings.\r\n */\n\nexport function templateFactory(result) {\n  var templateCache = templateCaches.get(result.type);\n\n  if (templateCache === undefined) {\n    templateCache = {\n      stringsArray: new WeakMap(),\n      keyString: new Map()\n    };\n    templateCaches.set(result.type, templateCache);\n  }\n\n  var template = templateCache.stringsArray.get(result.strings);\n\n  if (template !== undefined) {\n    return template;\n  } // If the TemplateStringsArray is new, generate a key from the strings\n  // This key is shared between all templates with identical content\n\n\n  var key = result.strings.join(marker); // Check if we already have a Template for this key\n\n  template = templateCache.keyString.get(key);\n\n  if (template === undefined) {\n    // If we have not seen this key before, create a new Template\n    template = new Template(result, result.getTemplateElement()); // Cache the Template for this key\n\n    templateCache.keyString.set(key, template);\n  } // Cache all future queries for this TemplateStringsArray\n\n\n  templateCache.stringsArray.set(result.strings, template);\n  return template;\n}\nexport var templateCaches = new Map(); //# sourceMappingURL=template-factory.js.map","map":{"version":3,"sources":["C:/Users/hp/OneDrive/Desktop/19portal/CNS-Portal/frontend/angular-ui/node_modules/lit-html/lib/template-factory.js"],"names":["marker","Template","templateFactory","result","templateCache","templateCaches","get","type","undefined","stringsArray","WeakMap","keyString","Map","set","template","strings","key","join","getTemplateElement"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,eAAjC;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,eAAT,CAAyBC,MAAzB,EAAiC;AACpC,MAAIC,aAAa,GAAGC,cAAc,CAACC,GAAf,CAAmBH,MAAM,CAACI,IAA1B,CAApB;;AACA,MAAIH,aAAa,KAAKI,SAAtB,EAAiC;AAC7BJ,IAAAA,aAAa,GAAG;AACZK,MAAAA,YAAY,EAAE,IAAIC,OAAJ,EADF;AAEZC,MAAAA,SAAS,EAAE,IAAIC,GAAJ;AAFC,KAAhB;AAIAP,IAAAA,cAAc,CAACQ,GAAf,CAAmBV,MAAM,CAACI,IAA1B,EAAgCH,aAAhC;AACH;;AACD,MAAIU,QAAQ,GAAGV,aAAa,CAACK,YAAd,CAA2BH,GAA3B,CAA+BH,MAAM,CAACY,OAAtC,CAAf;;AACA,MAAID,QAAQ,KAAKN,SAAjB,EAA4B;AACxB,WAAOM,QAAP;AACH,GAZmC,CAapC;AACA;;;AACA,MAAME,GAAG,GAAGb,MAAM,CAACY,OAAP,CAAeE,IAAf,CAAoBjB,MAApB,CAAZ,CAfoC,CAgBpC;;AACAc,EAAAA,QAAQ,GAAGV,aAAa,CAACO,SAAd,CAAwBL,GAAxB,CAA4BU,GAA5B,CAAX;;AACA,MAAIF,QAAQ,KAAKN,SAAjB,EAA4B;AACxB;AACAM,IAAAA,QAAQ,GAAG,IAAIb,QAAJ,CAAaE,MAAb,EAAqBA,MAAM,CAACe,kBAAP,EAArB,CAAX,CAFwB,CAGxB;;AACAd,IAAAA,aAAa,CAACO,SAAd,CAAwBE,GAAxB,CAA4BG,GAA5B,EAAiCF,QAAjC;AACH,GAvBmC,CAwBpC;;;AACAV,EAAAA,aAAa,CAACK,YAAd,CAA2BI,GAA3B,CAA+BV,MAAM,CAACY,OAAtC,EAA+CD,QAA/C;AACA,SAAOA,QAAP;AACH;AACD,OAAO,IAAMT,cAAc,GAAG,IAAIO,GAAJ,EAAvB,C,CACP","sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at\r\n * http://polymer.github.io/LICENSE.txt\r\n * The complete set of authors may be found at\r\n * http://polymer.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at\r\n * http://polymer.github.io/CONTRIBUTORS.txt\r\n * Code distributed by Google as part of the polymer project is also\r\n * subject to an additional IP rights grant found at\r\n * http://polymer.github.io/PATENTS.txt\r\n */\r\nimport { marker, Template } from './template.js';\r\n/**\r\n * The default TemplateFactory which caches Templates keyed on\r\n * result.type and result.strings.\r\n */\r\nexport function templateFactory(result) {\r\n    let templateCache = templateCaches.get(result.type);\r\n    if (templateCache === undefined) {\r\n        templateCache = {\r\n            stringsArray: new WeakMap(),\r\n            keyString: new Map()\r\n        };\r\n        templateCaches.set(result.type, templateCache);\r\n    }\r\n    let template = templateCache.stringsArray.get(result.strings);\r\n    if (template !== undefined) {\r\n        return template;\r\n    }\r\n    // If the TemplateStringsArray is new, generate a key from the strings\r\n    // This key is shared between all templates with identical content\r\n    const key = result.strings.join(marker);\r\n    // Check if we already have a Template for this key\r\n    template = templateCache.keyString.get(key);\r\n    if (template === undefined) {\r\n        // If we have not seen this key before, create a new Template\r\n        template = new Template(result, result.getTemplateElement());\r\n        // Cache the Template for this key\r\n        templateCache.keyString.set(key, template);\r\n    }\r\n    // Cache all future queries for this TemplateStringsArray\r\n    templateCache.stringsArray.set(result.strings, template);\r\n    return template;\r\n}\r\nexport const templateCaches = new Map();\r\n//# sourceMappingURL=template-factory.js.map"]},"metadata":{},"sourceType":"module"}