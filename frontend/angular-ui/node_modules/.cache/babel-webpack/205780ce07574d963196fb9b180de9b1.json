{"ast":null,"code":"import _classCallCheck from \"C:/Users/HP/Desktop/CNS-Portal-ashwini15523/frontend/angular-ui/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/HP/Desktop/CNS-Portal-ashwini15523/frontend/angular-ui/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n\n/**\n * Subscription returned from EventSubject.\n * Enables subscriber to un-subscribe from source.\n */\nvar InternalEventSubscription = /*#__PURE__*/function () {\n  function InternalEventSubscription(fn, subscriptions) {\n    _classCallCheck(this, InternalEventSubscription);\n\n    this.fn = fn;\n    this.subscriptions = subscriptions;\n  }\n  /** Use during disconnectedCallback to stop receiving events */\n\n\n  _createClass(InternalEventSubscription, [{\n    key: \"unsubscribe\",\n    value: function unsubscribe() {\n      var index = this.subscriptions.indexOf(this);\n\n      if (index !== -1) {\n        this.subscriptions.splice(index, 1);\n      }\n    }\n  }]);\n\n  return InternalEventSubscription;\n}();\n/**\n * Basic Subject implementing Observer style pattern.\n * Use to trigger and communicate outgoing async updates.\n *\n * Used as a lightweight alternative to rxjs style subject.\n * RxJS pulls in too much code for our performance standards\n * and would require additional peer dependencies for the\n * host application to take on.\n *\n * @internal\n */\n\n\nexport var EventSubject = /*#__PURE__*/function () {\n  function EventSubject() {\n    _classCallCheck(this, EventSubject);\n\n    this.subscriptions = [];\n  }\n  /** Subscribe to receive event value updates */\n\n\n  _createClass(EventSubject, [{\n    key: \"subscribe\",\n    value: function subscribe(fn) {\n      var sub = new InternalEventSubscription(fn, this.subscriptions);\n      this.subscriptions.push(sub);\n      return sub;\n    }\n    /** Use to trigger and send an event to all active subscribers */\n\n  }, {\n    key: \"emit\",\n    value: function emit(value) {\n      this.subscriptions.forEach(function (sub) {\n        return sub.fn(value);\n      });\n    }\n    /** Cast Subject to Observable subtype to prevent access to `emit` */\n\n  }, {\n    key: \"toEventObservable\",\n    value: function toEventObservable() {\n      return this;\n    }\n  }]);\n\n  return EventSubject;\n}(); //# sourceMappingURL=event-subject.js.map","map":{"version":3,"sources":["C:/Users/HP/Desktop/CNS-Portal-ashwini15523/frontend/angular-ui/node_modules/@cds/core/internal/utils/event-subject.js"],"names":["InternalEventSubscription","fn","subscriptions","index","indexOf","splice","EventSubject","sub","push","value","forEach"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;IACMA,yB;AACF,qCAAYC,EAAZ,EAAgBC,aAAhB,EAA+B;AAAA;;AAC3B,SAAKD,EAAL,GAAUA,EAAV;AACA,SAAKC,aAAL,GAAqBA,aAArB;AACH;AACD;;;;;WACA,uBAAc;AACV,UAAMC,KAAK,GAAG,KAAKD,aAAL,CAAmBE,OAAnB,CAA2B,IAA3B,CAAd;;AACA,UAAID,KAAK,KAAK,CAAC,CAAf,EAAkB;AACd,aAAKD,aAAL,CAAmBG,MAAnB,CAA0BF,KAA1B,EAAiC,CAAjC;AACH;AACJ;;;;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,WAAaG,YAAb;AACI,0BAAc;AAAA;;AACV,SAAKJ,aAAL,GAAqB,EAArB;AACH;AACD;;;AAJJ;AAAA;AAAA,WAKI,mBAAUD,EAAV,EAAc;AACV,UAAMM,GAAG,GAAG,IAAIP,yBAAJ,CAA8BC,EAA9B,EAAkC,KAAKC,aAAvC,CAAZ;AACA,WAAKA,aAAL,CAAmBM,IAAnB,CAAwBD,GAAxB;AACA,aAAOA,GAAP;AACH;AACD;;AAVJ;AAAA;AAAA,WAWI,cAAKE,KAAL,EAAY;AACR,WAAKP,aAAL,CAAmBQ,OAAnB,CAA2B,UAAAH,GAAG;AAAA,eAAIA,GAAG,CAACN,EAAJ,CAAOQ,KAAP,CAAJ;AAAA,OAA9B;AACH;AACD;;AAdJ;AAAA;AAAA,WAeI,6BAAoB;AAChB,aAAO,IAAP;AACH;AAjBL;;AAAA;AAAA,I,CAmBA","sourcesContent":["/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\n/**\n * Subscription returned from EventSubject.\n * Enables subscriber to un-subscribe from source.\n */\nclass InternalEventSubscription {\n    constructor(fn, subscriptions) {\n        this.fn = fn;\n        this.subscriptions = subscriptions;\n    }\n    /** Use during disconnectedCallback to stop receiving events */\n    unsubscribe() {\n        const index = this.subscriptions.indexOf(this);\n        if (index !== -1) {\n            this.subscriptions.splice(index, 1);\n        }\n    }\n}\n/**\n * Basic Subject implementing Observer style pattern.\n * Use to trigger and communicate outgoing async updates.\n *\n * Used as a lightweight alternative to rxjs style subject.\n * RxJS pulls in too much code for our performance standards\n * and would require additional peer dependencies for the\n * host application to take on.\n *\n * @internal\n */\nexport class EventSubject {\n    constructor() {\n        this.subscriptions = [];\n    }\n    /** Subscribe to receive event value updates */\n    subscribe(fn) {\n        const sub = new InternalEventSubscription(fn, this.subscriptions);\n        this.subscriptions.push(sub);\n        return sub;\n    }\n    /** Use to trigger and send an event to all active subscribers */\n    emit(value) {\n        this.subscriptions.forEach(sub => sub.fn(value));\n    }\n    /** Cast Subject to Observable subtype to prevent access to `emit` */\n    toEventObservable() {\n        return this;\n    }\n}\n//# sourceMappingURL=event-subject.js.map"]},"metadata":{},"sourceType":"module"}