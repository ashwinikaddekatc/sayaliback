{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * True if the custom elements polyfill is in use.\n */\nexport var isCEPolyfill = typeof window !== 'undefined' && window.customElements != null && window.customElements.polyfillWrapFlushCallback !== undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\n\nexport var reparentNodes = function reparentNodes(container, start) {\n  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n  var before = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n  while (start !== end) {\n    var n = start.nextSibling;\n    container.insertBefore(start, before);\n    start = n;\n  }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\n\nexport var removeNodes = function removeNodes(container, start) {\n  var end = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n  while (start !== end) {\n    var n = start.nextSibling;\n    container.removeChild(start);\n    start = n;\n  }\n}; //# sourceMappingURL=dom.js.map","map":{"version":3,"sources":["C:/Users/HP/Desktop/CNS-Portal-ashwini15523/frontend/angular-ui/node_modules/lit-html/lib/dom.js"],"names":["isCEPolyfill","window","customElements","polyfillWrapFlushCallback","undefined","reparentNodes","container","start","end","before","n","nextSibling","insertBefore","removeNodes","removeChild"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA,OAAO,IAAMA,YAAY,GAAG,OAAOC,MAAP,KAAkB,WAAlB,IACxBA,MAAM,CAACC,cAAP,IAAyB,IADD,IAExBD,MAAM,CAACC,cAAP,CAAsBC,yBAAtB,KACIC,SAHD;AAIP;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,SAAD,EAAYC,KAAZ,EAAiD;AAAA,MAA9BC,GAA8B,uEAAxB,IAAwB;AAAA,MAAlBC,MAAkB,uEAAT,IAAS;;AAC1E,SAAOF,KAAK,KAAKC,GAAjB,EAAsB;AAClB,QAAME,CAAC,GAAGH,KAAK,CAACI,WAAhB;AACAL,IAAAA,SAAS,CAACM,YAAV,CAAuBL,KAAvB,EAA8BE,MAA9B;AACAF,IAAAA,KAAK,GAAGG,CAAR;AACH;AACJ,CANM;AAOP;AACA;AACA;AACA;;AACA,OAAO,IAAMG,WAAW,GAAG,SAAdA,WAAc,CAACP,SAAD,EAAYC,KAAZ,EAAkC;AAAA,MAAfC,GAAe,uEAAT,IAAS;;AACzD,SAAOD,KAAK,KAAKC,GAAjB,EAAsB;AAClB,QAAME,CAAC,GAAGH,KAAK,CAACI,WAAhB;AACAL,IAAAA,SAAS,CAACQ,WAAV,CAAsBP,KAAtB;AACAA,IAAAA,KAAK,GAAGG,CAAR;AACH;AACJ,CANM,C,CAOP","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = typeof window !== 'undefined' &&\n    window.customElements != null &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map"]},"metadata":{},"sourceType":"module"}