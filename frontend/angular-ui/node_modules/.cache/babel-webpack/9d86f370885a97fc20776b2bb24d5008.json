{"ast":null,"code":"import _classCallCheck from \"C:/Users/HP/Desktop/new cns-portal/CNS-Portal/frontend/angular-ui/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/HP/Desktop/new cns-portal/CNS-Portal/frontend/angular-ui/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { hasAttributeAndIsNotEmpty, setAttributes } from '../utils/dom.js';\nimport { arrayTail } from '../utils/array.js';\n/**\n * FocusTrapTracker is a static class that keeps track of the active element with focus trap,\n * in case there are multiple in a given page.\n */\n\nexport var CDS_FOCUS_TRAP_ID_ATTR = 'focus-trap-id';\nexport var CDS_FOCUS_TRAP_DOCUMENT_ATTR = 'cds-focus-trap-ids';\nexport var FocusTrapTracker = /*#__PURE__*/function () {\n  function FocusTrapTracker() {\n    _classCallCheck(this, FocusTrapTracker);\n  }\n\n  _createClass(FocusTrapTracker, null, [{\n    key: \"getDocroot\",\n    value: function getDocroot() {\n      return document.documentElement;\n    }\n  }, {\n    key: \"getTrapIds\",\n    value: function getTrapIds() {\n      var docroot = this.getDocroot();\n\n      if (hasAttributeAndIsNotEmpty(docroot, CDS_FOCUS_TRAP_DOCUMENT_ATTR)) {\n        // the function in the conditional handles all nil references. zero chance of null making it through here.\n        var myAttribute = docroot.getAttribute(CDS_FOCUS_TRAP_DOCUMENT_ATTR) || ''; // TS forcing us to write an unreachable codepath. this is where monads would be useful.\n\n        return myAttribute === '' ? [] : myAttribute.split(' ');\n      } else {\n        return [];\n      }\n    }\n  }, {\n    key: \"setTrapIds\",\n    value: function setTrapIds(trapIds) {\n      var myTrapIds = trapIds.length > 0 ? trapIds.join(' ') : false;\n      setAttributes(this.getDocroot(), [CDS_FOCUS_TRAP_DOCUMENT_ATTR, myTrapIds]);\n    }\n  }, {\n    key: \"setCurrent\",\n    value: function setCurrent(myTrapId) {\n      if (myTrapId === '') {\n        return;\n      }\n\n      var trapIds = this.getTrapIds(); // this is a just-in-case situation. we should never encounter it.\n      // but in the event that we do, this guard will ensure no id is in the\n      // focus trap list more than once.\n\n      if (arrayTail(trapIds) === myTrapId) {\n        return;\n      }\n\n      var existingIndex = trapIds.indexOf(myTrapId);\n\n      if (existingIndex > -1) {\n        trapIds.splice(existingIndex, 1);\n      }\n\n      trapIds.push(myTrapId);\n      this.setTrapIds(trapIds);\n    }\n  }, {\n    key: \"activatePreviousCurrent\",\n    value: function activatePreviousCurrent() {\n      var trapIds = this.getTrapIds();\n      trapIds.pop();\n      this.setTrapIds(trapIds);\n    }\n  }, {\n    key: \"getCurrentTrapId\",\n    value: function getCurrentTrapId() {\n      return arrayTail(this.getTrapIds()) || '';\n    }\n  }, {\n    key: \"getCurrent\",\n    value: function getCurrent() {\n      var docroot = this.getDocroot();\n      var currentId = this.getCurrentTrapId();\n\n      if (currentId !== '') {\n        return docroot.querySelector(\"[\".concat(CDS_FOCUS_TRAP_ID_ATTR, \"=\\\"\").concat(currentId, \"\\\"]\"));\n      } else {\n        return null;\n      }\n    }\n  }]);\n\n  return FocusTrapTracker;\n}(); //# sourceMappingURL=focus-trap-tracker.service.js.map","map":{"version":3,"sources":["C:/Users/HP/Desktop/new cns-portal/CNS-Portal/frontend/angular-ui/node_modules/@cds/core/internal/services/focus-trap-tracker.service.js"],"names":["hasAttributeAndIsNotEmpty","setAttributes","arrayTail","CDS_FOCUS_TRAP_ID_ATTR","CDS_FOCUS_TRAP_DOCUMENT_ATTR","FocusTrapTracker","document","documentElement","docroot","getDocroot","myAttribute","getAttribute","split","trapIds","myTrapIds","length","join","myTrapId","getTrapIds","existingIndex","indexOf","splice","push","setTrapIds","pop","currentId","getCurrentTrapId","querySelector"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,yBAAT,EAAoCC,aAApC,QAAyD,iBAAzD;AACA,SAASC,SAAT,QAA0B,mBAA1B;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,sBAAsB,GAAG,eAA/B;AACP,OAAO,IAAMC,4BAA4B,GAAG,oBAArC;AACP,WAAaC,gBAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA,WACI,sBAAoB;AAChB,aAAOC,QAAQ,CAACC,eAAhB;AACH;AAHL;AAAA;AAAA,WAII,sBAAoB;AAChB,UAAMC,OAAO,GAAG,KAAKC,UAAL,EAAhB;;AACA,UAAIT,yBAAyB,CAACQ,OAAD,EAAUJ,4BAAV,CAA7B,EAAsE;AAClE;AACA,YAAMM,WAAW,GAAGF,OAAO,CAACG,YAAR,CAAqBP,4BAArB,KAAsD,EAA1E,CAFkE,CAGlE;;AACA,eAAOM,WAAW,KAAK,EAAhB,GAAqB,EAArB,GAA0BA,WAAW,CAACE,KAAZ,CAAkB,GAAlB,CAAjC;AACH,OALD,MAMK;AACD,eAAO,EAAP;AACH;AACJ;AAfL;AAAA;AAAA,WAgBI,oBAAkBC,OAAlB,EAA2B;AACvB,UAAMC,SAAS,GAAGD,OAAO,CAACE,MAAR,GAAiB,CAAjB,GAAqBF,OAAO,CAACG,IAAR,CAAa,GAAb,CAArB,GAAyC,KAA3D;AACAf,MAAAA,aAAa,CAAC,KAAKQ,UAAL,EAAD,EAAoB,CAACL,4BAAD,EAA+BU,SAA/B,CAApB,CAAb;AACH;AAnBL;AAAA;AAAA,WAoBI,oBAAkBG,QAAlB,EAA4B;AACxB,UAAIA,QAAQ,KAAK,EAAjB,EAAqB;AACjB;AACH;;AACD,UAAMJ,OAAO,GAAG,KAAKK,UAAL,EAAhB,CAJwB,CAKxB;AACA;AACA;;AACA,UAAIhB,SAAS,CAACW,OAAD,CAAT,KAAuBI,QAA3B,EAAqC;AACjC;AACH;;AACD,UAAME,aAAa,GAAGN,OAAO,CAACO,OAAR,CAAgBH,QAAhB,CAAtB;;AACA,UAAIE,aAAa,GAAG,CAAC,CAArB,EAAwB;AACpBN,QAAAA,OAAO,CAACQ,MAAR,CAAeF,aAAf,EAA8B,CAA9B;AACH;;AACDN,MAAAA,OAAO,CAACS,IAAR,CAAaL,QAAb;AACA,WAAKM,UAAL,CAAgBV,OAAhB;AACH;AArCL;AAAA;AAAA,WAsCI,mCAAiC;AAC7B,UAAMA,OAAO,GAAG,KAAKK,UAAL,EAAhB;AACAL,MAAAA,OAAO,CAACW,GAAR;AACA,WAAKD,UAAL,CAAgBV,OAAhB;AACH;AA1CL;AAAA;AAAA,WA2CI,4BAA0B;AACtB,aAAOX,SAAS,CAAC,KAAKgB,UAAL,EAAD,CAAT,IAAgC,EAAvC;AACH;AA7CL;AAAA;AAAA,WA8CI,sBAAoB;AAChB,UAAMV,OAAO,GAAG,KAAKC,UAAL,EAAhB;AACA,UAAMgB,SAAS,GAAG,KAAKC,gBAAL,EAAlB;;AACA,UAAID,SAAS,KAAK,EAAlB,EAAsB;AAClB,eAAOjB,OAAO,CAACmB,aAAR,YAA0BxB,sBAA1B,gBAAqDsB,SAArD,SAAP;AACH,OAFD,MAGK;AACD,eAAO,IAAP;AACH;AACJ;AAvDL;;AAAA;AAAA,I,CAyDA","sourcesContent":["/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { hasAttributeAndIsNotEmpty, setAttributes } from '../utils/dom.js';\nimport { arrayTail } from '../utils/array.js';\n/**\n * FocusTrapTracker is a static class that keeps track of the active element with focus trap,\n * in case there are multiple in a given page.\n */\nexport const CDS_FOCUS_TRAP_ID_ATTR = 'focus-trap-id';\nexport const CDS_FOCUS_TRAP_DOCUMENT_ATTR = 'cds-focus-trap-ids';\nexport class FocusTrapTracker {\n    static getDocroot() {\n        return document.documentElement;\n    }\n    static getTrapIds() {\n        const docroot = this.getDocroot();\n        if (hasAttributeAndIsNotEmpty(docroot, CDS_FOCUS_TRAP_DOCUMENT_ATTR)) {\n            // the function in the conditional handles all nil references. zero chance of null making it through here.\n            const myAttribute = docroot.getAttribute(CDS_FOCUS_TRAP_DOCUMENT_ATTR) || '';\n            // TS forcing us to write an unreachable codepath. this is where monads would be useful.\n            return myAttribute === '' ? [] : myAttribute.split(' ');\n        }\n        else {\n            return [];\n        }\n    }\n    static setTrapIds(trapIds) {\n        const myTrapIds = trapIds.length > 0 ? trapIds.join(' ') : false;\n        setAttributes(this.getDocroot(), [CDS_FOCUS_TRAP_DOCUMENT_ATTR, myTrapIds]);\n    }\n    static setCurrent(myTrapId) {\n        if (myTrapId === '') {\n            return;\n        }\n        const trapIds = this.getTrapIds();\n        // this is a just-in-case situation. we should never encounter it.\n        // but in the event that we do, this guard will ensure no id is in the\n        // focus trap list more than once.\n        if (arrayTail(trapIds) === myTrapId) {\n            return;\n        }\n        const existingIndex = trapIds.indexOf(myTrapId);\n        if (existingIndex > -1) {\n            trapIds.splice(existingIndex, 1);\n        }\n        trapIds.push(myTrapId);\n        this.setTrapIds(trapIds);\n    }\n    static activatePreviousCurrent() {\n        const trapIds = this.getTrapIds();\n        trapIds.pop();\n        this.setTrapIds(trapIds);\n    }\n    static getCurrentTrapId() {\n        return arrayTail(this.getTrapIds()) || '';\n    }\n    static getCurrent() {\n        const docroot = this.getDocroot();\n        const currentId = this.getCurrentTrapId();\n        if (currentId !== '') {\n            return docroot.querySelector(`[${CDS_FOCUS_TRAP_ID_ATTR}=\"${currentId}\"]`);\n        }\n        else {\n            return null;\n        }\n    }\n}\n//# sourceMappingURL=focus-trap-tracker.service.js.map"]},"metadata":{},"sourceType":"module"}