{"ast":null,"code":"/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { KeyCodeService } from '../services/keycodes.service.js';\n/**\n * keyWasEvented() checks to see if a given key is part of any KeyboardEvent it is passed.\n */\n\nexport function keyWasEvented(evt, whichKey) {\n  // evt.key support goes all the way back to IE9; we don't need evt.keyCode for IE support!\n  return KeyCodeService.getCode(whichKey) === evt.key;\n}\n/**\n * checkModifierKey() tests if a special key (Ctrl, Alt, Meta, Shift) part of a KeyboardEvent.\n */\n\nfunction checkModifierKey(evt, key) {\n  switch (key) {\n    case 'ctrl':\n      return evt.ctrlKey;\n\n    case 'alt':\n      return evt.altKey;\n\n    case 'shift':\n      return evt.shiftKey;\n\n    case 'cmd':\n    case 'win':\n    case 'meta':\n      return evt.metaKey;\n\n    default:\n      return false;\n  }\n} // handlers -> single keys or any of a collection of keys\n\n/**\n * onKey() takes a single key and fires a handler if that key is part of\n * the KeyboardEvent it was passed.\n */\n\n\nexport function onKey(whichKey, evt, handler) {\n  if (keyWasEvented(evt, whichKey)) {\n    handler();\n  }\n}\n/**\n * onAnyKey() takes an array of keys and fires a handler if any of the keys are part of\n * the KeyboardEvent it was passed.\n */\n\nexport function onAnyKey(whichKeys, evt, handler) {\n  var eventedKeys = whichKeys.filter(function (k) {\n    return keyWasEvented(evt, k);\n  });\n\n  if (eventedKeys.length > 0) {\n    handler();\n  }\n} // key combos\n\n/**\n * onKeyCombo() takes a string representation of a combination of keys and modifier keys such as\n * 'ctrl+shift+a'.\n *\n * onKeyCombo() does not make accommodation for the '+' symbol in a key combo. Consider using 'ctrl+shift+='.\n *\n * onKeyCombo() accounts for 'cmd', 'win', and 'meta' keys inside keycombos. 'cmd+K', 'win+K', and 'meta+K'\n * are all the same thing to onKeyCombo().\n */\n\nexport function onKeyCombo(whichKeyCombo, evt, handler) {\n  if (wereModifierComboKeysPressed(whichKeyCombo, evt) && wereNonModifierComboKeysPressed(whichKeyCombo, evt)) {\n    handler();\n  }\n} // key combo helpers\n\nvar modifierKeys = ['ctrl', 'alt', 'shift', 'meta', 'cmd', 'win'];\n/**\n * getModifierKeysFromKeyCombo() takes a keycombo string and returns an array with all of the\n * special keys in the keycombo.\n */\n\nexport function getModifierKeysFromKeyCombo(keyCombo) {\n  // note: at some point, we may have to handle a situation of 'ctrl++' or 'ctrl+plus'\n  // it's unlikely so i'm not over-coding for it right now\n  return keyCombo.split('+').filter(function (k) {\n    return modifierKeys.indexOf(k) > -1;\n  });\n}\n/**\n * removeModifierKeysFromKeyCombo() takes a keycombo string and returns an array with all of the\n * non-special keys in the keycombo.\n */\n\nexport function removeModifierKeysFromKeyCombo(keyCombo) {\n  return keyCombo.split('+').filter(function (k) {\n    return modifierKeys.indexOf(k) < 0;\n  });\n}\n/**\n * wereModifierComboKeysPressed() tests if ALL special keys (Ctrl, Alt, Meta, Shift) were included\n * as part of a KeyboardEvent keycombo.\n *\n * @private\n *\n */\n\nfunction wereModifierComboKeysPressed(keyCombo, evt) {\n  var modifierKeyArray = getModifierKeysFromKeyCombo(keyCombo);\n\n  if (modifierKeyArray.length === 0) {\n    return true;\n  }\n\n  return modifierKeyArray.reduce(function (acc, currentKey) {\n    return acc && checkModifierKey(evt, currentKey);\n  }, true);\n}\n/**\n * wereNonModifierComboKeysPressed() tests if non-special keys (Ctrl, Alt, Meta, Shift) were included\n * as part of a KeyboardEvent.\n *\n * @private\n *\n */\n\n\nfunction wereNonModifierComboKeysPressed(keyCombo, evt) {\n  var keyArray = removeModifierKeysFromKeyCombo(keyCombo);\n\n  if (keyArray.length === 0) {\n    return true;\n  }\n\n  return keyArray.reduce(function (acc, currentKey) {\n    return acc && keyWasEvented(evt, currentKey);\n  }, true);\n} //# sourceMappingURL=keycodes.js.map","map":{"version":3,"sources":["C:/Users/HP/Desktop/CNS-Portal-ashwini15523/frontend/angular-ui/node_modules/@cds/core/internal/utils/keycodes.js"],"names":["KeyCodeService","keyWasEvented","evt","whichKey","getCode","key","checkModifierKey","ctrlKey","altKey","shiftKey","metaKey","onKey","handler","onAnyKey","whichKeys","eventedKeys","filter","k","length","onKeyCombo","whichKeyCombo","wereModifierComboKeysPressed","wereNonModifierComboKeysPressed","modifierKeys","getModifierKeysFromKeyCombo","keyCombo","split","indexOf","removeModifierKeysFromKeyCombo","modifierKeyArray","reduce","acc","currentKey","keyArray"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { KeyCodeService } from '../services/keycodes.service.js';\n/**\n * keyWasEvented() checks to see if a given key is part of any KeyboardEvent it is passed.\n */\nexport function keyWasEvented(evt, whichKey) {\n    // evt.key support goes all the way back to IE9; we don't need evt.keyCode for IE support!\n    return KeyCodeService.getCode(whichKey) === evt.key;\n}\n/**\n * checkModifierKey() tests if a special key (Ctrl, Alt, Meta, Shift) part of a KeyboardEvent.\n */\nfunction checkModifierKey(evt, key) {\n    switch (key) {\n        case 'ctrl':\n            return evt.ctrlKey;\n        case 'alt':\n            return evt.altKey;\n        case 'shift':\n            return evt.shiftKey;\n        case 'cmd':\n        case 'win':\n        case 'meta':\n            return evt.metaKey;\n        default:\n            return false;\n    }\n}\n// handlers -> single keys or any of a collection of keys\n/**\n * onKey() takes a single key and fires a handler if that key is part of\n * the KeyboardEvent it was passed.\n */\nexport function onKey(whichKey, evt, handler) {\n    if (keyWasEvented(evt, whichKey)) {\n        handler();\n    }\n}\n/**\n * onAnyKey() takes an array of keys and fires a handler if any of the keys are part of\n * the KeyboardEvent it was passed.\n */\nexport function onAnyKey(whichKeys, evt, handler) {\n    const eventedKeys = whichKeys.filter(k => {\n        return keyWasEvented(evt, k);\n    });\n    if (eventedKeys.length > 0) {\n        handler();\n    }\n}\n// key combos\n/**\n * onKeyCombo() takes a string representation of a combination of keys and modifier keys such as\n * 'ctrl+shift+a'.\n *\n * onKeyCombo() does not make accommodation for the '+' symbol in a key combo. Consider using 'ctrl+shift+='.\n *\n * onKeyCombo() accounts for 'cmd', 'win', and 'meta' keys inside keycombos. 'cmd+K', 'win+K', and 'meta+K'\n * are all the same thing to onKeyCombo().\n */\nexport function onKeyCombo(whichKeyCombo, evt, handler) {\n    if (wereModifierComboKeysPressed(whichKeyCombo, evt) && wereNonModifierComboKeysPressed(whichKeyCombo, evt)) {\n        handler();\n    }\n}\n// key combo helpers\nconst modifierKeys = ['ctrl', 'alt', 'shift', 'meta', 'cmd', 'win'];\n/**\n * getModifierKeysFromKeyCombo() takes a keycombo string and returns an array with all of the\n * special keys in the keycombo.\n */\nexport function getModifierKeysFromKeyCombo(keyCombo) {\n    // note: at some point, we may have to handle a situation of 'ctrl++' or 'ctrl+plus'\n    // it's unlikely so i'm not over-coding for it right now\n    return keyCombo.split('+').filter(k => {\n        return modifierKeys.indexOf(k) > -1;\n    });\n}\n/**\n * removeModifierKeysFromKeyCombo() takes a keycombo string and returns an array with all of the\n * non-special keys in the keycombo.\n */\nexport function removeModifierKeysFromKeyCombo(keyCombo) {\n    return keyCombo.split('+').filter(k => {\n        return modifierKeys.indexOf(k) < 0;\n    });\n}\n/**\n * wereModifierComboKeysPressed() tests if ALL special keys (Ctrl, Alt, Meta, Shift) were included\n * as part of a KeyboardEvent keycombo.\n *\n * @private\n *\n */\nfunction wereModifierComboKeysPressed(keyCombo, evt) {\n    const modifierKeyArray = getModifierKeysFromKeyCombo(keyCombo);\n    if (modifierKeyArray.length === 0) {\n        return true;\n    }\n    return modifierKeyArray.reduce((acc, currentKey) => acc && checkModifierKey(evt, currentKey), true);\n}\n/**\n * wereNonModifierComboKeysPressed() tests if non-special keys (Ctrl, Alt, Meta, Shift) were included\n * as part of a KeyboardEvent.\n *\n * @private\n *\n */\nfunction wereNonModifierComboKeysPressed(keyCombo, evt) {\n    const keyArray = removeModifierKeysFromKeyCombo(keyCombo);\n    if (keyArray.length === 0) {\n        return true;\n    }\n    return keyArray.reduce((acc, currentKey) => acc && keyWasEvented(evt, currentKey), true);\n}\n//# sourceMappingURL=keycodes.js.map"]},"metadata":{},"sourceType":"module"}