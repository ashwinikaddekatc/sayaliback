{"ast":null,"code":"/*\r\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\r\n * This software is released under MIT license.\r\n * The full license information can be found in LICENSE in the root directory of this project.\r\n */\nimport { property } from 'lit-element'; // Legacy TS Decorator\n\nfunction legacyI18n(descriptor, protoOrDescriptor, name) {\n  var desc = Object.defineProperty(protoOrDescriptor, name, descriptor);\n  return property({\n    type: Object,\n    attribute: 'cds-i18n'\n  })(desc, name);\n} // TC39 Decorators proposal\n\n\nfunction standardI18n(descriptor, element) {\n  var desc = {\n    kind: 'method',\n    placement: 'prototype',\n    key: element.key,\n    descriptor: descriptor\n  };\n  return property({\n    type: Object\n  })(desc);\n}\n/**\r\n * A property decorator which accesses a set of string values for use\r\n * inside the element's template. The values can be overridden at runtime\r\n * by changing the property value that's reflected through the attribute value.\r\n *\r\n * @example\r\n *\r\n *     class MyElement {\r\n *       @i18n()\r\n *       i18n = {\r\n *         \"open\" : \"Open my element\",\r\n *         \"close\" : \"Close my element\"\r\n *       };\r\n *     }\r\n *\r\n */\n\n\nexport function i18n() {\n  return function (protoOrDescriptor, name) {\n    var descriptor = {\n      get: function get() {\n        return this.__i18n;\n      },\n      set: function set(value) {\n        if (!this.__i18n) {\n          this.__i18n = value;\n        } else {\n          this.__i18n = Object.assign(Object.assign({}, this.__i18n), value);\n        }\n      },\n      enumerable: true,\n      configurable: true\n    };\n    return name !== undefined ? legacyI18n(descriptor, protoOrDescriptor, name) : standardI18n(descriptor, protoOrDescriptor);\n  };\n} //# sourceMappingURL=i18n.js.map","map":{"version":3,"sources":["C:/Users/hp/OneDrive/Desktop/17portalnew/CNS-Portal/frontend/angular-ui/node_modules/@cds/core/internal/decorators/i18n.js"],"names":["property","legacyI18n","descriptor","protoOrDescriptor","name","desc","Object","defineProperty","type","attribute","standardI18n","element","kind","placement","key","i18n","get","__i18n","set","value","assign","enumerable","configurable","undefined"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,QAAT,QAAyB,aAAzB,C,CACA;;AACA,SAASC,UAAT,CAAoBC,UAApB,EAAgCC,iBAAhC,EAAmDC,IAAnD,EAAyD;AACrD,MAAMC,IAAI,GAAGC,MAAM,CAACC,cAAP,CAAsBJ,iBAAtB,EAAyCC,IAAzC,EAA+CF,UAA/C,CAAb;AACA,SAAOF,QAAQ,CAAC;AAAEQ,IAAAA,IAAI,EAAEF,MAAR;AAAgBG,IAAAA,SAAS,EAAE;AAA3B,GAAD,CAAR,CAAkDJ,IAAlD,EAAwDD,IAAxD,CAAP;AACH,C,CACD;;;AACA,SAASM,YAAT,CAAsBR,UAAtB,EAAkCS,OAAlC,EAA2C;AACvC,MAAMN,IAAI,GAAG;AACTO,IAAAA,IAAI,EAAE,QADG;AAETC,IAAAA,SAAS,EAAE,WAFF;AAGTC,IAAAA,GAAG,EAAEH,OAAO,CAACG,GAHJ;AAITZ,IAAAA,UAAU,EAAVA;AAJS,GAAb;AAMA,SAAOF,QAAQ,CAAC;AAAEQ,IAAAA,IAAI,EAAEF;AAAR,GAAD,CAAR,CAA2BD,IAA3B,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASU,IAAT,GAAgB;AACnB,SAAO,UAACZ,iBAAD,EAAoBC,IAApB,EAA6B;AAChC,QAAMF,UAAU,GAAG;AACfc,MAAAA,GADe,iBACT;AACF,eAAO,KAAKC,MAAZ;AACH,OAHc;AAIfC,MAAAA,GAJe,eAIXC,KAJW,EAIJ;AACP,YAAI,CAAC,KAAKF,MAAV,EAAkB;AACd,eAAKA,MAAL,GAAcE,KAAd;AACH,SAFD,MAGK;AACD,eAAKF,MAAL,GAAcX,MAAM,CAACc,MAAP,CAAcd,MAAM,CAACc,MAAP,CAAc,EAAd,EAAkB,KAAKH,MAAvB,CAAd,EAA8CE,KAA9C,CAAd;AACH;AACJ,OAXc;AAYfE,MAAAA,UAAU,EAAE,IAZG;AAafC,MAAAA,YAAY,EAAE;AAbC,KAAnB;AAeA,WAAOlB,IAAI,KAAKmB,SAAT,GACDtB,UAAU,CAACC,UAAD,EAAaC,iBAAb,EAAgCC,IAAhC,CADT,GAEDM,YAAY,CAACR,UAAD,EAAaC,iBAAb,CAFlB;AAGH,GAnBD;AAoBH,C,CACD","sourcesContent":["/*\r\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\r\n * This software is released under MIT license.\r\n * The full license information can be found in LICENSE in the root directory of this project.\r\n */\r\nimport { property } from 'lit-element';\r\n// Legacy TS Decorator\r\nfunction legacyI18n(descriptor, protoOrDescriptor, name) {\r\n    const desc = Object.defineProperty(protoOrDescriptor, name, descriptor);\r\n    return property({ type: Object, attribute: 'cds-i18n' })(desc, name);\r\n}\r\n// TC39 Decorators proposal\r\nfunction standardI18n(descriptor, element) {\r\n    const desc = {\r\n        kind: 'method',\r\n        placement: 'prototype',\r\n        key: element.key,\r\n        descriptor,\r\n    };\r\n    return property({ type: Object })(desc);\r\n}\r\n/**\r\n * A property decorator which accesses a set of string values for use\r\n * inside the element's template. The values can be overridden at runtime\r\n * by changing the property value that's reflected through the attribute value.\r\n *\r\n * @example\r\n *\r\n *     class MyElement {\r\n *       @i18n()\r\n *       i18n = {\r\n *         \"open\" : \"Open my element\",\r\n *         \"close\" : \"Close my element\"\r\n *       };\r\n *     }\r\n *\r\n */\r\nexport function i18n() {\r\n    return (protoOrDescriptor, name) => {\r\n        const descriptor = {\r\n            get() {\r\n                return this.__i18n;\r\n            },\r\n            set(value) {\r\n                if (!this.__i18n) {\r\n                    this.__i18n = value;\r\n                }\r\n                else {\r\n                    this.__i18n = Object.assign(Object.assign({}, this.__i18n), value);\r\n                }\r\n            },\r\n            enumerable: true,\r\n            configurable: true,\r\n        };\r\n        return name !== undefined\r\n            ? legacyI18n(descriptor, protoOrDescriptor, name)\r\n            : standardI18n(descriptor, protoOrDescriptor);\r\n    };\r\n}\r\n//# sourceMappingURL=i18n.js.map"]},"metadata":{},"sourceType":"module"}