{"ast":null,"code":"/*\r\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\r\n * This software is released under MIT license.\r\n * The full license information can be found in LICENSE in the root directory of this project.\r\n */\n// Legacy TS Decorator\nfunction legacyEvent(descriptor, protoOrDescriptor, name) {\n  Object.defineProperty(protoOrDescriptor, name, descriptor);\n} // TC39 Decorators proposal\n\n\nfunction standardEvent(descriptor, element) {\n  return {\n    kind: 'method',\n    placement: 'prototype',\n    key: element.key,\n    descriptor: descriptor\n  };\n}\n/**\r\n * Appends a global `<style>` tag to the light DOM of a given custom element.\r\n * This is useful for when styles need to be applied that are not supported\r\n * withing a `::slotted()` selector such as ::-vendor style selectors.\r\n */\n\n\nexport function globalStyle() {\n  return function (protoOrDescriptor, name) {\n    var targetConnectedCallback = protoOrDescriptor.connectedCallback;\n\n    function connectedCallback() {\n      this[\"__\".concat(name, \"StyleTag\")] = document.createElement('style');\n      this.prepend(this[\"__\".concat(name, \"StyleTag\")]);\n      this[\"__\".concat(name, \"StyleTag\")].innerText = this[\"__\".concat(name, \"GlobalStyle\")].toString();\n\n      if (targetConnectedCallback) {\n        targetConnectedCallback.apply(this);\n      }\n    }\n\n    protoOrDescriptor.connectedCallback = connectedCallback;\n\n    var setter = function setter(value) {\n      this[\"__\".concat(name, \"GlobalStyle\")] = value;\n    };\n\n    var descriptor = {\n      set: setter,\n      enumerable: true,\n      configurable: true\n    };\n    return name !== undefined ? legacyEvent(descriptor, protoOrDescriptor, name) : standardEvent(descriptor, protoOrDescriptor);\n  };\n} //# sourceMappingURL=global-style.js.map","map":{"version":3,"sources":["C:/Users/HP/Desktop/CNS-Portal-ashwini15523/frontend/angular-ui/node_modules/@cds/core/internal/decorators/global-style.js"],"names":["legacyEvent","descriptor","protoOrDescriptor","name","Object","defineProperty","standardEvent","element","kind","placement","key","globalStyle","targetConnectedCallback","connectedCallback","document","createElement","prepend","innerText","toString","apply","setter","value","set","enumerable","configurable","undefined"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,WAAT,CAAqBC,UAArB,EAAiCC,iBAAjC,EAAoDC,IAApD,EAA0D;AACtDC,EAAAA,MAAM,CAACC,cAAP,CAAsBH,iBAAtB,EAAyCC,IAAzC,EAA+CF,UAA/C;AACH,C,CACD;;;AACA,SAASK,aAAT,CAAuBL,UAAvB,EAAmCM,OAAnC,EAA4C;AACxC,SAAO;AACHC,IAAAA,IAAI,EAAE,QADH;AAEHC,IAAAA,SAAS,EAAE,WAFR;AAGHC,IAAAA,GAAG,EAAEH,OAAO,CAACG,GAHV;AAIHT,IAAAA,UAAU,EAAVA;AAJG,GAAP;AAMH;AACD;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASU,WAAT,GAAuB;AAC1B,SAAO,UAACT,iBAAD,EAAoBC,IAApB,EAA6B;AAChC,QAAMS,uBAAuB,GAAGV,iBAAiB,CAACW,iBAAlD;;AACA,aAASA,iBAAT,GAA6B;AACzB,uBAAUV,IAAV,iBAA4BW,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAA5B;AACA,WAAKC,OAAL,CAAa,iBAAUb,IAAV,cAAb;AACA,uBAAUA,IAAV,eAA0Bc,SAA1B,GAAsC,iBAAUd,IAAV,kBAA6Be,QAA7B,EAAtC;;AACA,UAAIN,uBAAJ,EAA6B;AACzBA,QAAAA,uBAAuB,CAACO,KAAxB,CAA8B,IAA9B;AACH;AACJ;;AACDjB,IAAAA,iBAAiB,CAACW,iBAAlB,GAAsCA,iBAAtC;;AACA,QAAMO,MAAM,GAAG,SAATA,MAAS,CAAUC,KAAV,EAAiB;AAC5B,uBAAUlB,IAAV,oBAA+BkB,KAA/B;AACH,KAFD;;AAGA,QAAMpB,UAAU,GAAG;AACfqB,MAAAA,GAAG,EAAEF,MADU;AAEfG,MAAAA,UAAU,EAAE,IAFG;AAGfC,MAAAA,YAAY,EAAE;AAHC,KAAnB;AAKA,WAAOrB,IAAI,KAAKsB,SAAT,GACDzB,WAAW,CAACC,UAAD,EAAaC,iBAAb,EAAgCC,IAAhC,CADV,GAEDG,aAAa,CAACL,UAAD,EAAaC,iBAAb,CAFnB;AAGH,GAtBD;AAuBH,C,CACD","sourcesContent":["/*\r\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\r\n * This software is released under MIT license.\r\n * The full license information can be found in LICENSE in the root directory of this project.\r\n */\r\n// Legacy TS Decorator\r\nfunction legacyEvent(descriptor, protoOrDescriptor, name) {\r\n    Object.defineProperty(protoOrDescriptor, name, descriptor);\r\n}\r\n// TC39 Decorators proposal\r\nfunction standardEvent(descriptor, element) {\r\n    return {\r\n        kind: 'method',\r\n        placement: 'prototype',\r\n        key: element.key,\r\n        descriptor,\r\n    };\r\n}\r\n/**\r\n * Appends a global `<style>` tag to the light DOM of a given custom element.\r\n * This is useful for when styles need to be applied that are not supported\r\n * withing a `::slotted()` selector such as ::-vendor style selectors.\r\n */\r\nexport function globalStyle() {\r\n    return (protoOrDescriptor, name) => {\r\n        const targetConnectedCallback = protoOrDescriptor.connectedCallback;\r\n        function connectedCallback() {\r\n            this[`__${name}StyleTag`] = document.createElement('style');\r\n            this.prepend(this[`__${name}StyleTag`]);\r\n            this[`__${name}StyleTag`].innerText = this[`__${name}GlobalStyle`].toString();\r\n            if (targetConnectedCallback) {\r\n                targetConnectedCallback.apply(this);\r\n            }\r\n        }\r\n        protoOrDescriptor.connectedCallback = connectedCallback;\r\n        const setter = function (value) {\r\n            this[`__${name}GlobalStyle`] = value;\r\n        };\r\n        const descriptor = {\r\n            set: setter,\r\n            enumerable: true,\r\n            configurable: true,\r\n        };\r\n        return name !== undefined\r\n            ? legacyEvent(descriptor, protoOrDescriptor, name)\r\n            : standardEvent(descriptor, protoOrDescriptor);\r\n    };\r\n}\r\n//# sourceMappingURL=global-style.js.map"]},"metadata":{},"sourceType":"module"}