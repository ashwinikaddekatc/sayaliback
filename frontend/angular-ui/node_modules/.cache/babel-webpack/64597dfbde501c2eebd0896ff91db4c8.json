{"ast":null,"code":"/*\r\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\r\n * This software is released under MIT license.\r\n * The full license information can be found in LICENSE in the root directory of this project.\r\n */\nimport { listenForAttributeChange } from './dom.js';\nexport function stopEvent(event) {\n  event.preventDefault();\n  event.stopPropagation();\n}\nexport var getElementUpdates = function getElementUpdates(element, propertyKey, callback) {\n  if (element.hasAttribute(propertyKey)) {\n    callback(element.getAttribute(propertyKey));\n  } else if (element[propertyKey] !== undefined) {\n    callback(element[propertyKey]);\n  } // React: disable input tracker to setup property observer. React re-creates tracker on input changes\n  // https://github.com/facebook/react/blob/9198a5cec0936a21a5ba194a22fcbac03eba5d1d/packages/react-dom/src/client/inputValueTracking.js#L51\n  // https://github.com/vmware/clarity/issues/5625\n\n\n  if (element._valueTracker && (propertyKey === 'checked' || propertyKey === 'value')) {\n    element._valueTracker = null;\n  }\n\n  var updatedProp = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(element), propertyKey);\n\n  if (updatedProp) {\n    Object.defineProperty(element, propertyKey, {\n      get: updatedProp.get,\n      set: function set(val) {\n        callback(val);\n        updatedProp.set.call(element, val);\n      }\n    });\n  }\n\n  return listenForAttributeChange(element, propertyKey, function (val) {\n    return callback(val);\n  });\n}; //# sourceMappingURL=events.js.map","map":{"version":3,"sources":["C:/Users/hp/OneDrive/Desktop/19portal/CNS-Portal/frontend/angular-ui/node_modules/@cds/core/internal/utils/events.js"],"names":["listenForAttributeChange","stopEvent","event","preventDefault","stopPropagation","getElementUpdates","element","propertyKey","callback","hasAttribute","getAttribute","undefined","_valueTracker","updatedProp","Object","getOwnPropertyDescriptor","getPrototypeOf","defineProperty","get","set","val","call"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,wBAAT,QAAyC,UAAzC;AACA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAC7BA,EAAAA,KAAK,CAACC,cAAN;AACAD,EAAAA,KAAK,CAACE,eAAN;AACH;AACD,OAAO,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,CAACC,OAAD,EAAUC,WAAV,EAAuBC,QAAvB,EAAoC;AACjE,MAAIF,OAAO,CAACG,YAAR,CAAqBF,WAArB,CAAJ,EAAuC;AACnCC,IAAAA,QAAQ,CAACF,OAAO,CAACI,YAAR,CAAqBH,WAArB,CAAD,CAAR;AACH,GAFD,MAGK,IAAID,OAAO,CAACC,WAAD,CAAP,KAAyBI,SAA7B,EAAwC;AACzCH,IAAAA,QAAQ,CAACF,OAAO,CAACC,WAAD,CAAR,CAAR;AACH,GANgE,CAOjE;AACA;AACA;;;AACA,MAAID,OAAO,CAACM,aAAR,KAA0BL,WAAW,KAAK,SAAhB,IAA6BA,WAAW,KAAK,OAAvE,CAAJ,EAAqF;AACjFD,IAAAA,OAAO,CAACM,aAAR,GAAwB,IAAxB;AACH;;AACD,MAAMC,WAAW,GAAGC,MAAM,CAACC,wBAAP,CAAgCD,MAAM,CAACE,cAAP,CAAsBV,OAAtB,CAAhC,EAAgEC,WAAhE,CAApB;;AACA,MAAIM,WAAJ,EAAiB;AACbC,IAAAA,MAAM,CAACG,cAAP,CAAsBX,OAAtB,EAA+BC,WAA/B,EAA4C;AACxCW,MAAAA,GAAG,EAAEL,WAAW,CAACK,GADuB;AAExCC,MAAAA,GAAG,EAAE,aAAAC,GAAG,EAAI;AACRZ,QAAAA,QAAQ,CAACY,GAAD,CAAR;AACAP,QAAAA,WAAW,CAACM,GAAZ,CAAgBE,IAAhB,CAAqBf,OAArB,EAA8Bc,GAA9B;AACH;AALuC,KAA5C;AAOH;;AACD,SAAOpB,wBAAwB,CAACM,OAAD,EAAUC,WAAV,EAAuB,UAAAa,GAAG;AAAA,WAAIZ,QAAQ,CAACY,GAAD,CAAZ;AAAA,GAA1B,CAA/B;AACH,CAxBM,C,CAyBP","sourcesContent":["/*\r\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\r\n * This software is released under MIT license.\r\n * The full license information can be found in LICENSE in the root directory of this project.\r\n */\r\nimport { listenForAttributeChange } from './dom.js';\r\nexport function stopEvent(event) {\r\n    event.preventDefault();\r\n    event.stopPropagation();\r\n}\r\nexport const getElementUpdates = (element, propertyKey, callback) => {\r\n    if (element.hasAttribute(propertyKey)) {\r\n        callback(element.getAttribute(propertyKey));\r\n    }\r\n    else if (element[propertyKey] !== undefined) {\r\n        callback(element[propertyKey]);\r\n    }\r\n    // React: disable input tracker to setup property observer. React re-creates tracker on input changes\r\n    // https://github.com/facebook/react/blob/9198a5cec0936a21a5ba194a22fcbac03eba5d1d/packages/react-dom/src/client/inputValueTracking.js#L51\r\n    // https://github.com/vmware/clarity/issues/5625\r\n    if (element._valueTracker && (propertyKey === 'checked' || propertyKey === 'value')) {\r\n        element._valueTracker = null;\r\n    }\r\n    const updatedProp = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(element), propertyKey);\r\n    if (updatedProp) {\r\n        Object.defineProperty(element, propertyKey, {\r\n            get: updatedProp.get,\r\n            set: val => {\r\n                callback(val);\r\n                updatedProp.set.call(element, val);\r\n            },\r\n        });\r\n    }\r\n    return listenForAttributeChange(element, propertyKey, val => callback(val));\r\n};\r\n//# sourceMappingURL=events.js.map"]},"metadata":{},"sourceType":"module"}