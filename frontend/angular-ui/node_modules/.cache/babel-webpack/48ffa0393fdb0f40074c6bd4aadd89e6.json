{"ast":null,"code":"import _classCallCheck from \"C:/Users/hp/OneDrive/Desktop/CNS-Portal/frontend/angular-ui/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/hp/OneDrive/Desktop/CNS-Portal/frontend/angular-ui/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/**\r\n * @license\r\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at\r\n * http://polymer.github.io/LICENSE.txt\r\n * The complete set of authors may be found at\r\n * http://polymer.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at\r\n * http://polymer.github.io/CONTRIBUTORS.txt\r\n * Code distributed by Google as part of the polymer project is also\r\n * subject to an additional IP rights grant found at\r\n * http://polymer.github.io/PATENTS.txt\r\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\r\n * Creates Parts when a template is instantiated.\r\n */\n\nexport var DefaultTemplateProcessor = /*#__PURE__*/function () {\n  function DefaultTemplateProcessor() {\n    _classCallCheck(this, DefaultTemplateProcessor);\n  }\n\n  _createClass(DefaultTemplateProcessor, [{\n    key: \"handleAttributeExpressions\",\n    value:\n    /**\r\n     * Create parts for an attribute-position binding, given the event, attribute\r\n     * name, and string literals.\r\n     *\r\n     * @param element The element containing the binding\r\n     * @param name  The attribute name\r\n     * @param strings The string literals. There are always at least two strings,\r\n     *   event for fully-controlled bindings with a single expression.\r\n     */\n    function handleAttributeExpressions(element, name, strings, options) {\n      var prefix = name[0];\n\n      if (prefix === '.') {\n        var _committer = new PropertyCommitter(element, name.slice(1), strings);\n\n        return _committer.parts;\n      }\n\n      if (prefix === '@') {\n        return [new EventPart(element, name.slice(1), options.eventContext)];\n      }\n\n      if (prefix === '?') {\n        return [new BooleanAttributePart(element, name.slice(1), strings)];\n      }\n\n      var committer = new AttributeCommitter(element, name, strings);\n      return committer.parts;\n    }\n    /**\r\n     * Create parts for a text-position binding.\r\n     * @param templateFactory\r\n     */\n\n  }, {\n    key: \"handleTextExpression\",\n    value: function handleTextExpression(options) {\n      return new NodePart(options);\n    }\n  }]);\n\n  return DefaultTemplateProcessor;\n}();\nexport var defaultTemplateProcessor = new DefaultTemplateProcessor(); //# sourceMappingURL=default-template-processor.js.map","map":{"version":3,"sources":["C:/Users/hp/OneDrive/Desktop/CNS-Portal/frontend/angular-ui/node_modules/lit-html/lib/default-template-processor.js"],"names":["AttributeCommitter","BooleanAttributePart","EventPart","NodePart","PropertyCommitter","DefaultTemplateProcessor","element","name","strings","options","prefix","committer","slice","parts","eventContext","defaultTemplateProcessor"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,kBAAT,EAA6BC,oBAA7B,EAAmDC,SAAnD,EAA8DC,QAA9D,EAAwEC,iBAAxE,QAAiG,YAAjG;AACA;AACA;AACA;;AACA,WAAaC,wBAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,wCAA2BC,OAA3B,EAAoCC,IAApC,EAA0CC,OAA1C,EAAmDC,OAAnD,EAA4D;AACxD,UAAMC,MAAM,GAAGH,IAAI,CAAC,CAAD,CAAnB;;AACA,UAAIG,MAAM,KAAK,GAAf,EAAoB;AAChB,YAAMC,UAAS,GAAG,IAAIP,iBAAJ,CAAsBE,OAAtB,EAA+BC,IAAI,CAACK,KAAL,CAAW,CAAX,CAA/B,EAA8CJ,OAA9C,CAAlB;;AACA,eAAOG,UAAS,CAACE,KAAjB;AACH;;AACD,UAAIH,MAAM,KAAK,GAAf,EAAoB;AAChB,eAAO,CAAC,IAAIR,SAAJ,CAAcI,OAAd,EAAuBC,IAAI,CAACK,KAAL,CAAW,CAAX,CAAvB,EAAsCH,OAAO,CAACK,YAA9C,CAAD,CAAP;AACH;;AACD,UAAIJ,MAAM,KAAK,GAAf,EAAoB;AAChB,eAAO,CAAC,IAAIT,oBAAJ,CAAyBK,OAAzB,EAAkCC,IAAI,CAACK,KAAL,CAAW,CAAX,CAAlC,EAAiDJ,OAAjD,CAAD,CAAP;AACH;;AACD,UAAMG,SAAS,GAAG,IAAIX,kBAAJ,CAAuBM,OAAvB,EAAgCC,IAAhC,EAAsCC,OAAtC,CAAlB;AACA,aAAOG,SAAS,CAACE,KAAjB;AACH;AACD;AACJ;AACA;AACA;;AA5BA;AAAA;AAAA,WA6BI,8BAAqBJ,OAArB,EAA8B;AAC1B,aAAO,IAAIN,QAAJ,CAAaM,OAAb,CAAP;AACH;AA/BL;;AAAA;AAAA;AAiCA,OAAO,IAAMM,wBAAwB,GAAG,IAAIV,wBAAJ,EAAjC,C,CACP","sourcesContent":["/**\r\n * @license\r\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\r\n * This code may only be used under the BSD style license found at\r\n * http://polymer.github.io/LICENSE.txt\r\n * The complete set of authors may be found at\r\n * http://polymer.github.io/AUTHORS.txt\r\n * The complete set of contributors may be found at\r\n * http://polymer.github.io/CONTRIBUTORS.txt\r\n * Code distributed by Google as part of the polymer project is also\r\n * subject to an additional IP rights grant found at\r\n * http://polymer.github.io/PATENTS.txt\r\n */\r\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\r\n/**\r\n * Creates Parts when a template is instantiated.\r\n */\r\nexport class DefaultTemplateProcessor {\r\n    /**\r\n     * Create parts for an attribute-position binding, given the event, attribute\r\n     * name, and string literals.\r\n     *\r\n     * @param element The element containing the binding\r\n     * @param name  The attribute name\r\n     * @param strings The string literals. There are always at least two strings,\r\n     *   event for fully-controlled bindings with a single expression.\r\n     */\r\n    handleAttributeExpressions(element, name, strings, options) {\r\n        const prefix = name[0];\r\n        if (prefix === '.') {\r\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\r\n            return committer.parts;\r\n        }\r\n        if (prefix === '@') {\r\n            return [new EventPart(element, name.slice(1), options.eventContext)];\r\n        }\r\n        if (prefix === '?') {\r\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\r\n        }\r\n        const committer = new AttributeCommitter(element, name, strings);\r\n        return committer.parts;\r\n    }\r\n    /**\r\n     * Create parts for a text-position binding.\r\n     * @param templateFactory\r\n     */\r\n    handleTextExpression(options) {\r\n        return new NodePart(options);\r\n    }\r\n}\r\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\r\n//# sourceMappingURL=default-template-processor.js.map"]},"metadata":{},"sourceType":"module"}