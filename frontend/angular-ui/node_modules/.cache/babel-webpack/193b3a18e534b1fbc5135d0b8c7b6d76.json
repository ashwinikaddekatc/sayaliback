{"ast":null,"code":"/*\r\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\r\n * This software is released under MIT license.\r\n * The full license information can be found in LICENSE in the root directory of this project.\r\n */\nimport { LogService, notProductionEnvironment } from '../services/log.service.js'; // Slot Query decorators are similar to the query decorator in lit-element.\n// Instead of querying the component template they query the content slot of the component.\n\nvar legacyQuery = function legacyQuery(descriptor, proto, name) {\n  Object.defineProperty(proto, name, descriptor);\n};\n\nvar standardQuery = function standardQuery(descriptor, element) {\n  return {\n    kind: 'method',\n    placement: 'prototype',\n    key: element.key,\n    descriptor: descriptor\n  };\n};\n/**\r\n * A property decorator that converts a class property into a getter that\r\n * executes a querySelector on the element's light DOM Slot.\r\n *\r\n * @ExportDecoratedItems\r\n */\n\n\nexport function querySlot(selector, config) {\n  return function (protoOrDescriptor, name) {\n    var targetFirstUpdated = protoOrDescriptor.firstUpdated;\n\n    function firstUpdated() {\n      var ref = this.querySelector(selector);\n      var shouldExempt = (config === null || config === void 0 ? void 0 : config.exemptOn) && (config === null || config === void 0 ? void 0 : config.exemptOn(this));\n\n      if (!ref && notProductionEnvironment() && (config === null || config === void 0 ? void 0 : config.required) && !shouldExempt) {\n        var message = config.requiredMessage || \"The <\".concat(selector, \"> element is required to use <\").concat(this.tagName.toLocaleLowerCase(), \">\");\n\n        if (config.required === 'error') {\n          throw new Error(message);\n        } else {\n          LogService.warn(message, this);\n        }\n      }\n\n      if ((config === null || config === void 0 ? void 0 : config.assign) && (ref === null || ref === void 0 ? void 0 : ref.hasAttribute('slot')) === false) {\n        ref.setAttribute('slot', config.assign);\n      }\n\n      if (targetFirstUpdated) {\n        targetFirstUpdated.apply(this);\n      }\n    }\n\n    protoOrDescriptor.firstUpdated = firstUpdated;\n    var descriptor = {\n      get: function get() {\n        return this.querySelector(selector);\n      },\n      enumerable: true,\n      configurable: true\n    };\n    return name !== undefined ? legacyQuery(descriptor, protoOrDescriptor, name) : standardQuery(descriptor, protoOrDescriptor);\n  };\n}\n/**\r\n * A property decorator that converts a class property into a getter\r\n * that executes a querySelectorAll on the element's light DOM Slot.\r\n *\r\n * @ExportDecoratedItems\r\n */\n\nexport function querySlotAll(selector, config) {\n  return function (protoOrDescriptor, name) {\n    var targetFirstUpdated = protoOrDescriptor.firstUpdated;\n\n    function firstUpdated(props) {\n      if (config === null || config === void 0 ? void 0 : config.assign) {\n        Array.from(this.querySelectorAll(selector)).filter(function (i) {\n          return !i.hasAttribute('slot');\n        }).forEach(function (i) {\n          return i.setAttribute('slot', config.assign);\n        });\n      }\n\n      if (targetFirstUpdated) {\n        targetFirstUpdated.apply(this, [props]);\n      }\n    }\n\n    protoOrDescriptor.firstUpdated = firstUpdated;\n    var descriptor = {\n      get: function get() {\n        return this.querySelectorAll(selector);\n      },\n      enumerable: true,\n      configurable: true\n    };\n    return name !== undefined ? legacyQuery(descriptor, protoOrDescriptor, name) : standardQuery(descriptor, protoOrDescriptor);\n  };\n} //# sourceMappingURL=query-slot.js.map","map":{"version":3,"sources":["C:/Users/HP/Desktop/CNS-Portal-ashwini15523/frontend/angular-ui/node_modules/@cds/core/internal/decorators/query-slot.js"],"names":["LogService","notProductionEnvironment","legacyQuery","descriptor","proto","name","Object","defineProperty","standardQuery","element","kind","placement","key","querySlot","selector","config","protoOrDescriptor","targetFirstUpdated","firstUpdated","ref","querySelector","shouldExempt","exemptOn","required","message","requiredMessage","tagName","toLocaleLowerCase","Error","warn","assign","hasAttribute","setAttribute","apply","get","enumerable","configurable","undefined","querySlotAll","props","Array","from","querySelectorAll","filter","i","forEach"],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\r\n * This software is released under MIT license.\r\n * The full license information can be found in LICENSE in the root directory of this project.\r\n */\r\nimport { LogService, notProductionEnvironment } from '../services/log.service.js';\r\n// Slot Query decorators are similar to the query decorator in lit-element.\r\n// Instead of querying the component template they query the content slot of the component.\r\nconst legacyQuery = (descriptor, proto, name) => {\r\n    Object.defineProperty(proto, name, descriptor);\r\n};\r\nconst standardQuery = (descriptor, element) => ({\r\n    kind: 'method',\r\n    placement: 'prototype',\r\n    key: element.key,\r\n    descriptor,\r\n});\r\n/**\r\n * A property decorator that converts a class property into a getter that\r\n * executes a querySelector on the element's light DOM Slot.\r\n *\r\n * @ExportDecoratedItems\r\n */\r\nexport function querySlot(selector, config) {\r\n    return (protoOrDescriptor, name) => {\r\n        const targetFirstUpdated = protoOrDescriptor.firstUpdated;\r\n        function firstUpdated() {\r\n            const ref = this.querySelector(selector);\r\n            const shouldExempt = (config === null || config === void 0 ? void 0 : config.exemptOn) && (config === null || config === void 0 ? void 0 : config.exemptOn(this));\r\n            if (!ref && notProductionEnvironment() && (config === null || config === void 0 ? void 0 : config.required) && !shouldExempt) {\r\n                const message = config.requiredMessage ||\r\n                    `The <${selector}> element is required to use <${this.tagName.toLocaleLowerCase()}>`;\r\n                if (config.required === 'error') {\r\n                    throw new Error(message);\r\n                }\r\n                else {\r\n                    LogService.warn(message, this);\r\n                }\r\n            }\r\n            if ((config === null || config === void 0 ? void 0 : config.assign) && (ref === null || ref === void 0 ? void 0 : ref.hasAttribute('slot')) === false) {\r\n                ref.setAttribute('slot', config.assign);\r\n            }\r\n            if (targetFirstUpdated) {\r\n                targetFirstUpdated.apply(this);\r\n            }\r\n        }\r\n        protoOrDescriptor.firstUpdated = firstUpdated;\r\n        const descriptor = {\r\n            get() {\r\n                return this.querySelector(selector);\r\n            },\r\n            enumerable: true,\r\n            configurable: true,\r\n        };\r\n        return name !== undefined\r\n            ? legacyQuery(descriptor, protoOrDescriptor, name)\r\n            : standardQuery(descriptor, protoOrDescriptor);\r\n    };\r\n}\r\n/**\r\n * A property decorator that converts a class property into a getter\r\n * that executes a querySelectorAll on the element's light DOM Slot.\r\n *\r\n * @ExportDecoratedItems\r\n */\r\nexport function querySlotAll(selector, config) {\r\n    return (protoOrDescriptor, name) => {\r\n        const targetFirstUpdated = protoOrDescriptor.firstUpdated;\r\n        function firstUpdated(props) {\r\n            if (config === null || config === void 0 ? void 0 : config.assign) {\r\n                Array.from(this.querySelectorAll(selector))\r\n                    .filter((i) => !i.hasAttribute('slot'))\r\n                    .forEach((i) => i.setAttribute('slot', config.assign));\r\n            }\r\n            if (targetFirstUpdated) {\r\n                targetFirstUpdated.apply(this, [props]);\r\n            }\r\n        }\r\n        protoOrDescriptor.firstUpdated = firstUpdated;\r\n        const descriptor = {\r\n            get() {\r\n                return this.querySelectorAll(selector);\r\n            },\r\n            enumerable: true,\r\n            configurable: true,\r\n        };\r\n        return name !== undefined\r\n            ? legacyQuery(descriptor, protoOrDescriptor, name)\r\n            : standardQuery(descriptor, protoOrDescriptor);\r\n    };\r\n}\r\n//# sourceMappingURL=query-slot.js.map"]},"metadata":{},"sourceType":"module"}