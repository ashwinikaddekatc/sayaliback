{"ast":null,"code":"/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport var parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\n\nexport var render = function render(result, container, options) {\n  var part = parts.get(container);\n\n  if (part === undefined) {\n    removeNodes(container, container.firstChild);\n    parts.set(container, part = new NodePart(Object.assign({\n      templateFactory: templateFactory\n    }, options)));\n    part.appendInto(container);\n  }\n\n  part.setValue(result);\n  part.commit();\n}; //# sourceMappingURL=render.js.map","map":{"version":3,"sources":["C:/Users/HP/Desktop/CNS-Portal-ashwini15523/frontend/angular-ui/node_modules/lit-html/lib/render.js"],"names":["removeNodes","NodePart","templateFactory","parts","WeakMap","render","result","container","options","part","get","undefined","firstChild","set","Object","assign","appendInto","setValue","commit"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,WAAT,QAA4B,UAA5B;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,eAAT,QAAgC,uBAAhC;AACA,OAAO,IAAMC,KAAK,GAAG,IAAIC,OAAJ,EAAd;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,IAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,MAAD,EAASC,SAAT,EAAoBC,OAApB,EAAgC;AAClD,MAAIC,IAAI,GAAGN,KAAK,CAACO,GAAN,CAAUH,SAAV,CAAX;;AACA,MAAIE,IAAI,KAAKE,SAAb,EAAwB;AACpBX,IAAAA,WAAW,CAACO,SAAD,EAAYA,SAAS,CAACK,UAAtB,CAAX;AACAT,IAAAA,KAAK,CAACU,GAAN,CAAUN,SAAV,EAAqBE,IAAI,GAAG,IAAIR,QAAJ,CAAaa,MAAM,CAACC,MAAP,CAAc;AAAEb,MAAAA,eAAe,EAAfA;AAAF,KAAd,EAAmCM,OAAnC,CAAb,CAA5B;AACAC,IAAAA,IAAI,CAACO,UAAL,CAAgBT,SAAhB;AACH;;AACDE,EAAAA,IAAI,CAACQ,QAAL,CAAcX,MAAd;AACAG,EAAAA,IAAI,CAACS,MAAL;AACH,CATM,C,CAUP","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map"]},"metadata":{},"sourceType":"module"}