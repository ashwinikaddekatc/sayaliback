{"ast":null,"code":"import _classCallCheck from \"C:/Users/HP/Desktop/new cns-portal/CNS-Portal/frontend/angular-ui/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/HP/Desktop/new cns-portal/CNS-Portal/frontend/angular-ui/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { Injectable, ChangeDetectorRef, Component, ElementRef, Input, NgZone, Renderer2, ViewEncapsulation, Host, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\n\n/** @enum {string} */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction GridsterComponent_div_0_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 3);\n  }\n\n  if (rf & 2) {\n    var i_r3 = ctx.index;\n    var ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ctx_r0.gridRenderer.getGridColumnStyle(i_r3));\n  }\n}\n\nfunction GridsterComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 4);\n  }\n\n  if (rf & 2) {\n    var i_r5 = ctx.index;\n    var ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ctx_r1.gridRenderer.getGridRowStyle(i_r5));\n  }\n}\n\nvar _c0 = [\"*\"];\nvar GridType = {\n  Fit: 'fit',\n  ScrollVertical: 'scrollVertical',\n  ScrollHorizontal: 'scrollHorizontal',\n  Fixed: 'fixed',\n  VerticalFixed: 'verticalFixed',\n  HorizontalFixed: 'horizontalFixed'\n};\n/** @enum {string} */\n\nvar DisplayGrid = {\n  Always: 'always',\n  OnDragAndResize: 'onDrag&Resize',\n  None: 'none'\n};\n/** @enum {string} */\n\nvar CompactType = {\n  None: 'none',\n  CompactUp: 'compactUp',\n  CompactLeft: 'compactLeft',\n  CompactUpAndLeft: 'compactUp&Left',\n  CompactLeftAndUp: 'compactLeft&Up'\n};\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\n\nvar\n/** @type {?} */\nGridsterConfigService = {\n  gridType: GridType.Fit,\n  // 'fit' will fit the items in the container without scroll;\n  // 'scrollVertical' will fit on width and height of the items will be the same as the width\n  // 'scrollHorizontal' will fit on height and width of the items will be the same as the height\n  // 'fixed' will set the rows and columns dimensions based on fixedColWidth and fixedRowHeight options\n  // 'verticalFixed' will set the rows to fixedRowHeight and columns width will fit the space available\n  // 'horizontalFixed' will set the columns to fixedColWidth and rows height will fit the space available\n  fixedColWidth: 250,\n  // fixed col width for gridType: 'fixed'\n  fixedRowHeight: 250,\n  // fixed row height for gridType: 'fixed'\n  keepFixedHeightInMobile: false,\n  // keep the height from fixed gridType in mobile layout\n  keepFixedWidthInMobile: false,\n  // keep the width from fixed gridType in mobile layout\n  setGridSize: false,\n  // sets grid size depending on content\n  compactType: CompactType.None,\n  // compact items: 'none' | 'compactUp' | 'compactLeft' | 'compactUp&Left' | 'compactLeft&Up'\n  mobileBreakpoint: 640,\n  // if the screen is not wider that this, remove the grid layout and stack the items\n  minCols: 1,\n  // minimum amount of columns in the grid\n  maxCols: 100,\n  // maximum amount of columns in the grid\n  minRows: 1,\n  // minimum amount of rows in the grid\n  maxRows: 100,\n  // maximum amount of rows in the grid\n  defaultItemCols: 1,\n  // default width of an item in columns\n  defaultItemRows: 1,\n  // default height of an item in rows\n  maxItemCols: 50,\n  // max item number of cols\n  maxItemRows: 50,\n  // max item number of rows\n  minItemCols: 1,\n  // min item number of columns\n  minItemRows: 1,\n  // min item number of rows\n  minItemArea: 1,\n  // min item area: cols * rows\n  maxItemArea: 2500,\n  // max item area: cols * rows\n  margin: 10,\n  // margin between grid items\n  outerMargin: true,\n  // if margins will apply to the sides of the container\n  outerMarginTop: null,\n  // override outer margin for grid\n  outerMarginRight: null,\n  // override outer margin for grid\n  outerMarginBottom: null,\n  // override outer margin for grid\n  outerMarginLeft: null,\n  // override outer margin for grid\n  scrollSensitivity: 10,\n  // margin of the dashboard where to start scrolling\n  scrollSpeed: 20,\n  // how much to scroll each mouse move when in the scrollSensitivity zone\n  initCallback: undefined,\n  // callback to call after grid has initialized. Arguments: gridsterComponent\n  destroyCallback: undefined,\n  // callback to call after grid has destroyed. Arguments: gridsterComponent\n  gridSizeChangedCallback: undefined,\n  // callback to call after grid has changed size. Arguments: gridsterComponent\n  itemChangeCallback: undefined,\n  // callback to call for each item when is changes x, y, rows, cols.\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemResizeCallback: undefined,\n  // callback to call for each item when width/height changes.\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemInitCallback: undefined,\n  // callback to call for each item when is initialized.\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemRemovedCallback: undefined,\n  // callback to call for each item when is initialized.\n  // Arguments: gridsterItem, gridsterItemComponent\n  itemValidateCallback: undefined,\n  // callback to call to validate item position/size. Return true if valid.\n  // Arguments: gridsterItem\n  enableEmptyCellClick: false,\n  // enable empty cell click events\n  enableEmptyCellContextMenu: false,\n  // enable empty cell context menu (right click) events\n  enableEmptyCellDrop: false,\n  // enable empty cell drop events\n  enableEmptyCellDrag: false,\n  // enable empty cell drag events\n  emptyCellClickCallback: undefined,\n  // empty cell click callback\n  emptyCellContextMenuCallback: undefined,\n  // empty cell context menu (right click) callback\n  emptyCellDropCallback: undefined,\n  // empty cell drag drop callback. HTML5 Drag & Drop\n  emptyCellDragCallback: undefined,\n  // empty cell drag and create item like excel cell selection\n  emptyCellDragMaxCols: 50,\n  // limit empty cell drag max cols\n  emptyCellDragMaxRows: 50,\n  // limit empty cell drag max rows\n  // Arguments: event, gridsterItem{x, y, rows: defaultItemRows, cols: defaultItemCols}\n  ignoreMarginInRow: false,\n  // ignore the gap between rows for items which span multiple rows (see #162, #224)\n  draggable: {\n    delayStart: 0,\n    // milliseconds to delay the start of drag, useful for touch interaction\n    enabled: false,\n    // enable/disable draggable items\n    ignoreContentClass: 'gridster-item-content',\n    // default content class to ignore the drag event from\n    ignoreContent: false,\n    // if true drag will start only from elements from `dragHandleClass`\n    dragHandleClass: 'drag-handler',\n    // drag event only from this class. If `ignoreContent` is true.\n    stop: undefined,\n    // callback when dragging an item stops.  Accepts Promise return to cancel/approve drag.\n    start: undefined,\n    // callback when dragging an item starts.\n    // Arguments: item, gridsterItem, event\n    dropOverItems: false,\n    // enable drop items on top other item\n    dropOverItemsCallback: undefined // callback on drop over another item\n\n  },\n  resizable: {\n    delayStart: 0,\n    // milliseconds to delay the start of resize, useful for touch interaction\n    enabled: false,\n    // enable/disable resizable items\n    handles: {\n      s: true,\n      e: true,\n      n: true,\n      w: true,\n      se: true,\n      ne: true,\n      sw: true,\n      nw: true\n    },\n    // resizable edges of an item\n    stop: undefined,\n    // callback when resizing an item stops. Accepts Promise return to cancel/approve resize.\n    start: undefined // callback when resizing an item starts.\n\n  },\n  swap: true,\n  // allow items to switch position if drop on top of another\n  pushItems: false,\n  // push items when resizing and dragging\n  disablePushOnDrag: false,\n  // disable push on drag\n  disablePushOnResize: false,\n  // disable push on resize\n  pushDirections: {\n    north: true,\n    east: true,\n    south: true,\n    west: true\n  },\n  // control the directions items are pushed\n  pushResizeItems: false,\n  // on resize of item will shrink adjacent items\n  displayGrid: DisplayGrid.OnDragAndResize,\n  // display background grid of rows and columns\n  disableWindowResize: false,\n  // disable the window on resize listener. This will stop grid to recalculate on window resize.\n  disableWarnings: false,\n  // disable console log warnings about misplacement of grid items\n  scrollToNewItems: false,\n  // scroll to new items placed in a scrollable view\n  disableAutoPositionOnConflict: false // disable auto-position of items on conflict state\n\n};\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\n\nvar GridsterUtils = /*#__PURE__*/function () {\n  function GridsterUtils() {\n    _classCallCheck(this, GridsterUtils);\n  }\n\n  _createClass(GridsterUtils, null, [{\n    key: \"merge\",\n    value:\n    /**\r\n     * @param {?} obj1\r\n     * @param {?} obj2\r\n     * @param {?} properties\r\n     * @return {?}\r\n     */\n    function merge(obj1, obj2, properties) {\n      for (var\n      /** @type {?} */\n      p in obj2) {\n        if (obj2[p] !== void 0 && properties.hasOwnProperty(p)) {\n          if (typeof obj2[p] === 'object') {\n            obj1[p] = GridsterUtils.merge(obj1[p], obj2[p], properties[p]);\n          } else {\n            obj1[p] = obj2[p];\n          }\n        }\n      }\n\n      return obj1;\n    }\n    /**\r\n     * @param {?} func\r\n     * @param {?} wait\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"debounce\",\n    value: function debounce(func, wait) {\n      var\n      /** @type {?} */\n      timeout;\n      return function () {\n        var\n        /** @type {?} */\n        context = this,\n\n        /** @type {?} */\n        args = arguments;\n\n        var\n        /** @type {?} */\n        later = function later() {\n          timeout = null;\n          func.apply(context, args);\n        };\n\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n      };\n    }\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"checkTouchEvent\",\n    value: function checkTouchEvent(e) {\n      if (e.clientX === undefined && e.touches) {\n        if (e.touches && e.touches.length) {\n          e.clientX = e.touches[0].clientX;\n          e.clientY = e.touches[0].clientY;\n        } else if (e.changedTouches && e.changedTouches.length) {\n          e.clientX = e.changedTouches[0].clientX;\n          e.clientY = e.changedTouches[0].clientY;\n        }\n      }\n    }\n    /**\r\n     * @param {?} gridster\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"checkContentClassForEvent\",\n    value: function checkContentClassForEvent(gridster, e) {\n      if (gridster.$options.draggable.ignoreContent) {\n        if (!GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.dragHandleClass)) {\n          return true;\n        }\n      } else {\n        if (GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.ignoreContentClass)) {\n          return true;\n        }\n      }\n\n      return false;\n    }\n    /**\r\n     * @param {?} gridster\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"checkContentClassForEmptyCellClickEvent\",\n    value: function checkContentClassForEmptyCellClickEvent(gridster, e) {\n      return GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.ignoreContentClass) || GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.dragHandleClass);\n    }\n    /**\r\n     * @param {?} target\r\n     * @param {?} current\r\n     * @param {?} contentClass\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"checkContentClass\",\n    value: function checkContentClass(target, current, contentClass) {\n      if (!target || target === current) {\n        return false;\n      }\n\n      if (target.hasAttribute('class') && target.getAttribute('class').split(' ').indexOf(contentClass) > -1) {\n        return true;\n      } else {\n        return GridsterUtils.checkContentClass(target.parentNode, current, contentClass);\n      }\n    }\n    /**\r\n     * @param {?} a\r\n     * @param {?} b\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"compareItems\",\n    value: function compareItems(a, b) {\n      if (a.y > b.y) {\n        return -1;\n      } else if (a.y < b.y) {\n        return 1;\n      } else if (a.x > b.x) {\n        return -1;\n      } else {\n        return 1;\n      }\n    }\n  }]);\n\n  return GridsterUtils;\n}();\n\nGridsterUtils.ɵfac = function GridsterUtils_Factory(t) {\n  return new (t || GridsterUtils)();\n};\n\nGridsterUtils.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: GridsterUtils,\n  factory: GridsterUtils.ɵfac\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridsterUtils, [{\n    type: Injectable\n  }], null, null);\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\n\n/**\r\n * @abstract\r\n */\n\n\nvar GridsterComponentInterface = function GridsterComponentInterface() {\n  _classCallCheck(this, GridsterComponentInterface);\n};\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\n\n\nvar GridsterEmptyCell = /*#__PURE__*/function () {\n  /**\r\n   * @param {?} gridster\r\n   */\n  function GridsterEmptyCell(gridster) {\n    _classCallCheck(this, GridsterEmptyCell);\n\n    this.gridster = gridster;\n  }\n  /**\r\n   * @return {?}\r\n   */\n\n\n  _createClass(GridsterEmptyCell, [{\n    key: \"destroy\",\n    value: function destroy() {\n      delete this.initialItem;\n      delete this.gridster.movingItem;\n\n      if (this.gridster.previewStyle) {\n        this.gridster.previewStyle();\n      }\n\n      delete this.gridster;\n\n      if (this.emptyCellExit) {\n        this.emptyCellExit();\n        this.emptyCellExit = null;\n      }\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"updateOptions\",\n    value: function updateOptions() {\n      var _this = this;\n\n      if (this.gridster.$options.enableEmptyCellClick && !this.emptyCellClick && this.gridster.options.emptyCellClickCallback) {\n        this.emptyCellClick = this.gridster.renderer.listen(this.gridster.el, 'click', this.emptyCellClickCb.bind(this));\n        this.emptyCellClickTouch = this.gridster.renderer.listen(this.gridster.el, 'touchend', this.emptyCellClickCb.bind(this));\n      } else if (!this.gridster.$options.enableEmptyCellClick && this.emptyCellClick && this.emptyCellClickTouch) {\n        this.emptyCellClick();\n        this.emptyCellClickTouch();\n        this.emptyCellClick = null;\n        this.emptyCellClickTouch = null;\n      }\n\n      if (this.gridster.$options.enableEmptyCellContextMenu && !this.emptyCellContextMenu && this.gridster.options.emptyCellContextMenuCallback) {\n        this.emptyCellContextMenu = this.gridster.renderer.listen(this.gridster.el, 'contextmenu', this.emptyCellContextMenuCb.bind(this));\n      } else if (!this.gridster.$options.enableEmptyCellContextMenu && this.emptyCellContextMenu) {\n        this.emptyCellContextMenu();\n        this.emptyCellContextMenu = null;\n      }\n\n      if (this.gridster.$options.enableEmptyCellDrop && !this.emptyCellDrop && this.gridster.options.emptyCellDropCallback) {\n        this.emptyCellDrop = this.gridster.renderer.listen(this.gridster.el, 'drop', this.emptyCellDragDrop.bind(this));\n        this.gridster.zone.runOutsideAngular(function () {\n          _this.emptyCellMove = _this.gridster.renderer.listen(_this.gridster.el, 'dragover', _this.emptyCellDragOver.bind(_this));\n        });\n        this.emptyCellExit = this.gridster.renderer.listen('document', 'dragend', function () {\n          _this.gridster.movingItem = null;\n\n          _this.gridster.previewStyle();\n        });\n      } else if (!this.gridster.$options.enableEmptyCellDrop && this.emptyCellDrop && this.emptyCellMove && this.emptyCellExit) {\n        this.emptyCellDrop();\n        this.emptyCellMove();\n        this.emptyCellExit();\n        this.emptyCellMove = null;\n        this.emptyCellDrop = null;\n        this.emptyCellExit = null;\n      }\n\n      if (this.gridster.$options.enableEmptyCellDrag && !this.emptyCellDrag && this.gridster.options.emptyCellDragCallback) {\n        this.emptyCellDrag = this.gridster.renderer.listen(this.gridster.el, 'mousedown', this.emptyCellMouseDown.bind(this));\n        this.emptyCellDragTouch = this.gridster.renderer.listen(this.gridster.el, 'touchstart', this.emptyCellMouseDown.bind(this));\n      } else if (!this.gridster.$options.enableEmptyCellDrag && this.emptyCellDrag && this.emptyCellDragTouch) {\n        this.emptyCellDrag();\n        this.emptyCellDragTouch();\n        this.emptyCellDrag = null;\n        this.emptyCellDragTouch = null;\n      }\n    }\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"emptyCellClickCb\",\n    value: function emptyCellClickCb(e) {\n      if (this.gridster.movingItem || GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n        return;\n      }\n\n      var\n      /** @type {?} */\n      item = this.getValidItemFromEvent(e);\n\n      if (!item) {\n        return;\n      }\n\n      if (this.gridster.options.emptyCellClickCallback) {\n        this.gridster.options.emptyCellClickCallback(e, item);\n      }\n\n      this.gridster.cdRef.markForCheck();\n    }\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"emptyCellContextMenuCb\",\n    value: function emptyCellContextMenuCb(e) {\n      if (this.gridster.movingItem || GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n        return;\n      }\n\n      e.preventDefault();\n      e.stopPropagation();\n      var\n      /** @type {?} */\n      item = this.getValidItemFromEvent(e);\n\n      if (!item) {\n        return;\n      }\n\n      if (this.gridster.options.emptyCellContextMenuCallback) {\n        this.gridster.options.emptyCellContextMenuCallback(e, item);\n      }\n\n      this.gridster.cdRef.markForCheck();\n    }\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"emptyCellDragDrop\",\n    value: function emptyCellDragDrop(e) {\n      var\n      /** @type {?} */\n      item = this.getValidItemFromEvent(e);\n\n      if (!item) {\n        return;\n      }\n\n      if (this.gridster.options.emptyCellDropCallback) {\n        this.gridster.options.emptyCellDropCallback(e, item);\n      }\n\n      this.gridster.cdRef.markForCheck();\n    }\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"emptyCellDragOver\",\n    value: function emptyCellDragOver(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      var\n      /** @type {?} */\n      item = this.getValidItemFromEvent(e);\n\n      if (item) {\n        e.dataTransfer.dropEffect = 'move';\n        this.gridster.movingItem = item;\n      } else {\n        e.dataTransfer.dropEffect = 'none';\n        this.gridster.movingItem = null;\n      }\n\n      this.gridster.previewStyle();\n    }\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"emptyCellMouseDown\",\n    value: function emptyCellMouseDown(e) {\n      var _this2 = this;\n\n      if (GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\n        return;\n      }\n\n      e.preventDefault();\n      e.stopPropagation();\n      var\n      /** @type {?} */\n      item = this.getValidItemFromEvent(e);\n\n      if (!item) {\n        return;\n      }\n\n      this.initialItem = item;\n      this.gridster.movingItem = item;\n      this.gridster.previewStyle();\n      this.gridster.zone.runOutsideAngular(function () {\n        _this2.emptyCellMMove = _this2.gridster.renderer.listen('window', 'mousemove', _this2.emptyCellMouseMove.bind(_this2));\n        _this2.emptyCellMMoveTouch = _this2.gridster.renderer.listen('window', 'touchmove', _this2.emptyCellMouseMove.bind(_this2));\n      });\n      this.emptyCellUp = this.gridster.renderer.listen('window', 'mouseup', this.emptyCellMouseUp.bind(this));\n      this.emptyCellUpTouch = this.gridster.renderer.listen('window', 'touchend', this.emptyCellMouseUp.bind(this));\n    }\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"emptyCellMouseMove\",\n    value: function emptyCellMouseMove(e) {\n      e.preventDefault();\n      e.stopPropagation();\n      var\n      /** @type {?} */\n      item = this.getValidItemFromEvent(e, this.initialItem);\n\n      if (!item) {\n        return;\n      }\n\n      this.gridster.movingItem = item;\n      this.gridster.previewStyle();\n    }\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"emptyCellMouseUp\",\n    value: function emptyCellMouseUp(e) {\n      var _this3 = this;\n\n      this.emptyCellMMove();\n      this.emptyCellMMoveTouch();\n      this.emptyCellUp();\n      this.emptyCellUpTouch();\n      var\n      /** @type {?} */\n      item = this.getValidItemFromEvent(e, this.initialItem);\n\n      if (item) {\n        this.gridster.movingItem = item;\n      }\n\n      if (this.gridster.options.emptyCellDragCallback && this.gridster.movingItem) {\n        this.gridster.options.emptyCellDragCallback(e, this.gridster.movingItem);\n      }\n\n      setTimeout(function () {\n        _this3.initialItem = null;\n\n        if (_this3.gridster) {\n          _this3.gridster.movingItem = null;\n\n          _this3.gridster.previewStyle();\n        }\n      });\n      this.gridster.cdRef.markForCheck();\n    }\n    /**\r\n     * @param {?} e\r\n     * @param {?=} oldItem\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"getValidItemFromEvent\",\n    value: function getValidItemFromEvent(e, oldItem) {\n      e.preventDefault();\n      e.stopPropagation();\n      GridsterUtils.checkTouchEvent(e);\n      var\n      /** @type {?} */\n      rect = this.gridster.el.getBoundingClientRect();\n      var\n      /** @type {?} */\n      x = e.clientX + this.gridster.el.scrollLeft - rect.left - this.gridster.$options.margin;\n      var\n      /** @type {?} */\n      y = e.clientY + this.gridster.el.scrollTop - rect.top - this.gridster.$options.margin;\n      var\n      /** @type {?} */\n      item = {\n        x: this.gridster.pixelsToPositionX(x, Math.floor, true),\n        y: this.gridster.pixelsToPositionY(y, Math.floor, true),\n        cols: this.gridster.$options.defaultItemCols,\n        rows: this.gridster.$options.defaultItemRows\n      };\n\n      if (oldItem) {\n        item.cols = Math.min(Math.abs(oldItem.x - item.x) + 1, this.gridster.$options.emptyCellDragMaxCols);\n        item.rows = Math.min(Math.abs(oldItem.y - item.y) + 1, this.gridster.$options.emptyCellDragMaxRows);\n\n        if (oldItem.x < item.x) {\n          item.x = oldItem.x;\n        } else if (oldItem.x - item.x > this.gridster.$options.emptyCellDragMaxCols - 1) {\n          item.x = this.gridster.movingItem ? this.gridster.movingItem.x : 0;\n        }\n\n        if (oldItem.y < item.y) {\n          item.y = oldItem.y;\n        } else if (oldItem.y - item.y > this.gridster.$options.emptyCellDragMaxRows - 1) {\n          item.y = this.gridster.movingItem ? this.gridster.movingItem.y : 0;\n        }\n      }\n\n      if (this.gridster.checkCollision(item)) {\n        return;\n      }\n\n      return item;\n    }\n  }]);\n\n  return GridsterEmptyCell;\n}();\n\nGridsterEmptyCell.ɵfac = function GridsterEmptyCell_Factory(t) {\n  return new (t || GridsterEmptyCell)(ɵngcc0.ɵɵinject(GridsterComponentInterface));\n};\n\nGridsterEmptyCell.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: GridsterEmptyCell,\n  factory: GridsterEmptyCell.ɵfac\n});\n/** @nocollapse */\n\nGridsterEmptyCell.ctorParameters = function () {\n  return [{\n    type: GridsterComponentInterface\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridsterEmptyCell, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: GridsterComponentInterface\n    }];\n  }, null);\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\n\n\nvar GridsterCompact = /*#__PURE__*/function () {\n  /**\r\n   * @param {?} gridster\r\n   */\n  function GridsterCompact(gridster) {\n    _classCallCheck(this, GridsterCompact);\n\n    this.gridster = gridster;\n  }\n  /**\r\n   * @return {?}\r\n   */\n\n\n  _createClass(GridsterCompact, [{\n    key: \"destroy\",\n    value: function destroy() {\n      delete this.gridster;\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"checkCompact\",\n    value: function checkCompact() {\n      if (this.gridster.$options.compactType !== CompactType.None) {\n        if (this.gridster.$options.compactType === CompactType.CompactUp) {\n          this.checkCompactUp();\n        } else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\n          this.checkCompactLeft();\n        } else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\n          this.checkCompactUp();\n          this.checkCompactLeft();\n        } else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\n          this.checkCompactLeft();\n          this.checkCompactUp();\n        }\n      }\n    }\n    /**\r\n     * @param {?} item\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"checkCompactItem\",\n    value: function checkCompactItem(item) {\n      if (this.gridster.$options.compactType !== CompactType.None) {\n        if (this.gridster.$options.compactType === CompactType.CompactUp) {\n          this.moveUpTillCollision(item);\n        } else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\n          this.moveLeftTillCollision(item);\n        } else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\n          this.moveUpTillCollision(item);\n          this.moveLeftTillCollision(item);\n        } else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\n          this.moveLeftTillCollision(item);\n          this.moveUpTillCollision(item);\n        }\n      }\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"checkCompactUp\",\n    value: function checkCompactUp() {\n      var\n      /** @type {?} */\n      widgetMovedUp = false,\n\n      /** @type {?} */\n      widget,\n\n      /** @type {?} */\n      moved;\n      var\n      /** @type {?} */\n      l = this.gridster.grid.length;\n\n      for (var\n      /** @type {?} */\n      i = 0; i < l; i++) {\n        widget = this.gridster.grid[i];\n\n        if (widget.$item.compactEnabled === false) {\n          continue;\n        }\n\n        moved = this.moveUpTillCollision(widget.$item);\n\n        if (moved) {\n          widgetMovedUp = true;\n          widget.item.y = widget.$item.y;\n          widget.itemChanged();\n        }\n      }\n\n      if (widgetMovedUp) {\n        this.checkCompact();\n      }\n    }\n    /**\r\n     * @param {?} item\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"moveUpTillCollision\",\n    value: function moveUpTillCollision(item) {\n      item.y -= 1;\n\n      if (this.gridster.checkCollision(item)) {\n        item.y += 1;\n        return false;\n      } else {\n        this.moveUpTillCollision(item);\n        return true;\n      }\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"checkCompactLeft\",\n    value: function checkCompactLeft() {\n      var\n      /** @type {?} */\n      widgetMovedUp = false,\n\n      /** @type {?} */\n      widget,\n\n      /** @type {?} */\n      moved;\n      var\n      /** @type {?} */\n      l = this.gridster.grid.length;\n\n      for (var\n      /** @type {?} */\n      i = 0; i < l; i++) {\n        widget = this.gridster.grid[i];\n\n        if (widget.$item.compactEnabled === false) {\n          continue;\n        }\n\n        moved = this.moveLeftTillCollision(widget.$item);\n\n        if (moved) {\n          widgetMovedUp = true;\n          widget.item.x = widget.$item.x;\n          widget.itemChanged();\n        }\n      }\n\n      if (widgetMovedUp) {\n        this.checkCompact();\n      }\n    }\n    /**\r\n     * @param {?} item\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"moveLeftTillCollision\",\n    value: function moveLeftTillCollision(item) {\n      item.x -= 1;\n\n      if (this.gridster.checkCollision(item)) {\n        item.x += 1;\n        return false;\n      } else {\n        this.moveLeftTillCollision(item);\n        return true;\n      }\n    }\n  }]);\n\n  return GridsterCompact;\n}();\n\nGridsterCompact.ɵfac = function GridsterCompact_Factory(t) {\n  return new (t || GridsterCompact)(ɵngcc0.ɵɵinject(GridsterComponentInterface));\n};\n\nGridsterCompact.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: GridsterCompact,\n  factory: GridsterCompact.ɵfac\n});\n/** @nocollapse */\n\nGridsterCompact.ctorParameters = function () {\n  return [{\n    type: GridsterComponentInterface\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridsterCompact, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: GridsterComponentInterface\n    }];\n  }, null);\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\n\n\nvar GridsterRenderer = /*#__PURE__*/function () {\n  /**\r\n   * @param {?} gridster\r\n   */\n  function GridsterRenderer(gridster) {\n    _classCallCheck(this, GridsterRenderer);\n\n    this.gridster = gridster;\n  }\n  /**\r\n   * @return {?}\r\n   */\n\n\n  _createClass(GridsterRenderer, [{\n    key: \"destroy\",\n    value: function destroy() {\n      delete this.gridster;\n    }\n    /**\r\n     * @param {?} el\r\n     * @param {?} item\r\n     * @param {?} renderer\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"updateItem\",\n    value: function updateItem(el, item, renderer) {\n      if (this.gridster.mobile) {\n        renderer.setStyle(el, 'transform', '');\n\n        if (this.gridster.$options.keepFixedHeightInMobile) {\n          renderer.setStyle(el, 'height', item.rows * this.gridster.$options.fixedRowHeight + 'px');\n        } else {\n          renderer.setStyle(el, 'height', this.gridster.curWidth / 2 * item.rows + 'px');\n        }\n\n        if (this.gridster.$options.keepFixedWidthInMobile) {\n          renderer.setStyle(el, 'width', this.gridster.$options.fixedColWidth + 'px');\n        } else {\n          renderer.setStyle(el, 'width', '');\n        }\n\n        renderer.setStyle(el, 'margin-bottom', this.gridster.$options.margin + 'px');\n        renderer.setStyle(el, 'margin-right', '');\n      } else {\n        var\n        /** @type {?} */\n        x = Math.round(this.gridster.curColWidth * item.x);\n        var\n        /** @type {?} */\n        y = Math.round(this.gridster.curRowHeight * item.y);\n        var\n        /** @type {?} */\n        width = this.gridster.curColWidth * item.cols - this.gridster.$options.margin;\n        var\n        /** @type {?} */\n        height = this.gridster.curRowHeight * item.rows - this.gridster.$options.margin;\n        var\n        /** @type {?} */\n        transform = 'translate3d(' + x + 'px, ' + y + 'px, 0)';\n        renderer.setStyle(el, 'transform', transform);\n        renderer.setStyle(el, 'width', width + 'px');\n        renderer.setStyle(el, 'height', height + 'px');\n        var\n        /** @type {?} */\n        marginBottom = null;\n        var\n        /** @type {?} */\n        marginRight = null;\n\n        if (this.gridster.$options.outerMargin) {\n          if (this.gridster.rows === item.rows + item.y) {\n            if (this.gridster.$options.outerMarginBottom !== null) {\n              marginBottom = this.gridster.$options.outerMarginBottom + 'px';\n            } else {\n              marginBottom = this.gridster.$options.margin + 'px';\n            }\n          }\n\n          if (this.gridster.columns === item.cols + item.x) {\n            if (this.gridster.$options.outerMarginBottom !== null) {\n              marginRight = this.gridster.$options.outerMarginRight + 'px';\n            } else {\n              marginRight = this.gridster.$options.margin + 'px';\n            }\n          }\n        }\n\n        renderer.setStyle(el, 'margin-bottom', marginBottom);\n        renderer.setStyle(el, 'margin-right', marginRight);\n      }\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"updateGridster\",\n    value: function updateGridster() {\n      var\n      /** @type {?} */\n      addClass = '';\n      var\n      /** @type {?} */\n      removeClass1 = '';\n      var\n      /** @type {?} */\n      removeClass2 = '';\n      var\n      /** @type {?} */\n      removeClass3 = '';\n\n      if (this.gridster.$options.gridType === GridType.Fit) {\n        addClass = GridType.Fit;\n        removeClass1 = GridType.ScrollVertical;\n        removeClass2 = GridType.ScrollHorizontal;\n        removeClass3 = GridType.Fixed;\n      } else if (this.gridster.$options.gridType === GridType.ScrollVertical) {\n        this.gridster.curRowHeight = this.gridster.curColWidth;\n        addClass = GridType.ScrollVertical;\n        removeClass1 = GridType.Fit;\n        removeClass2 = GridType.ScrollHorizontal;\n        removeClass3 = GridType.Fixed;\n      } else if (this.gridster.$options.gridType === GridType.ScrollHorizontal) {\n        this.gridster.curColWidth = this.gridster.curRowHeight;\n        addClass = GridType.ScrollHorizontal;\n        removeClass1 = GridType.Fit;\n        removeClass2 = GridType.ScrollVertical;\n        removeClass3 = GridType.Fixed;\n      } else if (this.gridster.$options.gridType === GridType.Fixed) {\n        this.gridster.curColWidth = this.gridster.$options.fixedColWidth + (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n        this.gridster.curRowHeight = this.gridster.$options.fixedRowHeight + (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n        addClass = GridType.Fixed;\n        removeClass1 = GridType.Fit;\n        removeClass2 = GridType.ScrollVertical;\n        removeClass3 = GridType.ScrollHorizontal;\n      } else if (this.gridster.$options.gridType === GridType.VerticalFixed) {\n        this.gridster.curRowHeight = this.gridster.$options.fixedRowHeight + (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n        addClass = GridType.ScrollVertical;\n        removeClass1 = GridType.Fit;\n        removeClass2 = GridType.ScrollHorizontal;\n        removeClass3 = GridType.Fixed;\n      } else if (this.gridster.$options.gridType === GridType.HorizontalFixed) {\n        this.gridster.curColWidth = this.gridster.$options.fixedColWidth + (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\n        addClass = GridType.ScrollHorizontal;\n        removeClass1 = GridType.Fit;\n        removeClass2 = GridType.ScrollVertical;\n        removeClass3 = GridType.Fixed;\n      }\n\n      if (this.gridster.mobile) {\n        this.gridster.renderer.removeClass(this.gridster.el, addClass);\n      } else {\n        this.gridster.renderer.addClass(this.gridster.el, addClass);\n      }\n\n      this.gridster.renderer.removeClass(this.gridster.el, removeClass1);\n      this.gridster.renderer.removeClass(this.gridster.el, removeClass2);\n      this.gridster.renderer.removeClass(this.gridster.el, removeClass3);\n    }\n    /**\r\n     * @param {?} i\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"getGridColumnStyle\",\n    value: function getGridColumnStyle(i) {\n      return {\n        transform: 'translateX(' + this.gridster.curColWidth * i + 'px)',\n        width: this.gridster.curColWidth - this.gridster.$options.margin + 'px',\n        height: this.gridster.gridRows.length * this.gridster.curRowHeight - this.gridster.$options.margin + 'px'\n      };\n    }\n    /**\r\n     * @param {?} i\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"getGridRowStyle\",\n    value: function getGridRowStyle(i) {\n      return {\n        transform: 'translateY(' + this.gridster.curRowHeight * i + 'px)',\n        width: this.gridster.gridColumns.length * this.gridster.curColWidth - this.gridster.$options.margin + 'px',\n        height: this.gridster.curRowHeight - this.gridster.$options.margin + 'px'\n      };\n    }\n  }]);\n\n  return GridsterRenderer;\n}();\n\nGridsterRenderer.ɵfac = function GridsterRenderer_Factory(t) {\n  return new (t || GridsterRenderer)(ɵngcc0.ɵɵinject(GridsterComponentInterface));\n};\n\nGridsterRenderer.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: GridsterRenderer,\n  factory: GridsterRenderer.ɵfac\n});\n/** @nocollapse */\n\nGridsterRenderer.ctorParameters = function () {\n  return [{\n    type: GridsterComponentInterface\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridsterRenderer, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: GridsterComponentInterface\n    }];\n  }, null);\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\n\n\nvar GridsterComponent = /*#__PURE__*/function () {\n  /**\r\n   * @param {?} el\r\n   * @param {?} renderer\r\n   * @param {?} cdRef\r\n   * @param {?} zone\r\n   */\n  function GridsterComponent(el, renderer, cdRef, zone) {\n    _classCallCheck(this, GridsterComponent);\n\n    this.renderer = renderer;\n    this.cdRef = cdRef;\n    this.zone = zone;\n    this.gridColumns = [];\n    this.gridRows = [];\n    this.el = el.nativeElement;\n    this.$options = JSON.parse(JSON.stringify(GridsterConfigService));\n    this.calculateLayoutDebounce = GridsterUtils.debounce(this.calculateLayout.bind(this), 0);\n    this.mobile = false;\n    this.curWidth = 0;\n    this.curHeight = 0;\n    this.grid = [];\n    this.curColWidth = 0;\n    this.curRowHeight = 0;\n    this.dragInProgress = false;\n    this.emptyCell = new GridsterEmptyCell(this);\n    this.compact = new GridsterCompact(this);\n    this.gridRenderer = new GridsterRenderer(this);\n  }\n  /**\r\n   * @param {?} item\r\n   * @param {?} item2\r\n   * @return {?}\r\n   */\n\n\n  _createClass(GridsterComponent, [{\n    key: \"ngOnInit\",\n    value:\n    /**\r\n     * @return {?}\r\n     */\n    function ngOnInit() {\n      if (this.options.initCallback) {\n        this.options.initCallback(this);\n      }\n    }\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"ngOnChanges\",\n    value: function ngOnChanges(changes) {\n      if (changes[\"options\"]) {\n        this.setOptions();\n        this.options.api = {\n          optionsChanged: this.optionsChanged.bind(this),\n          resize: this.onResize.bind(this),\n          getNextPossiblePosition: this.getNextPossiblePosition.bind(this),\n          getFirstPossiblePosition: this.getFirstPossiblePosition.bind(this),\n          getLastPossiblePosition: this.getLastPossiblePosition.bind(this)\n        };\n        this.columns = this.$options.minCols;\n        this.rows = this.$options.minRows;\n        this.setGridSize();\n        this.calculateLayout();\n      }\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"resize\",\n    value: function resize() {\n      var\n      /** @type {?} */\n      height;\n      var\n      /** @type {?} */\n      width;\n\n      if (this.$options.gridType === 'fit' && !this.mobile) {\n        width = this.el.offsetWidth;\n        height = this.el.offsetHeight;\n      } else {\n        width = this.el.clientWidth;\n        height = this.el.clientHeight;\n      }\n\n      if ((width !== this.curWidth || height !== this.curHeight) && this.checkIfToResize()) {\n        this.onResize();\n      }\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"setOptions\",\n    value: function setOptions() {\n      this.$options = GridsterUtils.merge(this.$options, this.options, this.$options);\n\n      if (!this.$options.disableWindowResize && !this.windowResize) {\n        this.windowResize = this.renderer.listen('window', 'resize', this.onResize.bind(this));\n      } else if (this.$options.disableWindowResize && this.windowResize) {\n        this.windowResize();\n        this.windowResize = null;\n      }\n\n      this.emptyCell.updateOptions();\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"optionsChanged\",\n    value: function optionsChanged() {\n      this.setOptions();\n      var\n      /** @type {?} */\n      widgetsIndex = this.grid.length - 1,\n\n      /** @type {?} */\n      widget;\n\n      for (; widgetsIndex >= 0; widgetsIndex--) {\n        widget = this.grid[widgetsIndex];\n        widget.updateOptions();\n      }\n\n      this.calculateLayout();\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      if (this.windowResize) {\n        this.windowResize();\n      }\n\n      if (this.options.destroyCallback) {\n        this.options.destroyCallback(this);\n      }\n\n      if (this.options.api) {\n        this.options.api.resize = undefined;\n        this.options.api.optionsChanged = undefined;\n        this.options.api.getNextPossiblePosition = undefined;\n        this.options.api = undefined;\n      }\n\n      this.emptyCell.destroy();\n      delete this.emptyCell;\n      this.compact.destroy();\n      delete this.compact;\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"onResize\",\n    value: function onResize() {\n      this.setGridSize();\n      this.calculateLayout();\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"checkIfToResize\",\n    value: function checkIfToResize() {\n      var\n      /** @type {?} */\n      clientWidth = this.el.clientWidth;\n      var\n      /** @type {?} */\n      offsetWidth = this.el.offsetWidth;\n      var\n      /** @type {?} */\n      scrollWidth = this.el.scrollWidth;\n      var\n      /** @type {?} */\n      clientHeight = this.el.clientHeight;\n      var\n      /** @type {?} */\n      offsetHeight = this.el.offsetHeight;\n      var\n      /** @type {?} */\n      scrollHeight = this.el.scrollHeight;\n      var\n      /** @type {?} */\n      verticalScrollPresent = clientWidth < offsetWidth && scrollHeight > offsetHeight && scrollHeight - offsetHeight < offsetWidth - clientWidth;\n      var\n      /** @type {?} */\n      horizontalScrollPresent = clientHeight < offsetHeight && scrollWidth > offsetWidth && scrollWidth - offsetWidth < offsetHeight - clientHeight;\n\n      if (verticalScrollPresent) {\n        return false;\n      }\n\n      return !horizontalScrollPresent;\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"setGridSize\",\n    value: function setGridSize() {\n      var\n      /** @type {?} */\n      width = this.el.clientWidth;\n      var\n      /** @type {?} */\n      height = this.el.clientHeight;\n\n      if (this.$options.setGridSize || this.$options.gridType === 'fit' && !this.mobile) {\n        width = this.el.offsetWidth;\n        height = this.el.offsetHeight;\n      } else {\n        width = this.el.clientWidth;\n        height = this.el.clientHeight;\n      }\n\n      this.curWidth = width;\n      this.curHeight = height;\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"setGridDimensions\",\n    value: function setGridDimensions() {\n      this.setGridSize();\n\n      if (!this.mobile && this.$options.mobileBreakpoint > this.curWidth) {\n        this.mobile = !this.mobile;\n        this.renderer.addClass(this.el, 'mobile');\n      } else if (this.mobile && this.$options.mobileBreakpoint < this.curWidth) {\n        this.mobile = !this.mobile;\n        this.renderer.removeClass(this.el, 'mobile');\n      }\n\n      var\n      /** @type {?} */\n      rows = this.$options.minRows,\n\n      /** @type {?} */\n      columns = this.$options.minCols;\n      var\n      /** @type {?} */\n      widgetsIndex = this.grid.length - 1,\n\n      /** @type {?} */\n      widget;\n\n      for (; widgetsIndex >= 0; widgetsIndex--) {\n        widget = this.grid[widgetsIndex];\n\n        if (!widget.notPlaced) {\n          rows = Math.max(rows, widget.$item.y + widget.$item.rows);\n          columns = Math.max(columns, widget.$item.x + widget.$item.cols);\n        }\n      }\n\n      if (this.columns !== columns || this.rows !== rows) {\n        this.columns = columns;\n        this.rows = rows;\n\n        if (this.options.gridSizeChangedCallback) {\n          this.options.gridSizeChangedCallback(this);\n        }\n      }\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"calculateLayout\",\n    value: function calculateLayout() {\n      if (this.compact) {\n        this.compact.checkCompact();\n      }\n\n      this.setGridDimensions();\n\n      if (this.$options.outerMargin) {\n        var\n        /** @type {?} */\n        marginWidth = -this.$options.margin;\n\n        if (this.$options.outerMarginLeft !== null) {\n          marginWidth += this.$options.outerMarginLeft;\n          this.renderer.setStyle(this.el, 'padding-left', this.$options.outerMarginLeft + 'px');\n        } else {\n          marginWidth += this.$options.margin;\n          this.renderer.setStyle(this.el, 'padding-left', this.$options.margin + 'px');\n        }\n\n        if (this.$options.outerMarginRight !== null) {\n          marginWidth += this.$options.outerMarginRight;\n          this.renderer.setStyle(this.el, 'padding-right', this.$options.outerMarginRight + 'px');\n        } else {\n          marginWidth += this.$options.margin;\n          this.renderer.setStyle(this.el, 'padding-right', this.$options.margin + 'px');\n        }\n\n        this.curColWidth = (this.curWidth - marginWidth) / this.columns;\n        var\n        /** @type {?} */\n        marginHeight = -this.$options.margin;\n\n        if (this.$options.outerMarginTop !== null) {\n          marginHeight += this.$options.outerMarginTop;\n          this.renderer.setStyle(this.el, 'padding-top', this.$options.outerMarginTop + 'px');\n        } else {\n          marginHeight += this.$options.margin;\n          this.renderer.setStyle(this.el, 'padding-top', this.$options.margin + 'px');\n        }\n\n        if (this.$options.outerMarginBottom !== null) {\n          marginHeight += this.$options.outerMarginBottom;\n          this.renderer.setStyle(this.el, 'padding-bottom', this.$options.outerMarginBottom + 'px');\n        } else {\n          marginHeight += this.$options.margin;\n          this.renderer.setStyle(this.el, 'padding-bottom', this.$options.margin + 'px');\n        }\n\n        this.curRowHeight = (this.curHeight - marginHeight) / this.rows;\n      } else {\n        this.curColWidth = (this.curWidth + this.$options.margin) / this.columns;\n        this.curRowHeight = (this.curHeight + this.$options.margin) / this.rows;\n        this.renderer.setStyle(this.el, 'padding-left', 0 + 'px');\n        this.renderer.setStyle(this.el, 'padding-right', 0 + 'px');\n        this.renderer.setStyle(this.el, 'padding-top', 0 + 'px');\n        this.renderer.setStyle(this.el, 'padding-bottom', 0 + 'px');\n      }\n\n      this.gridRenderer.updateGridster();\n      this.updateGrid();\n\n      if (this.$options.setGridSize) {\n        this.renderer.setStyle(this.el, 'width', this.columns * this.curColWidth + this.$options.margin + 'px');\n        this.renderer.setStyle(this.el, 'height', this.rows * this.curRowHeight + this.$options.margin + 'px');\n      } else {\n        this.renderer.setStyle(this.el, 'width', '');\n        this.renderer.setStyle(this.el, 'height', '');\n      }\n\n      var\n      /** @type {?} */\n      widgetsIndex = this.grid.length - 1,\n\n      /** @type {?} */\n      widget;\n\n      for (; widgetsIndex >= 0; widgetsIndex--) {\n        widget = this.grid[widgetsIndex];\n        widget.setSize();\n        widget.drag.toggle();\n        widget.resize.toggle();\n      }\n\n      setTimeout(this.resize.bind(this), 100);\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"updateGrid\",\n    value: function updateGrid() {\n      if (this.$options.displayGrid === 'always' && !this.mobile) {\n        this.renderer.addClass(this.el, 'display-grid');\n      } else if (this.$options.displayGrid === 'onDrag&Resize' && this.dragInProgress) {\n        this.renderer.addClass(this.el, 'display-grid');\n      } else if (this.$options.displayGrid === 'none' || !this.dragInProgress || this.mobile) {\n        this.renderer.removeClass(this.el, 'display-grid');\n      }\n\n      this.setGridDimensions();\n      this.gridColumns.length = Math.max(this.columns, Math.floor(this.curWidth / this.curColWidth)) || 0;\n      this.gridRows.length = Math.max(this.rows, Math.floor(this.curHeight / this.curRowHeight)) || 0;\n      this.cdRef.markForCheck();\n    }\n    /**\r\n     * @param {?} itemComponent\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"addItem\",\n    value: function addItem(itemComponent) {\n      if (itemComponent.$item.cols === undefined) {\n        itemComponent.$item.cols = this.$options.defaultItemCols;\n        itemComponent.item.cols = itemComponent.$item.cols;\n        itemComponent.itemChanged();\n      }\n\n      if (itemComponent.$item.rows === undefined) {\n        itemComponent.$item.rows = this.$options.defaultItemRows;\n        itemComponent.item.rows = itemComponent.$item.rows;\n        itemComponent.itemChanged();\n      }\n\n      if (itemComponent.$item.x === -1 || itemComponent.$item.y === -1) {\n        this.autoPositionItem(itemComponent);\n      } else if (this.checkCollision(itemComponent.$item)) {\n        if (!this.$options.disableWarnings) {\n          itemComponent.notPlaced = true;\n          console.warn('Can\\'t be placed in the bounds of the dashboard, trying to auto position!/n' + JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\n        }\n\n        if (!this.$options.disableAutoPositionOnConflict) {\n          this.autoPositionItem(itemComponent);\n        } else {\n          itemComponent.notPlaced = true;\n        }\n      }\n\n      this.grid.push(itemComponent);\n      this.calculateLayoutDebounce();\n    }\n    /**\r\n     * @param {?} itemComponent\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"removeItem\",\n    value: function removeItem(itemComponent) {\n      this.grid.splice(this.grid.indexOf(itemComponent), 1);\n      this.calculateLayoutDebounce();\n\n      if (this.options.itemRemovedCallback) {\n        this.options.itemRemovedCallback(itemComponent.item, itemComponent);\n      }\n    }\n    /**\r\n     * @param {?} item\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"checkCollision\",\n    value: function checkCollision(item) {\n      var\n      /** @type {?} */\n      collision = false;\n\n      if (this.options.itemValidateCallback) {\n        collision = !this.options.itemValidateCallback(item);\n      }\n\n      if (!collision && this.checkGridCollision(item)) {\n        collision = true;\n      }\n\n      if (!collision) {\n        var\n        /** @type {?} */\n        c = this.findItemWithItem(item);\n\n        if (c) {\n          collision = c;\n        }\n      }\n\n      return collision;\n    }\n    /**\r\n     * @param {?} item\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"checkGridCollision\",\n    value: function checkGridCollision(item) {\n      var\n      /** @type {?} */\n      noNegativePosition = item.y > -1 && item.x > -1;\n      var\n      /** @type {?} */\n      maxGridCols = item.cols + item.x <= this.$options.maxCols;\n      var\n      /** @type {?} */\n      maxGridRows = item.rows + item.y <= this.$options.maxRows;\n      var\n      /** @type {?} */\n      maxItemCols = item.maxItemCols === undefined ? this.$options.maxItemCols : item.maxItemCols;\n      var\n      /** @type {?} */\n      minItemCols = item.minItemCols === undefined ? this.$options.minItemCols : item.minItemCols;\n      var\n      /** @type {?} */\n      maxItemRows = item.maxItemRows === undefined ? this.$options.maxItemRows : item.maxItemRows;\n      var\n      /** @type {?} */\n      minItemRows = item.minItemRows === undefined ? this.$options.minItemRows : item.minItemRows;\n      var\n      /** @type {?} */\n      inColsLimits = item.cols <= maxItemCols && item.cols >= minItemCols;\n      var\n      /** @type {?} */\n      inRowsLimits = item.rows <= maxItemRows && item.rows >= minItemRows;\n      var\n      /** @type {?} */\n      minAreaLimit = item.minItemArea === undefined ? this.$options.minItemArea : item.minItemArea;\n      var\n      /** @type {?} */\n      maxAreaLimit = item.maxItemArea === undefined ? this.$options.maxItemArea : item.maxItemArea;\n      var\n      /** @type {?} */\n      area = item.cols * item.rows;\n      var\n      /** @type {?} */\n      inMinArea = minAreaLimit <= area;\n      var\n      /** @type {?} */\n      inMaxArea = maxAreaLimit >= area;\n      return !(noNegativePosition && maxGridCols && maxGridRows && inColsLimits && inRowsLimits && inMinArea && inMaxArea);\n    }\n    /**\r\n     * @param {?} item\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"findItemWithItem\",\n    value: function findItemWithItem(item) {\n      var\n      /** @type {?} */\n      widgetsIndex = this.grid.length - 1,\n\n      /** @type {?} */\n      widget;\n\n      for (; widgetsIndex > -1; widgetsIndex--) {\n        widget = this.grid[widgetsIndex];\n\n        if (widget.$item !== item && GridsterComponent.checkCollisionTwoItems(widget.$item, item)) {\n          return widget;\n        }\n      }\n\n      return false;\n    }\n    /**\r\n     * @param {?} item\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"findItemsWithItem\",\n    value: function findItemsWithItem(item) {\n      var\n      /** @type {?} */\n      a = [];\n      var\n      /** @type {?} */\n      widgetsIndex = this.grid.length - 1,\n\n      /** @type {?} */\n      widget;\n\n      for (; widgetsIndex > -1; widgetsIndex--) {\n        widget = this.grid[widgetsIndex];\n\n        if (widget.$item !== item && GridsterComponent.checkCollisionTwoItems(widget.$item, item)) {\n          a.push(widget);\n        }\n      }\n\n      return a;\n    }\n    /**\r\n     * @param {?} itemComponent\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"autoPositionItem\",\n    value: function autoPositionItem(itemComponent) {\n      if (this.getNextPossiblePosition(itemComponent.$item)) {\n        itemComponent.notPlaced = false;\n        itemComponent.item.x = itemComponent.$item.x;\n        itemComponent.item.y = itemComponent.$item.y;\n        itemComponent.itemChanged();\n      } else {\n        itemComponent.notPlaced = true;\n\n        if (!this.$options.disableWarnings) {\n          console.warn('Can\\'t be placed in the bounds of the dashboard!/n' + JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\n        }\n      }\n    }\n    /**\r\n     * @param {?} newItem\r\n     * @param {?=} startingFrom\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"getNextPossiblePosition\",\n    value: function getNextPossiblePosition(newItem) {\n      var startingFrom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (newItem.cols === -1) {\n        newItem.cols = this.$options.defaultItemCols;\n      }\n\n      if (newItem.rows === -1) {\n        newItem.rows = this.$options.defaultItemRows;\n      }\n\n      this.setGridDimensions();\n      var\n      /** @type {?} */\n      rowsIndex = startingFrom.y || 0,\n\n      /** @type {?} */\n      colsIndex;\n\n      for (; rowsIndex < this.rows; rowsIndex++) {\n        newItem.y = rowsIndex;\n        colsIndex = startingFrom.x || 0;\n\n        for (; colsIndex < this.columns; colsIndex++) {\n          newItem.x = colsIndex;\n\n          if (!this.checkCollision(newItem)) {\n            return true;\n          }\n        }\n      }\n\n      var\n      /** @type {?} */\n      canAddToRows = this.$options.maxRows >= this.rows + newItem.rows;\n      var\n      /** @type {?} */\n      canAddToColumns = this.$options.maxCols >= this.columns + newItem.cols;\n      var\n      /** @type {?} */\n      addToRows = this.rows <= this.columns && canAddToRows;\n\n      if (!addToRows && canAddToColumns) {\n        newItem.x = this.columns;\n        newItem.y = 0;\n        return true;\n      } else if (canAddToRows) {\n        newItem.y = this.rows;\n        newItem.x = 0;\n        return true;\n      }\n\n      return false;\n    }\n    /**\r\n     * @param {?} item\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"getFirstPossiblePosition\",\n    value: function getFirstPossiblePosition(item) {\n      var\n      /** @type {?} */\n      tmpItem = Object.assign({}, item);\n      this.getNextPossiblePosition(tmpItem);\n      return tmpItem;\n    }\n    /**\r\n     * @param {?} item\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"getLastPossiblePosition\",\n    value: function getLastPossiblePosition(item) {\n      var\n      /** @type {?} */\n      farthestItem = {\n        y: 0,\n        x: 0\n      };\n      farthestItem = this.grid.reduce(function (prev, curr) {\n        var\n        /** @type {?} */\n        currCoords = {\n          y: curr.$item.y + curr.$item.rows - 1,\n          x: curr.$item.x + curr.$item.cols - 1\n        };\n\n        if (GridsterUtils.compareItems(prev, currCoords) === 1) {\n          return currCoords;\n        } else {\n          return prev;\n        }\n      }, farthestItem);\n      var\n      /** @type {?} */\n      tmpItem = Object.assign({}, item);\n      this.getNextPossiblePosition(tmpItem, farthestItem);\n      return tmpItem;\n    }\n    /**\r\n     * @param {?} x\r\n     * @param {?} roundingMethod\r\n     * @param {?=} noLimit\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"pixelsToPositionX\",\n    value: function pixelsToPositionX(x, roundingMethod, noLimit) {\n      var\n      /** @type {?} */\n      position = roundingMethod(x / this.curColWidth);\n\n      if (noLimit) {\n        return position;\n      } else {\n        return Math.max(position, 0);\n      }\n    }\n    /**\r\n     * @param {?} y\r\n     * @param {?} roundingMethod\r\n     * @param {?=} noLimit\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"pixelsToPositionY\",\n    value: function pixelsToPositionY(y, roundingMethod, noLimit) {\n      var\n      /** @type {?} */\n      position = roundingMethod(y / this.curRowHeight);\n\n      if (noLimit) {\n        return position;\n      } else {\n        return Math.max(position, 0);\n      }\n    }\n    /**\r\n     * @param {?} x\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"positionXToPixels\",\n    value: function positionXToPixels(x) {\n      return x * this.curColWidth;\n    }\n    /**\r\n     * @param {?} y\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"positionYToPixels\",\n    value: function positionYToPixels(y) {\n      return y * this.curRowHeight;\n    }\n  }], [{\n    key: \"checkCollisionTwoItems\",\n    value: function checkCollisionTwoItems(item, item2) {\n      return item.x < item2.x + item2.cols && item.x + item.cols > item2.x && item.y < item2.y + item2.rows && item.y + item.rows > item2.y;\n    }\n  }]);\n\n  return GridsterComponent;\n}();\n\nGridsterComponent.ɵfac = function GridsterComponent_Factory(t) {\n  return new (t || GridsterComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nGridsterComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: GridsterComponent,\n  selectors: [[\"gridster\"]],\n  inputs: {\n    options: \"options\"\n  },\n  features: [ɵngcc0.ɵɵNgOnChangesFeature],\n  ngContentSelectors: _c0,\n  decls: 4,\n  vars: 2,\n  consts: [[\"class\", \"gridster-column\", 3, \"ngStyle\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"gridster-row\", 3, \"ngStyle\", 4, \"ngFor\", \"ngForOf\"], [1, \"gridster-preview\"], [1, \"gridster-column\", 3, \"ngStyle\"], [1, \"gridster-row\", 3, \"ngStyle\"]],\n  template: function GridsterComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵtemplate(0, GridsterComponent_div_0_Template, 1, 1, \"div\", 0);\n      ɵngcc0.ɵɵtemplate(1, GridsterComponent_div_1_Template, 1, 1, \"div\", 1);\n      ɵngcc0.ɵɵprojection(2);\n      ɵngcc0.ɵɵelement(3, \"gridster-preview\", 2);\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.gridColumns);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.gridRows);\n    }\n  },\n  directives: function directives() {\n    return [ɵngcc1.NgForOf, GridsterPreviewComponent, ɵngcc1.NgStyle];\n  },\n  styles: [\"gridster{position:relative;box-sizing:border-box;background:grey;width:100%;height:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:block}gridster.fit{overflow-x:hidden;overflow-y:hidden}gridster.scrollVertical{overflow-x:hidden;overflow-y:auto}gridster.scrollHorizontal{overflow-x:auto;overflow-y:hidden}gridster.fixed{overflow:auto}gridster.mobile{overflow-x:hidden;overflow-y:auto}gridster.mobile gridster-item{position:relative}gridster .gridster-column,gridster .gridster-row{position:absolute;display:none;transition:.3s;box-sizing:border-box}gridster.display-grid .gridster-column,gridster.display-grid .gridster-row{display:block}gridster .gridster-column{border-left:1px solid #fff;border-right:1px solid #fff}gridster .gridster-row{border-top:1px solid #fff;border-bottom:1px solid #fff}\"],\n  encapsulation: 2\n});\n/** @nocollapse */\n\nGridsterComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: Renderer2\n  }, {\n    type: ChangeDetectorRef\n  }, {\n    type: NgZone\n  }];\n};\n\nGridsterComponent.propDecorators = {\n  options: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridsterComponent, [{\n    type: Component,\n    args: [{\n      selector: 'gridster',\n      template: \"<div class=\\\"gridster-column\\\" *ngFor=\\\"let column of gridColumns; let i = index;\\\"\\n     [ngStyle]=\\\"gridRenderer.getGridColumnStyle(i)\\\"></div>\\n<div class=\\\"gridster-row\\\" *ngFor=\\\"let row of gridRows; let i = index;\\\"\\n     [ngStyle]=\\\"gridRenderer.getGridRowStyle(i)\\\"></div>\\n<ng-content></ng-content>\\n<gridster-preview class=\\\"gridster-preview\\\"></gridster-preview>\\n\",\n      styles: [\"gridster{position:relative;box-sizing:border-box;background:grey;width:100%;height:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:block}gridster.fit{overflow-x:hidden;overflow-y:hidden}gridster.scrollVertical{overflow-x:hidden;overflow-y:auto}gridster.scrollHorizontal{overflow-x:auto;overflow-y:hidden}gridster.fixed{overflow:auto}gridster.mobile{overflow-x:hidden;overflow-y:auto}gridster.mobile gridster-item{position:relative}gridster .gridster-column,gridster .gridster-row{position:absolute;display:none;transition:.3s;box-sizing:border-box}gridster.display-grid .gridster-column,gridster.display-grid .gridster-row{display:block}gridster .gridster-column{border-left:1px solid #fff;border-right:1px solid #fff}gridster .gridster-row{border-top:1px solid #fff;border-bottom:1px solid #fff}\"],\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: ɵngcc0.Renderer2\n    }, {\n      type: ɵngcc0.ChangeDetectorRef\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    options: [{\n      type: Input\n    }]\n  });\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\n\n/**\r\n * @abstract\r\n */\n\n\nvar GridsterItemComponentInterface = function GridsterItemComponentInterface() {\n  _classCallCheck(this, GridsterItemComponentInterface);\n};\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\n\n\nvar GridsterSwap = /*#__PURE__*/function () {\n  /**\r\n   * @param {?} gridsterItem\r\n   */\n  function GridsterSwap(gridsterItem) {\n    _classCallCheck(this, GridsterSwap);\n\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridsterItem.gridster;\n  }\n  /**\r\n   * @return {?}\r\n   */\n\n\n  _createClass(GridsterSwap, [{\n    key: \"destroy\",\n    value: function destroy() {\n      delete this.gridster;\n      delete this.gridsterItem;\n      delete this.swapedItem;\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"swapItems\",\n    value: function swapItems() {\n      if (this.gridster.$options.swap) {\n        this.checkSwapBack();\n        this.checkSwap(this.gridsterItem);\n      }\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"checkSwapBack\",\n    value: function checkSwapBack() {\n      if (this.swapedItem) {\n        var\n        /** @type {?} */\n        x = this.swapedItem.$item.x;\n        var\n        /** @type {?} */\n        y = this.swapedItem.$item.y;\n        this.swapedItem.$item.x = this.swapedItem.item.x || 0;\n        this.swapedItem.$item.y = this.swapedItem.item.y || 0;\n\n        if (this.gridster.checkCollision(this.swapedItem.$item)) {\n          this.swapedItem.$item.x = x;\n          this.swapedItem.$item.y = y;\n        } else {\n          this.swapedItem.setSize();\n          this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n          this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n          this.swapedItem = undefined;\n        }\n      }\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"restoreSwapItem\",\n    value: function restoreSwapItem() {\n      if (this.swapedItem) {\n        this.swapedItem.$item.x = this.swapedItem.item.x || 0;\n        this.swapedItem.$item.y = this.swapedItem.item.y || 0;\n        this.swapedItem.setSize();\n        this.swapedItem = undefined;\n      }\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"setSwapItem\",\n    value: function setSwapItem() {\n      if (this.swapedItem) {\n        this.swapedItem.checkItemChanges(this.swapedItem.$item, this.swapedItem.item);\n        this.swapedItem = undefined;\n      }\n    }\n    /**\r\n     * @param {?} pushedBy\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"checkSwap\",\n    value: function checkSwap(pushedBy) {\n      var\n      /** @type {?} */\n      gridsterItemCollision = this.gridster.checkCollision(pushedBy.$item);\n\n      if (gridsterItemCollision && gridsterItemCollision !== true && gridsterItemCollision.canBeDragged()) {\n        var\n        /** @type {?} */\n        gridsterItemCollide = gridsterItemCollision;\n        var\n        /** @type {?} */\n        copyCollisionX = gridsterItemCollide.$item.x;\n        var\n        /** @type {?} */\n        copyCollisionY = gridsterItemCollide.$item.y;\n        var\n        /** @type {?} */\n        copyX = pushedBy.$item.x;\n        var\n        /** @type {?} */\n        copyY = pushedBy.$item.y;\n        gridsterItemCollide.$item.x = pushedBy.item.x || 0;\n        gridsterItemCollide.$item.y = pushedBy.item.y || 0;\n        pushedBy.$item.x = gridsterItemCollide.item.x || 0;\n        pushedBy.$item.y = gridsterItemCollide.item.y || 0;\n\n        if (this.gridster.checkCollision(gridsterItemCollide.$item) || this.gridster.checkCollision(pushedBy.$item)) {\n          pushedBy.$item.x = copyX;\n          pushedBy.$item.y = copyY;\n          gridsterItemCollide.$item.x = copyCollisionX;\n          gridsterItemCollide.$item.y = copyCollisionY;\n        } else {\n          gridsterItemCollide.setSize();\n          this.swapedItem = gridsterItemCollide;\n        }\n      }\n    }\n  }]);\n\n  return GridsterSwap;\n}();\n\nGridsterSwap.ɵfac = function GridsterSwap_Factory(t) {\n  return new (t || GridsterSwap)(ɵngcc0.ɵɵinject(GridsterItemComponentInterface));\n};\n\nGridsterSwap.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: GridsterSwap,\n  factory: GridsterSwap.ɵfac\n});\n/** @nocollapse */\n\nGridsterSwap.ctorParameters = function () {\n  return [{\n    type: GridsterItemComponentInterface\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridsterSwap, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: GridsterItemComponentInterface\n    }];\n  }, null);\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\n\n\nvar\n/** @type {?} */\nscrollSensitivity;\nvar\n/** @type {?} */\nscrollSpeed;\nvar\n/** @type {?} */\nintervalDuration = 50;\nvar\n/** @type {?} */\ngridsterElement;\nvar\n/** @type {?} */\nresizeEvent;\nvar\n/** @type {?} */\nresizeEventType;\nvar\n/** @type {?} */\nintervalE;\nvar\n/** @type {?} */\nintervalW;\nvar\n/** @type {?} */\nintervalN;\nvar\n/** @type {?} */\nintervalS;\n/**\r\n * @param {?} gridster\r\n * @param {?} left\r\n * @param {?} top\r\n * @param {?} width\r\n * @param {?} height\r\n * @param {?} e\r\n * @param {?} lastMouse\r\n * @param {?} calculateItemPosition\r\n * @param {?=} resize\r\n * @param {?=} resizeEventScrollType\r\n * @return {?}\r\n */\n\nfunction scroll(gridster, left, top, width, height, e, lastMouse, calculateItemPosition, resize, resizeEventScrollType) {\n  scrollSensitivity = gridster.$options.scrollSensitivity;\n  scrollSpeed = gridster.$options.scrollSpeed;\n  gridsterElement = gridster.el;\n  resizeEvent = resize;\n  resizeEventType = resizeEventScrollType;\n  var\n  /** @type {?} */\n  offsetWidth = gridsterElement.offsetWidth;\n  var\n  /** @type {?} */\n  offsetHeight = gridsterElement.offsetHeight;\n  var\n  /** @type {?} */\n  offsetLeft = gridsterElement.scrollLeft;\n  var\n  /** @type {?} */\n  offsetTop = gridsterElement.scrollTop;\n  var\n  /** @type {?} */\n  elemTopOffset = top - offsetTop;\n  var\n  /** @type {?} */\n  elemBottomOffset = offsetHeight + offsetTop - top - height;\n\n  if (lastMouse.clientY < e.clientY && elemBottomOffset < scrollSensitivity) {\n    cancelN();\n\n    if (resizeEvent && resizeEventType && !resizeEventType.s || intervalS) {\n      return;\n    }\n\n    intervalS = startVertical(1, calculateItemPosition, lastMouse);\n  } else if (lastMouse.clientY > e.clientY && offsetTop > 0 && elemTopOffset < scrollSensitivity) {\n    cancelS();\n\n    if (resizeEvent && resizeEventType && !resizeEventType.n || intervalN) {\n      return;\n    }\n\n    intervalN = startVertical(-1, calculateItemPosition, lastMouse);\n  } else if (lastMouse.clientY !== e.clientY) {\n    cancelVertical();\n  }\n\n  var\n  /** @type {?} */\n  elemRightOffset = offsetLeft + offsetWidth - left - width;\n  var\n  /** @type {?} */\n  elemLeftOffset = left - offsetLeft;\n\n  if (lastMouse.clientX < e.clientX && elemRightOffset <= scrollSensitivity) {\n    cancelW();\n\n    if (resizeEvent && resizeEventType && !resizeEventType.e || intervalE) {\n      return;\n    }\n\n    intervalE = startHorizontal(1, calculateItemPosition, lastMouse);\n  } else if (lastMouse.clientX > e.clientX && offsetLeft > 0 && elemLeftOffset < scrollSensitivity) {\n    cancelE();\n\n    if (resizeEvent && resizeEventType && !resizeEventType.w || intervalW) {\n      return;\n    }\n\n    intervalW = startHorizontal(-1, calculateItemPosition, lastMouse);\n  } else if (lastMouse.clientX !== e.clientX) {\n    cancelHorizontal();\n  }\n}\n/**\r\n * @param {?} sign\r\n * @param {?} calculateItemPosition\r\n * @param {?} lastMouse\r\n * @return {?}\r\n */\n\n\nfunction startVertical(sign, calculateItemPosition, lastMouse) {\n  var\n  /** @type {?} */\n  clientY = lastMouse.clientY;\n  return setInterval(function () {\n    if (!gridsterElement || sign === -1 && gridsterElement.scrollTop - scrollSpeed < 0) {\n      cancelVertical();\n    }\n\n    gridsterElement.scrollTop += sign * scrollSpeed;\n    clientY += sign * scrollSpeed;\n    calculateItemPosition({\n      clientX: lastMouse.clientX,\n      clientY: clientY\n    });\n  }, intervalDuration);\n}\n/**\r\n * @param {?} sign\r\n * @param {?} calculateItemPosition\r\n * @param {?} lastMouse\r\n * @return {?}\r\n */\n\n\nfunction startHorizontal(sign, calculateItemPosition, lastMouse) {\n  var\n  /** @type {?} */\n  clientX = lastMouse.clientX;\n  return setInterval(function () {\n    if (!gridsterElement || sign === -1 && gridsterElement.scrollLeft - scrollSpeed < 0) {\n      cancelHorizontal();\n    }\n\n    gridsterElement.scrollLeft += sign * scrollSpeed;\n    clientX += sign * scrollSpeed;\n    calculateItemPosition({\n      clientX: clientX,\n      clientY: lastMouse.clientY\n    });\n  }, intervalDuration);\n}\n/**\r\n * @return {?}\r\n */\n\n\nfunction cancelScroll() {\n  cancelHorizontal();\n  cancelVertical();\n  gridsterElement = undefined;\n}\n/**\r\n * @return {?}\r\n */\n\n\nfunction cancelHorizontal() {\n  cancelE();\n  cancelW();\n}\n/**\r\n * @return {?}\r\n */\n\n\nfunction cancelVertical() {\n  cancelN();\n  cancelS();\n}\n/**\r\n * @return {?}\r\n */\n\n\nfunction cancelE() {\n  if (intervalE) {\n    clearInterval(intervalE);\n    intervalE = 0;\n  }\n}\n/**\r\n * @return {?}\r\n */\n\n\nfunction cancelW() {\n  if (intervalW) {\n    clearInterval(intervalW);\n    intervalW = 0;\n  }\n}\n/**\r\n * @return {?}\r\n */\n\n\nfunction cancelS() {\n  if (intervalS) {\n    clearInterval(intervalS);\n    intervalS = 0;\n  }\n}\n/**\r\n * @return {?}\r\n */\n\n\nfunction cancelN() {\n  if (intervalN) {\n    clearInterval(intervalN);\n    intervalN = 0;\n  }\n}\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\n\n\nvar GridsterPush = /*#__PURE__*/function () {\n  /**\r\n   * @param {?} gridsterItem\r\n   */\n  function GridsterPush(gridsterItem) {\n    _classCallCheck(this, GridsterPush);\n\n    this.pushedItems = [];\n    this.pushedItemsTemp = [];\n    this.pushedItemsTempPath = [];\n    this.pushedItemsPath = [];\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridsterItem.gridster;\n    this.tryPattern = {\n      fromEast: [this.tryWest, this.trySouth, this.tryNorth, this.tryEast],\n      fromWest: [this.tryEast, this.trySouth, this.tryNorth, this.tryWest],\n      fromNorth: [this.trySouth, this.tryEast, this.tryWest, this.tryNorth],\n      fromSouth: [this.tryNorth, this.tryEast, this.tryWest, this.trySouth]\n    };\n    this.fromSouth = 'fromSouth';\n    this.fromNorth = 'fromNorth';\n    this.fromEast = 'fromEast';\n    this.fromWest = 'fromWest';\n  }\n  /**\r\n   * @return {?}\r\n   */\n\n\n  _createClass(GridsterPush, [{\n    key: \"destroy\",\n    value: function destroy() {\n      delete this.gridster;\n      delete this.gridsterItem;\n    }\n    /**\r\n     * @param {?} direction\r\n     * @param {?=} disable\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"pushItems\",\n    value: function pushItems(direction, disable) {\n      if (this.gridster.$options.pushItems && !disable) {\n        this.pushedItemsOrder = [];\n        var\n        /** @type {?} */\n        pushed = this.push(this.gridsterItem, direction);\n\n        if (!pushed) {\n          this.restoreTempItems();\n        }\n\n        this.pushedItemsOrder = [];\n        this.pushedItemsTemp = [];\n        this.pushedItemsTempPath = [];\n        return pushed;\n      } else {\n        return false;\n      }\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"restoreTempItems\",\n    value: function restoreTempItems() {\n      var\n      /** @type {?} */\n      i = this.pushedItemsTemp.length - 1;\n\n      for (; i > -1; i--) {\n        this.removeFromTempPushed(this.pushedItemsTemp[i]);\n      }\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"restoreItems\",\n    value: function restoreItems() {\n      var\n      /** @type {?} */\n      i = 0;\n      var\n      /** @type {?} */\n      l = this.pushedItems.length;\n      var\n      /** @type {?} */\n      pushedItem;\n\n      for (; i < l; i++) {\n        pushedItem = this.pushedItems[i];\n        pushedItem.$item.x = pushedItem.item.x || 0;\n        pushedItem.$item.y = pushedItem.item.y || 0;\n        pushedItem.setSize();\n      }\n\n      this.pushedItems = [];\n      this.pushedItemsPath = [];\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"setPushedItems\",\n    value: function setPushedItems() {\n      var\n      /** @type {?} */\n      i = 0;\n      var\n      /** @type {?} */\n      l = this.pushedItems.length;\n      var\n      /** @type {?} */\n      pushedItem;\n\n      for (; i < l; i++) {\n        pushedItem = this.pushedItems[i];\n        pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\n      }\n\n      this.pushedItems = [];\n      this.pushedItemsPath = [];\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"checkPushBack\",\n    value: function checkPushBack() {\n      var\n      /** @type {?} */\n      i = this.pushedItems.length - 1;\n      var\n      /** @type {?} */\n      change = false;\n\n      for (; i > -1; i--) {\n        if (this.checkPushedItem(this.pushedItems[i], i)) {\n          change = true;\n        }\n      }\n\n      if (change) {\n        this.checkPushBack();\n      }\n    }\n    /**\r\n     * @param {?} gridsterItem\r\n     * @param {?} direction\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"push\",\n    value: function push(gridsterItem, direction) {\n      if (this.gridster.checkGridCollision(gridsterItem.$item)) {\n        return false;\n      }\n\n      if (direction === '') {\n        return false;\n      }\n\n      var\n      /** @type {?} */\n      a = this.gridster.findItemsWithItem(gridsterItem.$item);\n      var\n      /** @type {?} */\n      i = a.length - 1,\n\n      /** @type {?} */\n      itemCollision;\n      var\n      /** @type {?} */\n      makePush = true;\n      var\n      /** @type {?} */\n      b = [];\n\n      for (; i > -1; i--) {\n        itemCollision = a[i];\n\n        if (itemCollision === this.gridsterItem) {\n          makePush = false;\n          break;\n        }\n\n        if (!itemCollision.canBeDragged()) {\n          makePush = false;\n          break;\n        }\n\n        var\n        /** @type {?} */\n        compare = this.pushedItemsTemp.find(function (el) {\n          return el.$item.x === itemCollision.$item.x && el.$item.y === itemCollision.$item.y;\n        });\n\n        if (compare) {\n          makePush = false;\n          break;\n        }\n\n        if (this.tryPattern[direction][0].call(this, itemCollision, gridsterItem)) {\n          this.pushedItemsOrder.push(itemCollision);\n          b.push(itemCollision);\n        } else if (this.tryPattern[direction][1].call(this, itemCollision, gridsterItem)) {\n          this.pushedItemsOrder.push(itemCollision);\n          b.push(itemCollision);\n        } else if (this.tryPattern[direction][2].call(this, itemCollision, gridsterItem)) {\n          this.pushedItemsOrder.push(itemCollision);\n          b.push(itemCollision);\n        } else if (this.tryPattern[direction][3].call(this, itemCollision, gridsterItem)) {\n          this.pushedItemsOrder.push(itemCollision);\n          b.push(itemCollision);\n        } else {\n          makePush = false;\n          break;\n        }\n      }\n\n      if (!makePush) {\n        i = this.pushedItemsOrder.lastIndexOf(b[0]);\n\n        if (i > -1) {\n          var\n          /** @type {?} */\n          j = this.pushedItemsOrder.length - 1;\n\n          for (; j >= i; j--) {\n            itemCollision = this.pushedItemsOrder[j];\n            this.pushedItemsOrder.pop();\n            this.removeFromTempPushed(itemCollision);\n            this.removeFromPushedItem(itemCollision);\n          }\n        }\n      }\n\n      return makePush;\n    }\n    /**\r\n     * @param {?} gridsterItemCollide\r\n     * @param {?} gridsterItem\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"trySouth\",\n    value: function trySouth(gridsterItemCollide, gridsterItem) {\n      if (!this.gridster.$options.pushDirections.south) {\n        return false;\n      }\n\n      this.addToTempPushed(gridsterItemCollide);\n      gridsterItemCollide.$item.y = gridsterItem.$item.y + gridsterItem.$item.rows;\n\n      if (this.push(gridsterItemCollide, this.fromNorth)) {\n        gridsterItemCollide.setSize();\n        this.addToPushed(gridsterItemCollide);\n        return true;\n      } else {\n        this.removeFromTempPushed(gridsterItemCollide);\n      }\n\n      return false;\n    }\n    /**\r\n     * @param {?} gridsterItemCollide\r\n     * @param {?} gridsterItem\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"tryNorth\",\n    value: function tryNorth(gridsterItemCollide, gridsterItem) {\n      if (!this.gridster.$options.pushDirections.north) {\n        return false;\n      }\n\n      this.addToTempPushed(gridsterItemCollide);\n      gridsterItemCollide.$item.y = gridsterItem.$item.y - gridsterItemCollide.$item.rows;\n\n      if (this.push(gridsterItemCollide, this.fromSouth)) {\n        gridsterItemCollide.setSize();\n        this.addToPushed(gridsterItemCollide);\n        return true;\n      } else {\n        this.removeFromTempPushed(gridsterItemCollide);\n      }\n\n      return false;\n    }\n    /**\r\n     * @param {?} gridsterItemCollide\r\n     * @param {?} gridsterItem\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"tryEast\",\n    value: function tryEast(gridsterItemCollide, gridsterItem) {\n      if (!this.gridster.$options.pushDirections.east) {\n        return false;\n      }\n\n      this.addToTempPushed(gridsterItemCollide);\n      gridsterItemCollide.$item.x = gridsterItem.$item.x + gridsterItem.$item.cols;\n\n      if (this.push(gridsterItemCollide, this.fromWest)) {\n        gridsterItemCollide.setSize();\n        this.addToPushed(gridsterItemCollide);\n        return true;\n      } else {\n        this.removeFromTempPushed(gridsterItemCollide);\n      }\n\n      return false;\n    }\n    /**\r\n     * @param {?} gridsterItemCollide\r\n     * @param {?} gridsterItem\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"tryWest\",\n    value: function tryWest(gridsterItemCollide, gridsterItem) {\n      if (!this.gridster.$options.pushDirections.west) {\n        return false;\n      }\n\n      this.addToTempPushed(gridsterItemCollide);\n      gridsterItemCollide.$item.x = gridsterItem.$item.x - gridsterItemCollide.$item.cols;\n\n      if (this.push(gridsterItemCollide, this.fromEast)) {\n        gridsterItemCollide.setSize();\n        this.addToPushed(gridsterItemCollide);\n        return true;\n      } else {\n        this.removeFromTempPushed(gridsterItemCollide);\n      }\n\n      return false;\n    }\n    /**\r\n     * @param {?} gridsterItem\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"addToTempPushed\",\n    value: function addToTempPushed(gridsterItem) {\n      var\n      /** @type {?} */\n      i = this.pushedItemsTemp.indexOf(gridsterItem);\n\n      if (i === -1) {\n        i = this.pushedItemsTemp.push(gridsterItem) - 1;\n        this.pushedItemsTempPath[i] = [];\n      }\n\n      this.pushedItemsTempPath[i].push({\n        x: gridsterItem.$item.x,\n        y: gridsterItem.$item.y\n      });\n    }\n    /**\r\n     * @param {?} gridsterItem\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"removeFromTempPushed\",\n    value: function removeFromTempPushed(gridsterItem) {\n      var\n      /** @type {?} */\n      i = this.pushedItemsTemp.indexOf(gridsterItem);\n      var\n      /** @type {?} */\n      tempPosition = this.pushedItemsTempPath[i].pop();\n\n      if (!tempPosition) {\n        return;\n      }\n\n      gridsterItem.$item.x = tempPosition.x;\n      gridsterItem.$item.y = tempPosition.y;\n      gridsterItem.setSize();\n\n      if (!this.pushedItemsTempPath[i].length) {\n        this.pushedItemsTemp.splice(i, 1);\n        this.pushedItemsTempPath.splice(i, 1);\n      }\n    }\n    /**\r\n     * @param {?} gridsterItem\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"addToPushed\",\n    value: function addToPushed(gridsterItem) {\n      if (this.pushedItems.indexOf(gridsterItem) < 0) {\n        this.pushedItems.push(gridsterItem);\n        this.pushedItemsPath.push([{\n          x: gridsterItem.item.x || 0,\n          y: gridsterItem.item.y || 0\n        }, {\n          x: gridsterItem.$item.x,\n          y: gridsterItem.$item.y\n        }]);\n      } else {\n        var\n        /** @type {?} */\n        i = this.pushedItems.indexOf(gridsterItem);\n        this.pushedItemsPath[i].push({\n          x: gridsterItem.$item.x,\n          y: gridsterItem.$item.y\n        });\n      }\n    }\n    /**\r\n     * @param {?} i\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"removeFromPushed\",\n    value: function removeFromPushed(i) {\n      if (i > -1) {\n        this.pushedItems.splice(i, 1);\n        this.pushedItemsPath.splice(i, 1);\n      }\n    }\n    /**\r\n     * @param {?} gridsterItem\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"removeFromPushedItem\",\n    value: function removeFromPushedItem(gridsterItem) {\n      var\n      /** @type {?} */\n      i = this.pushedItems.indexOf(gridsterItem);\n\n      if (i > -1) {\n        this.pushedItemsPath[i].pop();\n\n        if (!this.pushedItemsPath.length) {\n          this.pushedItems.splice(i, 1);\n          this.pushedItemsPath.splice(i, 1);\n        }\n      }\n    }\n    /**\r\n     * @param {?} pushedItem\r\n     * @param {?} i\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"checkPushedItem\",\n    value: function checkPushedItem(pushedItem, i) {\n      var\n      /** @type {?} */\n      path = this.pushedItemsPath[i];\n      var\n      /** @type {?} */\n      j = path.length - 2;\n      var\n      /** @type {?} */\n      lastPosition,\n      /** @type {?} */\n      x,\n      /** @type {?} */\n      y;\n      var\n      /** @type {?} */\n      change = false;\n\n      for (; j > -1; j--) {\n        lastPosition = path[j];\n        x = pushedItem.$item.x;\n        y = pushedItem.$item.y;\n        pushedItem.$item.x = lastPosition.x;\n        pushedItem.$item.y = lastPosition.y;\n\n        if (!this.gridster.findItemWithItem(pushedItem.$item)) {\n          pushedItem.setSize();\n          path.splice(j + 1, path.length - j - 1);\n          change = true;\n        } else {\n          pushedItem.$item.x = x;\n          pushedItem.$item.y = y;\n        }\n      }\n\n      if (path.length < 2) {\n        this.removeFromPushed(i);\n      }\n\n      return change;\n    }\n  }]);\n\n  return GridsterPush;\n}();\n\nGridsterPush.ɵfac = function GridsterPush_Factory(t) {\n  return new (t || GridsterPush)(ɵngcc0.ɵɵinject(GridsterItemComponentInterface));\n};\n\nGridsterPush.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: GridsterPush,\n  factory: GridsterPush.ɵfac\n});\n/** @nocollapse */\n\nGridsterPush.ctorParameters = function () {\n  return [{\n    type: GridsterItemComponentInterface\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridsterPush, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: GridsterItemComponentInterface\n    }];\n  }, null);\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\n\n\nvar GridsterDraggable = /*#__PURE__*/function () {\n  /**\r\n   * @param {?} gridsterItem\r\n   * @param {?} gridster\r\n   * @param {?} zone\r\n   */\n  function GridsterDraggable(gridsterItem, gridster, zone) {\n    _classCallCheck(this, GridsterDraggable);\n\n    this.zone = zone;\n    this.collision = false;\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridster;\n    this.lastMouse = {\n      clientX: 0,\n      clientY: 0\n    };\n    this.path = [];\n  }\n  /**\r\n   * @return {?}\r\n   */\n\n\n  _createClass(GridsterDraggable, [{\n    key: \"destroy\",\n    value: function destroy() {\n      delete this.gridster.movingItem;\n\n      if (this.gridster.previewStyle) {\n        this.gridster.previewStyle(true);\n      }\n\n      delete this.gridsterItem;\n      delete this.gridster;\n      delete this.collision;\n\n      if (this.mousedown) {\n        this.mousedown();\n        this.touchstart();\n      }\n    }\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"dragStart\",\n    value: function dragStart(e) {\n      var _this4 = this;\n\n      switch (e.which) {\n        case 1:\n          // left mouse button\n          break;\n\n        case 2:\n        case 3:\n          // right or middle mouse button\n          return;\n      }\n\n      if (this.gridster.options.draggable && this.gridster.options.draggable.start) {\n        this.gridster.options.draggable.start(this.gridsterItem.item, this.gridsterItem, e);\n      }\n\n      e.stopPropagation();\n      e.preventDefault();\n      this.dragFunction = this.dragMove.bind(this);\n      this.dragStopFunction = this.dragStop.bind(this);\n      this.zone.runOutsideAngular(function () {\n        _this4.mousemove = _this4.gridsterItem.renderer.listen('document', 'mousemove', _this4.dragFunction);\n        _this4.touchmove = _this4.gridster.renderer.listen(_this4.gridster.el, 'touchmove', _this4.dragFunction);\n      });\n      this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStopFunction);\n      this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStopFunction);\n      this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStopFunction);\n      this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStopFunction);\n      this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-moving');\n      this.margin = this.gridster.$options.margin;\n      this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n      this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n      this.left = this.gridsterItem.left - this.margin;\n      this.top = this.gridsterItem.top - this.margin;\n      this.width = this.gridsterItem.width;\n      this.height = this.gridsterItem.height;\n      this.diffLeft = e.clientX + this.offsetLeft - this.margin - this.left;\n      this.diffTop = e.clientY + this.offsetTop - this.margin - this.top;\n      this.gridster.movingItem = this.gridsterItem.$item;\n      this.gridster.previewStyle(true);\n      this.push = new GridsterPush(this.gridsterItem);\n      this.swap = new GridsterSwap(this.gridsterItem);\n      this.gridster.dragInProgress = true;\n      this.gridster.updateGrid();\n      this.path.push({\n        x: this.gridsterItem.item.x || 0,\n        y: this.gridsterItem.item.y || 0\n      });\n    }\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"dragMove\",\n    value: function dragMove(e) {\n      e.stopPropagation();\n      e.preventDefault();\n      GridsterUtils.checkTouchEvent(e);\n      this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n      this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n      scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse, this.calculateItemPositionFromMousePosition.bind(this));\n      this.calculateItemPositionFromMousePosition(e);\n    }\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"calculateItemPositionFromMousePosition\",\n    value: function calculateItemPositionFromMousePosition(e) {\n      var _this5 = this;\n\n      this.left = e.clientX + this.offsetLeft - this.diffLeft;\n      this.top = e.clientY + this.offsetTop - this.diffTop;\n      this.calculateItemPosition();\n      this.lastMouse.clientX = e.clientX;\n      this.lastMouse.clientY = e.clientY;\n      this.zone.run(function () {\n        _this5.gridster.updateGrid();\n      });\n    }\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"dragStop\",\n    value: function dragStop(e) {\n      var _this6 = this;\n\n      e.stopPropagation();\n      e.preventDefault();\n      cancelScroll();\n      this.cancelOnBlur();\n      this.mousemove();\n      this.mouseup();\n      this.touchmove();\n      this.touchend();\n      this.touchcancel();\n      this.gridsterItem.renderer.removeClass(this.gridsterItem.el, 'gridster-item-moving');\n      this.gridster.dragInProgress = false;\n      this.gridster.updateGrid();\n      this.path = [];\n\n      if (this.gridster.options.draggable && this.gridster.options.draggable.stop) {\n        Promise.resolve(this.gridster.options.draggable.stop(this.gridsterItem.item, this.gridsterItem, e)).then(this.makeDrag.bind(this), this.cancelDrag.bind(this));\n      } else {\n        this.makeDrag();\n      }\n\n      setTimeout(function () {\n        if (_this6.gridster) {\n          _this6.gridster.movingItem = null;\n\n          _this6.gridster.previewStyle(true);\n        }\n      });\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"cancelDrag\",\n    value: function cancelDrag() {\n      this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n      this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n      this.gridsterItem.setSize();\n      this.push.restoreItems();\n      this.swap.restoreSwapItem();\n      this.push.destroy();\n      delete this.push;\n      this.swap.destroy();\n      delete this.swap;\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"makeDrag\",\n    value: function makeDrag() {\n      if (this.gridster.$options.draggable.dropOverItems && this.gridster.options.draggable && this.gridster.options.draggable.dropOverItemsCallback && this.collision && this.collision !== true && this.collision.$item) {\n        this.gridster.options.draggable.dropOverItemsCallback(this.gridsterItem.item, this.collision.item, this.gridster);\n      }\n\n      this.collision = false;\n      this.gridsterItem.setSize();\n      this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n      this.push.setPushedItems();\n      this.swap.setSwapItem();\n      this.push.destroy();\n      delete this.push;\n      this.swap.destroy();\n      delete this.swap;\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"calculateItemPosition\",\n    value: function calculateItemPosition() {\n      this.gridster.movingItem = this.gridsterItem.$item;\n      this.positionX = this.gridster.pixelsToPositionX(this.left, Math.round);\n      this.positionY = this.gridster.pixelsToPositionY(this.top, Math.round);\n      this.positionXBackup = this.gridsterItem.$item.x;\n      this.positionYBackup = this.gridsterItem.$item.y;\n      this.gridsterItem.$item.x = this.positionX;\n\n      if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\n        this.gridsterItem.$item.x = this.positionXBackup;\n      }\n\n      this.gridsterItem.$item.y = this.positionY;\n\n      if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\n        this.gridsterItem.$item.y = this.positionYBackup;\n      }\n\n      var\n      /** @type {?} */\n      transform = 'translate(' + this.left + 'px, ' + this.top + 'px)';\n      this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'transform', transform);\n\n      if (this.positionXBackup !== this.gridsterItem.$item.x || this.positionYBackup !== this.gridsterItem.$item.y) {\n        var\n        /** @type {?} */\n        lastPosition = this.path[this.path.length - 1];\n        var\n        /** @type {?} */\n        direction = '';\n\n        if (lastPosition.x < this.gridsterItem.$item.x) {\n          direction = this.push.fromWest;\n        } else if (lastPosition.x > this.gridsterItem.$item.x) {\n          direction = this.push.fromEast;\n        } else if (lastPosition.y < this.gridsterItem.$item.y) {\n          direction = this.push.fromNorth;\n        } else if (lastPosition.y > this.gridsterItem.$item.y) {\n          direction = this.push.fromSouth;\n        }\n\n        this.push.pushItems(direction, this.gridster.$options.disablePushOnDrag);\n        this.swap.swapItems();\n        this.collision = this.gridster.checkCollision(this.gridsterItem.$item);\n\n        if (this.collision) {\n          this.gridsterItem.$item.x = this.positionXBackup;\n          this.gridsterItem.$item.y = this.positionYBackup;\n\n          if (this.gridster.$options.draggable.dropOverItems && this.collision !== true && this.collision.$item) {\n            this.gridster.movingItem = null;\n          }\n        } else {\n          this.path.push({\n            x: this.gridsterItem.$item.x,\n            y: this.gridsterItem.$item.y\n          });\n        }\n\n        this.push.checkPushBack();\n      }\n\n      this.gridster.previewStyle(true);\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      var\n      /** @type {?} */\n      enableDrag = this.gridsterItem.canBeDragged();\n\n      if (!this.enabled && enableDrag) {\n        this.enabled = !this.enabled;\n        this.dragStartFunction = this.dragStartDelay.bind(this);\n        this.mousedown = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'mousedown', this.dragStartFunction);\n        this.touchstart = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'touchstart', this.dragStartFunction);\n      } else if (this.enabled && !enableDrag) {\n        this.enabled = !this.enabled;\n        this.mousedown();\n        this.touchstart();\n      }\n    }\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"dragStartDelay\",\n    value: function dragStartDelay(e) {\n      var _this7 = this;\n\n      if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('gridster-item-resizable-handler') > -1) {\n        return;\n      }\n\n      if (GridsterUtils.checkContentClassForEvent(this.gridster, e)) {\n        return;\n      }\n\n      GridsterUtils.checkTouchEvent(e);\n\n      if (!this.gridster.$options.draggable.delayStart) {\n        this.dragStart(e);\n        return;\n      }\n\n      var\n      /** @type {?} */\n      timeout = setTimeout(function () {\n        _this7.dragStart(e);\n\n        cancelDrag();\n      }, this.gridster.$options.draggable.delayStart);\n      var\n      /** @type {?} */\n      cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\n      var\n      /** @type {?} */\n      cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\n      var\n      /** @type {?} */\n      cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\n      var\n      /** @type {?} */\n      cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\n      var\n      /** @type {?} */\n      cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\n      /**\r\n       * @param {?} eventMove\r\n       * @return {?}\r\n       */\n\n      function cancelMove(eventMove) {\n        GridsterUtils.checkTouchEvent(eventMove);\n\n        if (Math.abs(eventMove.clientX - e.clientX) > 9 || Math.abs(eventMove.clientY - e.clientY) > 9) {\n          cancelDrag();\n        }\n      }\n      /**\r\n       * @return {?}\r\n       */\n\n\n      function cancelDrag() {\n        clearTimeout(timeout);\n        cancelOnBlur();\n        cancelMouse();\n        cancelTouchMove();\n        cancelTouchEnd();\n        cancelTouchCancel();\n      }\n    }\n  }]);\n\n  return GridsterDraggable;\n}();\n\nGridsterDraggable.ɵfac = function GridsterDraggable_Factory(t) {\n  return new (t || GridsterDraggable)(ɵngcc0.ɵɵinject(GridsterItemComponentInterface), ɵngcc0.ɵɵinject(GridsterComponentInterface), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\n\nGridsterDraggable.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: GridsterDraggable,\n  factory: GridsterDraggable.ɵfac\n});\n/** @nocollapse */\n\nGridsterDraggable.ctorParameters = function () {\n  return [{\n    type: GridsterItemComponentInterface\n  }, {\n    type: GridsterComponentInterface\n  }, {\n    type: NgZone\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridsterDraggable, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: GridsterItemComponentInterface\n    }, {\n      type: GridsterComponentInterface\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\n\n\nvar GridsterPushResize = /*#__PURE__*/function () {\n  /**\r\n   * @param {?} gridsterItem\r\n   */\n  function GridsterPushResize(gridsterItem) {\n    _classCallCheck(this, GridsterPushResize);\n\n    this.pushedItems = [];\n    this.pushedItemsPath = [];\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridsterItem.gridster;\n    this.tryPattern = {\n      fromEast: this.tryWest,\n      fromWest: this.tryEast,\n      fromNorth: this.trySouth,\n      fromSouth: this.tryNorth\n    };\n    this.fromSouth = 'fromSouth';\n    this.fromNorth = 'fromNorth';\n    this.fromEast = 'fromEast';\n    this.fromWest = 'fromWest';\n  }\n  /**\r\n   * @return {?}\r\n   */\n\n\n  _createClass(GridsterPushResize, [{\n    key: \"destroy\",\n    value: function destroy() {\n      delete this.gridster;\n      delete this.gridsterItem;\n    }\n    /**\r\n     * @param {?} direction\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"pushItems\",\n    value: function pushItems(direction) {\n      if (this.gridster.$options.pushResizeItems) {\n        return this.push(this.gridsterItem, direction);\n      } else {\n        return false;\n      }\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"restoreItems\",\n    value: function restoreItems() {\n      var\n      /** @type {?} */\n      i = 0;\n      var\n      /** @type {?} */\n      l = this.pushedItems.length;\n      var\n      /** @type {?} */\n      pushedItem;\n\n      for (; i < l; i++) {\n        pushedItem = this.pushedItems[i];\n        pushedItem.$item.x = pushedItem.item.x || 0;\n        pushedItem.$item.y = pushedItem.item.y || 0;\n        pushedItem.$item.cols = pushedItem.item.cols || 1;\n        pushedItem.$item[\"row\"] = pushedItem.item[\"row\"] || 1;\n        pushedItem.setSize();\n      }\n\n      this.pushedItems = [];\n      this.pushedItemsPath = [];\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"setPushedItems\",\n    value: function setPushedItems() {\n      var\n      /** @type {?} */\n      i = 0;\n      var\n      /** @type {?} */\n      l = this.pushedItems.length;\n      var\n      /** @type {?} */\n      pushedItem;\n\n      for (; i < l; i++) {\n        pushedItem = this.pushedItems[i];\n        pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\n      }\n\n      this.pushedItems = [];\n      this.pushedItemsPath = [];\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"checkPushBack\",\n    value: function checkPushBack() {\n      var\n      /** @type {?} */\n      i = this.pushedItems.length - 1;\n      var\n      /** @type {?} */\n      change = false;\n\n      for (; i > -1; i--) {\n        if (this.checkPushedItem(this.pushedItems[i], i)) {\n          change = true;\n        }\n      }\n\n      if (change) {\n        this.checkPushBack();\n      }\n    }\n    /**\r\n     * @param {?} gridsterItem\r\n     * @param {?} direction\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"push\",\n    value: function push(gridsterItem, direction) {\n      var\n      /** @type {?} */\n      gridsterItemCollision = this.gridster.checkCollision(gridsterItem.$item);\n\n      if (gridsterItemCollision && gridsterItemCollision !== true && gridsterItemCollision !== this.gridsterItem && gridsterItemCollision.canBeResized()) {\n        if (this.tryPattern[direction].call(this, gridsterItemCollision, gridsterItem, direction)) {\n          return true;\n        }\n      } else if (gridsterItemCollision === false) {\n        return true;\n      }\n\n      return false;\n    }\n    /**\r\n     * @param {?} gridsterItemCollide\r\n     * @param {?} gridsterItem\r\n     * @param {?} direction\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"trySouth\",\n    value: function trySouth(gridsterItemCollide, gridsterItem, direction) {\n      var\n      /** @type {?} */\n      backUpY = gridsterItemCollide.$item.y;\n      var\n      /** @type {?} */\n      backUpRows = gridsterItemCollide.$item.rows;\n      gridsterItemCollide.$item.y = gridsterItem.$item.y + gridsterItem.$item.rows;\n      gridsterItemCollide.$item.rows = backUpRows + backUpY - gridsterItemCollide.$item.y;\n\n      if (!GridsterComponent.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item) && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n        gridsterItemCollide.setSize();\n        this.addToPushed(gridsterItemCollide);\n        this.push(gridsterItem, direction);\n        return true;\n      } else {\n        gridsterItemCollide.$item.y = backUpY;\n        gridsterItemCollide.$item.rows = backUpRows;\n      }\n\n      return false;\n    }\n    /**\r\n     * @param {?} gridsterItemCollide\r\n     * @param {?} gridsterItem\r\n     * @param {?} direction\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"tryNorth\",\n    value: function tryNorth(gridsterItemCollide, gridsterItem, direction) {\n      var\n      /** @type {?} */\n      backUpRows = gridsterItemCollide.$item.rows;\n      gridsterItemCollide.$item.rows = gridsterItem.$item.y - gridsterItemCollide.$item.y;\n\n      if (!GridsterComponent.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item) && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n        gridsterItemCollide.setSize();\n        this.addToPushed(gridsterItemCollide);\n        this.push(gridsterItem, direction);\n        return true;\n      } else {\n        gridsterItemCollide.$item.rows = backUpRows;\n      }\n\n      return false;\n    }\n    /**\r\n     * @param {?} gridsterItemCollide\r\n     * @param {?} gridsterItem\r\n     * @param {?} direction\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"tryEast\",\n    value: function tryEast(gridsterItemCollide, gridsterItem, direction) {\n      var\n      /** @type {?} */\n      backUpX = gridsterItemCollide.$item.x;\n      var\n      /** @type {?} */\n      backUpCols = gridsterItemCollide.$item.cols;\n      gridsterItemCollide.$item.x = gridsterItem.$item.x + gridsterItem.$item.cols;\n      gridsterItemCollide.$item.cols = backUpCols + backUpX - gridsterItemCollide.$item.x;\n\n      if (!GridsterComponent.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item) && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n        gridsterItemCollide.setSize();\n        this.addToPushed(gridsterItemCollide);\n        this.push(gridsterItem, direction);\n        return true;\n      } else {\n        gridsterItemCollide.$item.x = backUpX;\n        gridsterItemCollide.$item.cols = backUpCols;\n      }\n\n      return false;\n    }\n    /**\r\n     * @param {?} gridsterItemCollide\r\n     * @param {?} gridsterItem\r\n     * @param {?} direction\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"tryWest\",\n    value: function tryWest(gridsterItemCollide, gridsterItem, direction) {\n      var\n      /** @type {?} */\n      backUpCols = gridsterItemCollide.$item.cols;\n      gridsterItemCollide.$item.cols = gridsterItem.$item.x - gridsterItemCollide.$item.x;\n\n      if (!GridsterComponent.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item) && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\n        gridsterItemCollide.setSize();\n        this.addToPushed(gridsterItemCollide);\n        this.push(gridsterItem, direction);\n        return true;\n      } else {\n        gridsterItemCollide.$item.cols = backUpCols;\n      }\n\n      return false;\n    }\n    /**\r\n     * @param {?} gridsterItem\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"addToPushed\",\n    value: function addToPushed(gridsterItem) {\n      if (this.pushedItems.indexOf(gridsterItem) < 0) {\n        this.pushedItems.push(gridsterItem);\n        this.pushedItemsPath.push([{\n          x: gridsterItem.item.x || 0,\n          y: gridsterItem.item.y || 0,\n          cols: gridsterItem.item.cols || 0,\n          rows: gridsterItem.item.rows || 0\n        }, {\n          x: gridsterItem.$item.x,\n          y: gridsterItem.$item.y,\n          cols: gridsterItem.$item.cols,\n          rows: gridsterItem.$item.rows\n        }]);\n      } else {\n        var\n        /** @type {?} */\n        i = this.pushedItems.indexOf(gridsterItem);\n        this.pushedItemsPath[i].push({\n          x: gridsterItem.$item.x,\n          y: gridsterItem.$item.y,\n          cols: gridsterItem.$item.cols,\n          rows: gridsterItem.$item.rows\n        });\n      }\n    }\n    /**\r\n     * @param {?} i\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"removeFromPushed\",\n    value: function removeFromPushed(i) {\n      if (i > -1) {\n        this.pushedItems.splice(i, 1);\n        this.pushedItemsPath.splice(i, 1);\n      }\n    }\n    /**\r\n     * @param {?} pushedItem\r\n     * @param {?} i\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"checkPushedItem\",\n    value: function checkPushedItem(pushedItem, i) {\n      var\n      /** @type {?} */\n      path = this.pushedItemsPath[i];\n      var\n      /** @type {?} */\n      j = path.length - 2;\n      var\n      /** @type {?} */\n      lastPosition,\n      /** @type {?} */\n      x,\n      /** @type {?} */\n      y,\n      /** @type {?} */\n      cols,\n      /** @type {?} */\n      rows;\n\n      for (; j > -1; j--) {\n        lastPosition = path[j];\n        x = pushedItem.$item.x;\n        y = pushedItem.$item.y;\n        cols = pushedItem.$item.cols;\n        rows = pushedItem.$item.rows;\n        pushedItem.$item.x = lastPosition.x;\n        pushedItem.$item.y = lastPosition.y;\n        pushedItem.$item.cols = lastPosition.cols;\n        pushedItem.$item.rows = lastPosition.rows;\n\n        if (!this.gridster.findItemWithItem(pushedItem.$item)) {\n          pushedItem.setSize();\n          path.splice(j + 1, path.length - 1 - j);\n        } else {\n          pushedItem.$item.x = x;\n          pushedItem.$item.y = y;\n          pushedItem.$item.cols = cols;\n          pushedItem.$item.rows = rows;\n        }\n      }\n\n      if (path.length < 2) {\n        this.removeFromPushed(i);\n        return true;\n      }\n\n      return false;\n    }\n  }]);\n\n  return GridsterPushResize;\n}();\n\nGridsterPushResize.ɵfac = function GridsterPushResize_Factory(t) {\n  return new (t || GridsterPushResize)(ɵngcc0.ɵɵinject(GridsterItemComponentInterface));\n};\n\nGridsterPushResize.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: GridsterPushResize,\n  factory: GridsterPushResize.ɵfac\n});\n/** @nocollapse */\n\nGridsterPushResize.ctorParameters = function () {\n  return [{\n    type: GridsterItemComponentInterface\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridsterPushResize, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: GridsterItemComponentInterface\n    }];\n  }, null);\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\n\n\nvar GridsterResizable = /*#__PURE__*/function () {\n  /**\r\n   * @param {?} gridsterItem\r\n   * @param {?} gridster\r\n   * @param {?} zone\r\n   */\n  function GridsterResizable(gridsterItem, gridster, zone) {\n    _classCallCheck(this, GridsterResizable);\n\n    this.zone = zone;\n    this.gridsterItem = gridsterItem;\n    this.gridster = gridster;\n    this.lastMouse = {\n      clientX: 0,\n      clientY: 0\n    };\n    this.itemBackup = [0, 0, 0, 0];\n    this.resizeEventScrollType = {\n      w: false,\n      e: false,\n      n: false,\n      s: false\n    };\n  }\n  /**\r\n   * @return {?}\r\n   */\n\n\n  _createClass(GridsterResizable, [{\n    key: \"destroy\",\n    value: function destroy() {\n      delete this.gridster.movingItem;\n\n      if (this.gridster.previewStyle) {\n        this.gridster.previewStyle();\n      }\n\n      delete this.gridsterItem;\n      delete this.gridster;\n    }\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"dragStart\",\n    value: function dragStart(e) {\n      var _this8 = this;\n\n      switch (e.which) {\n        case 1:\n          // left mouse button\n          break;\n\n        case 2:\n        case 3:\n          // right or middle mouse button\n          return;\n      }\n\n      if (this.gridster.options.resizable && this.gridster.options.resizable.start) {\n        this.gridster.options.resizable.start(this.gridsterItem.item, this.gridsterItem, e);\n      }\n\n      e.stopPropagation();\n      e.preventDefault();\n      this.dragFunction = this.dragMove.bind(this);\n      this.dragStopFunction = this.dragStop.bind(this);\n      this.zone.runOutsideAngular(function () {\n        _this8.mousemove = _this8.gridsterItem.renderer.listen('document', 'mousemove', _this8.dragFunction);\n        _this8.touchmove = _this8.gridster.renderer.listen(_this8.gridster.el, 'touchmove', _this8.dragFunction);\n      });\n      this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStopFunction);\n      this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStopFunction);\n      this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStopFunction);\n      this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStopFunction);\n      this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-resizing');\n      this.lastMouse.clientX = e.clientX;\n      this.lastMouse.clientY = e.clientY;\n      this.left = this.gridsterItem.left;\n      this.top = this.gridsterItem.top;\n      this.width = this.gridsterItem.width;\n      this.height = this.gridsterItem.height;\n      this.bottom = this.gridsterItem.top + this.gridsterItem.height;\n      this.right = this.gridsterItem.left + this.gridsterItem.width;\n      this.margin = this.gridster.$options.margin;\n      this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n      this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n      this.diffLeft = e.clientX + this.offsetLeft - this.left;\n      this.diffRight = e.clientX + this.offsetLeft - this.right;\n      this.diffTop = e.clientY + this.offsetTop - this.top;\n      this.diffBottom = e.clientY + this.offsetTop - this.bottom;\n      this.minHeight = this.gridster.positionYToPixels(this.gridsterItem.$item.minItemRows || this.gridster.$options.minItemRows) - this.margin;\n      this.minWidth = this.gridster.positionXToPixels(this.gridsterItem.$item.minItemCols || this.gridster.$options.minItemCols) - this.margin;\n      this.gridster.movingItem = this.gridsterItem.$item;\n      this.gridster.previewStyle();\n      this.push = new GridsterPush(this.gridsterItem);\n      this.pushResize = new GridsterPushResize(this.gridsterItem);\n      this.gridster.dragInProgress = true;\n      this.gridster.updateGrid();\n\n      if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-n') > -1) {\n        this.resizeEventScrollType.n = true;\n        this.directionFunction = this.handleN;\n      } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-w') > -1) {\n        this.resizeEventScrollType.w = true;\n        this.directionFunction = this.handleW;\n      } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-s') > -1) {\n        this.resizeEventScrollType.s = true;\n        this.directionFunction = this.handleS;\n      } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-e') > -1) {\n        this.resizeEventScrollType.e = true;\n        this.directionFunction = this.handleE;\n      } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-nw') > -1) {\n        this.resizeEventScrollType.n = true;\n        this.resizeEventScrollType.w = true;\n        this.directionFunction = this.handleNW;\n      } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-ne') > -1) {\n        this.resizeEventScrollType.n = true;\n        this.resizeEventScrollType.e = true;\n        this.directionFunction = this.handleNE;\n      } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-sw') > -1) {\n        this.resizeEventScrollType.s = true;\n        this.resizeEventScrollType.w = true;\n        this.directionFunction = this.handleSW;\n      } else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-se') > -1) {\n        this.resizeEventScrollType.s = true;\n        this.resizeEventScrollType.e = true;\n        this.directionFunction = this.handleSE;\n      }\n    }\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"dragMove\",\n    value: function dragMove(e) {\n      var _this9 = this;\n\n      e.stopPropagation();\n      e.preventDefault();\n      GridsterUtils.checkTouchEvent(e);\n      this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\n      this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\n      scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse, this.directionFunction.bind(this), true, this.resizeEventScrollType);\n      this.directionFunction(e);\n      this.lastMouse.clientX = e.clientX;\n      this.lastMouse.clientY = e.clientY;\n      this.zone.run(function () {\n        _this9.gridster.updateGrid();\n      });\n    }\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"dragStop\",\n    value: function dragStop(e) {\n      var _this10 = this;\n\n      e.stopPropagation();\n      e.preventDefault();\n      cancelScroll();\n      this.mousemove();\n      this.mouseup();\n      this.cancelOnBlur();\n      this.touchmove();\n      this.touchend();\n      this.touchcancel();\n      this.gridster.dragInProgress = false;\n      this.gridster.updateGrid();\n\n      if (this.gridster.options.resizable && this.gridster.options.resizable.stop) {\n        Promise.resolve(this.gridster.options.resizable.stop(this.gridsterItem.item, this.gridsterItem, e)).then(this.makeResize.bind(this), this.cancelResize.bind(this));\n      } else {\n        this.makeResize();\n      }\n\n      setTimeout(function () {\n        _this10.gridsterItem.renderer.removeClass(_this10.gridsterItem.el, 'gridster-item-resizing');\n\n        if (_this10.gridster) {\n          _this10.gridster.movingItem = null;\n\n          _this10.gridster.previewStyle();\n        }\n      });\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"cancelResize\",\n    value: function cancelResize() {\n      this.gridsterItem.$item.cols = this.gridsterItem.item.cols || 1;\n      this.gridsterItem.$item.rows = this.gridsterItem.item.rows || 1;\n      this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\n      this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\n      this.gridsterItem.setSize();\n      this.push.restoreItems();\n      this.pushResize.restoreItems();\n      this.push.destroy();\n      delete this.push;\n      this.pushResize.destroy();\n      delete this.pushResize;\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"makeResize\",\n    value: function makeResize() {\n      this.gridsterItem.setSize();\n      this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\n      this.push.setPushedItems();\n      this.pushResize.setPushedItems();\n      this.push.destroy();\n      delete this.push;\n      this.pushResize.destroy();\n      delete this.pushResize;\n    }\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"handleN\",\n    value: function handleN(e) {\n      this.top = e.clientY + this.offsetTop - this.diffTop;\n      this.height = this.bottom - this.top;\n\n      if (this.minHeight > this.height) {\n        this.height = this.minHeight;\n        this.top = this.bottom - this.minHeight;\n      }\n\n      this.newPosition = this.gridster.pixelsToPositionY(this.top + this.margin, Math.floor);\n\n      if (this.gridsterItem.$item.y !== this.newPosition) {\n        this.itemBackup[1] = this.gridsterItem.$item.y;\n        this.itemBackup[3] = this.gridsterItem.$item.rows;\n        this.gridsterItem.$item.rows += this.gridsterItem.$item.y - this.newPosition;\n        this.gridsterItem.$item.y = this.newPosition;\n        this.pushResize.pushItems(this.pushResize.fromSouth);\n        this.push.pushItems(this.push.fromSouth, this.gridster.$options.disablePushOnResize);\n\n        if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n          this.gridsterItem.$item.y = this.itemBackup[1];\n          this.gridsterItem.$item.rows = this.itemBackup[3];\n          this.setItemTop(this.gridster.positionYToPixels(this.gridsterItem.$item.y));\n          this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) - this.margin);\n          return;\n        } else {\n          this.gridster.previewStyle();\n        }\n\n        this.pushResize.checkPushBack();\n        this.push.checkPushBack();\n      }\n\n      this.setItemTop(this.top);\n      this.setItemHeight(this.height);\n    }\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"handleW\",\n    value: function handleW(e) {\n      this.left = e.clientX + this.offsetLeft - this.diffLeft;\n      this.width = this.right - this.left;\n\n      if (this.minWidth > this.width) {\n        this.width = this.minWidth;\n        this.left = this.right - this.minWidth;\n      }\n\n      this.newPosition = this.gridster.pixelsToPositionX(this.left + this.margin, Math.floor);\n\n      if (this.gridsterItem.$item.x !== this.newPosition) {\n        this.itemBackup[0] = this.gridsterItem.$item.x;\n        this.itemBackup[2] = this.gridsterItem.$item.cols;\n        this.gridsterItem.$item.cols += this.gridsterItem.$item.x - this.newPosition;\n        this.gridsterItem.$item.x = this.newPosition;\n        this.pushResize.pushItems(this.pushResize.fromEast);\n        this.push.pushItems(this.push.fromEast, this.gridster.$options.disablePushOnResize);\n\n        if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n          this.gridsterItem.$item.x = this.itemBackup[0];\n          this.gridsterItem.$item.cols = this.itemBackup[2];\n          this.setItemLeft(this.gridster.positionXToPixels(this.gridsterItem.$item.x));\n          this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) - this.margin);\n          return;\n        } else {\n          this.gridster.previewStyle();\n        }\n\n        this.pushResize.checkPushBack();\n        this.push.checkPushBack();\n      }\n\n      this.setItemLeft(this.left);\n      this.setItemWidth(this.width);\n    }\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"handleS\",\n    value: function handleS(e) {\n      this.height = e.clientY + this.offsetTop - this.diffBottom - this.top;\n\n      if (this.minHeight > this.height) {\n        this.height = this.minHeight;\n      }\n\n      this.bottom = this.top + this.height;\n      this.newPosition = this.gridster.pixelsToPositionY(this.bottom, Math.ceil);\n\n      if (this.gridsterItem.$item.y + this.gridsterItem.$item.rows !== this.newPosition) {\n        this.itemBackup[3] = this.gridsterItem.$item.rows;\n        this.gridsterItem.$item.rows = this.newPosition - this.gridsterItem.$item.y;\n        this.pushResize.pushItems(this.pushResize.fromNorth);\n        this.push.pushItems(this.push.fromNorth, this.gridster.$options.disablePushOnResize);\n\n        if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n          this.gridsterItem.$item.rows = this.itemBackup[3];\n          this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) - this.margin);\n          return;\n        } else {\n          this.gridster.previewStyle();\n        }\n\n        this.pushResize.checkPushBack();\n        this.push.checkPushBack();\n      }\n\n      this.setItemHeight(this.height);\n    }\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"handleE\",\n    value: function handleE(e) {\n      this.width = e.clientX + this.offsetLeft - this.diffRight - this.left;\n\n      if (this.minWidth > this.width) {\n        this.width = this.minWidth;\n      }\n\n      this.right = this.left + this.width;\n      this.newPosition = this.gridster.pixelsToPositionX(this.right, Math.ceil);\n\n      if (this.gridsterItem.$item.x + this.gridsterItem.$item.cols !== this.newPosition) {\n        this.itemBackup[2] = this.gridsterItem.$item.cols;\n        this.gridsterItem.$item.cols = this.newPosition - this.gridsterItem.$item.x;\n        this.pushResize.pushItems(this.pushResize.fromWest);\n        this.push.pushItems(this.push.fromWest, this.gridster.$options.disablePushOnResize);\n\n        if (this.gridster.checkCollision(this.gridsterItem.$item)) {\n          this.gridsterItem.$item.cols = this.itemBackup[2];\n          this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) - this.margin);\n          return;\n        } else {\n          this.gridster.previewStyle();\n        }\n\n        this.pushResize.checkPushBack();\n        this.push.checkPushBack();\n      }\n\n      this.setItemWidth(this.width);\n    }\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"handleNW\",\n    value: function handleNW(e) {\n      this.handleN(e);\n      this.handleW(e);\n    }\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"handleNE\",\n    value: function handleNE(e) {\n      this.handleN(e);\n      this.handleE(e);\n    }\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"handleSW\",\n    value: function handleSW(e) {\n      this.handleS(e);\n      this.handleW(e);\n    }\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"handleSE\",\n    value: function handleSE(e) {\n      this.handleS(e);\n      this.handleE(e);\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"toggle\",\n    value: function toggle() {\n      this.resizeEnabled = this.gridsterItem.canBeResized();\n    }\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"dragStartDelay\",\n    value: function dragStartDelay(e) {\n      var _this11 = this;\n\n      GridsterUtils.checkTouchEvent(e);\n\n      if (!this.gridster.$options.resizable.delayStart) {\n        this.dragStart(e);\n        return;\n      }\n\n      var\n      /** @type {?} */\n      timeout = setTimeout(function () {\n        _this11.dragStart(e);\n\n        cancelDrag();\n      }, this.gridster.$options.resizable.delayStart);\n      var\n      /** @type {?} */\n      cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\n      var\n      /** @type {?} */\n      cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\n      var\n      /** @type {?} */\n      cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\n      var\n      /** @type {?} */\n      cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\n      var\n      /** @type {?} */\n      cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\n      /**\r\n       * @param {?} eventMove\r\n       * @return {?}\r\n       */\n\n      function cancelMove(eventMove) {\n        GridsterUtils.checkTouchEvent(eventMove);\n\n        if (Math.abs(eventMove.clientX - e.clientX) > 9 || Math.abs(eventMove.clientY - e.clientY) > 9) {\n          cancelDrag();\n        }\n      }\n      /**\r\n       * @return {?}\r\n       */\n\n\n      function cancelDrag() {\n        clearTimeout(timeout);\n        cancelOnBlur();\n        cancelMouse();\n        cancelTouchMove();\n        cancelTouchEnd();\n        cancelTouchCancel();\n      }\n    }\n    /**\r\n     * @param {?} top\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"setItemTop\",\n    value: function setItemTop(top) {\n      var\n      /** @type {?} */\n      transform = 'translate(' + this.left + 'px, ' + top + 'px)';\n      this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'transform', transform);\n    }\n    /**\r\n     * @param {?} left\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"setItemLeft\",\n    value: function setItemLeft(left) {\n      var\n      /** @type {?} */\n      transform = 'translate(' + left + 'px, ' + this.top + 'px)';\n      this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'transform', transform);\n    }\n    /**\r\n     * @param {?} height\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"setItemHeight\",\n    value: function setItemHeight(height) {\n      this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'height', height + 'px');\n    }\n    /**\r\n     * @param {?} width\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"setItemWidth\",\n    value: function setItemWidth(width) {\n      this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'width', width + 'px');\n    }\n  }]);\n\n  return GridsterResizable;\n}();\n\nGridsterResizable.ɵfac = function GridsterResizable_Factory(t) {\n  return new (t || GridsterResizable)(ɵngcc0.ɵɵinject(GridsterItemComponentInterface), ɵngcc0.ɵɵinject(GridsterComponentInterface), ɵngcc0.ɵɵinject(ɵngcc0.NgZone));\n};\n\nGridsterResizable.ɵprov = ɵngcc0.ɵɵdefineInjectable({\n  token: GridsterResizable,\n  factory: GridsterResizable.ɵfac\n});\n/** @nocollapse */\n\nGridsterResizable.ctorParameters = function () {\n  return [{\n    type: GridsterItemComponentInterface\n  }, {\n    type: GridsterComponentInterface\n  }, {\n    type: NgZone\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridsterResizable, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: GridsterItemComponentInterface\n    }, {\n      type: GridsterComponentInterface\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, null);\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\n\n\nvar GridsterItemComponent = /*#__PURE__*/function () {\n  /**\r\n   * @param {?} el\r\n   * @param {?} gridster\r\n   * @param {?} renderer\r\n   * @param {?} zone\r\n   */\n  function GridsterItemComponent(el, gridster, renderer, zone) {\n    _classCallCheck(this, GridsterItemComponent);\n\n    this.renderer = renderer;\n    this.zone = zone;\n    this.el = el.nativeElement;\n    this.$item = {\n      cols: -1,\n      rows: -1,\n      x: -1,\n      y: -1\n    };\n    this.gridster = gridster;\n    this.drag = new GridsterDraggable(this, gridster, this.zone);\n    this.resize = new GridsterResizable(this, gridster, this.zone);\n  }\n  /**\r\n   * @return {?}\r\n   */\n\n\n  _createClass(GridsterItemComponent, [{\n    key: \"ngOnInit\",\n    value: function ngOnInit() {\n      this.updateOptions();\n      this.gridster.addItem(this);\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"updateOptions\",\n    value: function updateOptions() {\n      this.$item = GridsterUtils.merge(this.$item, this.item, {\n        cols: undefined,\n        rows: undefined,\n        x: undefined,\n        y: undefined,\n        dragEnabled: undefined,\n        resizeEnabled: undefined,\n        compactEnabled: undefined,\n        maxItemRows: undefined,\n        minItemRows: undefined,\n        maxItemCols: undefined,\n        minItemCols: undefined,\n        maxItemArea: undefined,\n        minItemArea: undefined\n      });\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      this.gridster.removeItem(this);\n      delete this.gridster;\n      this.drag.destroy();\n      delete this.drag;\n      this.resize.destroy();\n      delete this.resize;\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"setSize\",\n    value: function setSize() {\n      this.renderer.setStyle(this.el, 'display', this.notPlaced ? '' : 'block');\n      this.gridster.gridRenderer.updateItem(this.el, this.$item, this.renderer);\n      this.updateItemSize();\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"updateItemSize\",\n    value: function updateItemSize() {\n      var\n      /** @type {?} */\n      top = this.$item.y * this.gridster.curRowHeight;\n      var\n      /** @type {?} */\n      left = this.$item.x * this.gridster.curColWidth;\n      var\n      /** @type {?} */\n      width = this.$item.cols * this.gridster.curColWidth - this.gridster.$options.margin;\n      var\n      /** @type {?} */\n      height = this.$item.rows * this.gridster.curRowHeight - this.gridster.$options.margin;\n\n      if (!this.init && width > 0 && height > 0) {\n        this.init = true;\n\n        if (this.item.initCallback) {\n          this.item.initCallback(this.item, this);\n        }\n\n        if (this.gridster.options.itemInitCallback) {\n          this.gridster.options.itemInitCallback(this.item, this);\n        }\n\n        if (this.gridster.$options.scrollToNewItems) {\n          this.el.scrollIntoView(false);\n        }\n      }\n\n      if (width !== this.width || height !== this.height) {\n        this.width = width;\n        this.height = height;\n\n        if (this.gridster.options.itemResizeCallback) {\n          this.gridster.options.itemResizeCallback(this.item, this);\n        }\n      }\n\n      this.top = top;\n      this.left = left;\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"itemChanged\",\n    value: function itemChanged() {\n      if (this.gridster.options.itemChangeCallback) {\n        this.gridster.options.itemChangeCallback(this.item, this);\n      }\n    }\n    /**\r\n     * @param {?} newValue\r\n     * @param {?} oldValue\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"checkItemChanges\",\n    value: function checkItemChanges(newValue, oldValue) {\n      if (newValue.rows === oldValue.rows && newValue.cols === oldValue.cols && newValue.x === oldValue.x && newValue.y === oldValue.y) {\n        return;\n      }\n\n      if (this.gridster.checkCollision(this.$item)) {\n        this.$item.x = oldValue.x || 0;\n        this.$item.y = oldValue.y || 0;\n        this.$item.cols = oldValue.cols || 1;\n        this.$item.rows = oldValue.rows || 1;\n        this.setSize();\n      } else {\n        this.item.cols = this.$item.cols;\n        this.item.rows = this.$item.rows;\n        this.item.x = this.$item.x;\n        this.item.y = this.$item.y;\n        this.gridster.calculateLayoutDebounce();\n        this.itemChanged();\n      }\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"canBeDragged\",\n    value: function canBeDragged() {\n      return !this.gridster.mobile && (this.$item.dragEnabled === undefined ? this.gridster.$options.draggable.enabled : this.$item.dragEnabled);\n    }\n    /**\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"canBeResized\",\n    value: function canBeResized() {\n      return !this.gridster.mobile && (this.$item.resizeEnabled === undefined ? this.gridster.$options.resizable.enabled : this.$item.resizeEnabled);\n    }\n  }]);\n\n  return GridsterItemComponent;\n}();\n\nGridsterItemComponent.ɵfac = function GridsterItemComponent_Factory(t) {\n  return new (t || GridsterItemComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(GridsterComponent, 1), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nGridsterItemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: GridsterItemComponent,\n  selectors: [[\"gridster-item\"]],\n  inputs: {\n    item: \"item\"\n  },\n  ngContentSelectors: _c0,\n  decls: 9,\n  vars: 8,\n  consts: [[1, \"gridster-item-resizable-handler\", \"handle-s\", 3, \"hidden\", \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-e\", 3, \"hidden\", \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-n\", 3, \"hidden\", \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-w\", 3, \"hidden\", \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-se\", 3, \"hidden\", \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-ne\", 3, \"hidden\", \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-sw\", 3, \"hidden\", \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-nw\", 3, \"hidden\", \"mousedown\", \"touchstart\"]],\n  template: function GridsterItemComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵprojectionDef();\n      ɵngcc0.ɵɵprojection(0);\n      ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n      ɵngcc0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_Template_div_mousedown_1_listener($event) {\n        return ctx.resize.dragStartDelay($event);\n      })(\"touchstart\", function GridsterItemComponent_Template_div_touchstart_1_listener($event) {\n        return ctx.resize.dragStartDelay($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(2, \"div\", 1);\n      ɵngcc0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_Template_div_mousedown_2_listener($event) {\n        return ctx.resize.dragStartDelay($event);\n      })(\"touchstart\", function GridsterItemComponent_Template_div_touchstart_2_listener($event) {\n        return ctx.resize.dragStartDelay($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n      ɵngcc0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_Template_div_mousedown_3_listener($event) {\n        return ctx.resize.dragStartDelay($event);\n      })(\"touchstart\", function GridsterItemComponent_Template_div_touchstart_3_listener($event) {\n        return ctx.resize.dragStartDelay($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(4, \"div\", 3);\n      ɵngcc0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_Template_div_mousedown_4_listener($event) {\n        return ctx.resize.dragStartDelay($event);\n      })(\"touchstart\", function GridsterItemComponent_Template_div_touchstart_4_listener($event) {\n        return ctx.resize.dragStartDelay($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(5, \"div\", 4);\n      ɵngcc0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_Template_div_mousedown_5_listener($event) {\n        return ctx.resize.dragStartDelay($event);\n      })(\"touchstart\", function GridsterItemComponent_Template_div_touchstart_5_listener($event) {\n        return ctx.resize.dragStartDelay($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(6, \"div\", 5);\n      ɵngcc0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_Template_div_mousedown_6_listener($event) {\n        return ctx.resize.dragStartDelay($event);\n      })(\"touchstart\", function GridsterItemComponent_Template_div_touchstart_6_listener($event) {\n        return ctx.resize.dragStartDelay($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(7, \"div\", 6);\n      ɵngcc0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_Template_div_mousedown_7_listener($event) {\n        return ctx.resize.dragStartDelay($event);\n      })(\"touchstart\", function GridsterItemComponent_Template_div_touchstart_7_listener($event) {\n        return ctx.resize.dragStartDelay($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n      ɵngcc0.ɵɵelementStart(8, \"div\", 7);\n      ɵngcc0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_Template_div_mousedown_8_listener($event) {\n        return ctx.resize.dragStartDelay($event);\n      })(\"touchstart\", function GridsterItemComponent_Template_div_touchstart_8_listener($event) {\n        return ctx.resize.dragStartDelay($event);\n      });\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"hidden\", !ctx.gridster.$options.resizable.handles.s || !ctx.resize.resizeEnabled);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"hidden\", !ctx.gridster.$options.resizable.handles.e || !ctx.resize.resizeEnabled);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"hidden\", !ctx.gridster.$options.resizable.handles.n || !ctx.resize.resizeEnabled);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"hidden\", !ctx.gridster.$options.resizable.handles.w || !ctx.resize.resizeEnabled);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"hidden\", !ctx.gridster.$options.resizable.handles.se || !ctx.resize.resizeEnabled);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"hidden\", !ctx.gridster.$options.resizable.handles.ne || !ctx.resize.resizeEnabled);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"hidden\", !ctx.gridster.$options.resizable.handles.sw || !ctx.resize.resizeEnabled);\n      ɵngcc0.ɵɵadvance(1);\n      ɵngcc0.ɵɵproperty(\"hidden\", !ctx.gridster.$options.resizable.handles.nw || !ctx.resize.resizeEnabled);\n    }\n  },\n  styles: [\"gridster-item{box-sizing:border-box;z-index:1;position:absolute;overflow:hidden;transition:.3s;display:none;background:#fff;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text}gridster-item.gridster-item-moving{cursor:move}gridster-item.gridster-item-moving,gridster-item.gridster-item-resizing{transition:0s;z-index:2;box-shadow:0 0 5px 5px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12)}.gridster-item-resizable-handler{position:absolute;z-index:2}.gridster-item-resizable-handler.handle-n{cursor:n-resize;height:10px;right:0;top:0;left:0}.gridster-item-resizable-handler.handle-e{cursor:e-resize;width:10px;bottom:0;right:0;top:0}.gridster-item-resizable-handler.handle-s{cursor:s-resize;height:10px;right:0;bottom:0;left:0}.gridster-item-resizable-handler.handle-w{cursor:w-resize;width:10px;left:0;top:0;bottom:0}.gridster-item-resizable-handler.handle-ne{cursor:ne-resize;width:10px;height:10px;right:0;top:0}.gridster-item-resizable-handler.handle-nw{cursor:nw-resize;width:10px;height:10px;left:0;top:0}.gridster-item-resizable-handler.handle-se{cursor:se-resize;width:0;height:0;right:0;bottom:0;border-style:solid;border-width:0 0 10px 10px;border-color:transparent}.gridster-item-resizable-handler.handle-sw{cursor:sw-resize;width:10px;height:10px;left:0;bottom:0}gridster-item:hover .gridster-item-resizable-handler.handle-se{border-color:transparent transparent #ccc}\"],\n  encapsulation: 2\n});\n/** @nocollapse */\n\nGridsterItemComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: GridsterComponent,\n    decorators: [{\n      type: Host\n    }]\n  }, {\n    type: Renderer2\n  }, {\n    type: NgZone\n  }];\n};\n\nGridsterItemComponent.propDecorators = {\n  item: [{\n    type: Input\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridsterItemComponent, [{\n    type: Component,\n    args: [{\n      selector: 'gridster-item',\n      template: \"<ng-content></ng-content>\\n<div (mousedown)=\\\"resize.dragStartDelay($event)\\\" (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n     [hidden]=\\\"!gridster.$options.resizable.handles.s || !resize.resizeEnabled\\\"\\n     class=\\\"gridster-item-resizable-handler handle-s\\\"></div>\\n<div (mousedown)=\\\"resize.dragStartDelay($event)\\\" (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n     [hidden]=\\\"!gridster.$options.resizable.handles.e || !resize.resizeEnabled\\\"\\n     class=\\\"gridster-item-resizable-handler handle-e\\\"></div>\\n<div (mousedown)=\\\"resize.dragStartDelay($event)\\\" (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n     [hidden]=\\\"!gridster.$options.resizable.handles.n || !resize.resizeEnabled\\\"\\n     class=\\\"gridster-item-resizable-handler handle-n\\\"></div>\\n<div (mousedown)=\\\"resize.dragStartDelay($event)\\\" (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n     [hidden]=\\\"!gridster.$options.resizable.handles.w || !resize.resizeEnabled\\\"\\n     class=\\\"gridster-item-resizable-handler handle-w\\\"></div>\\n<div (mousedown)=\\\"resize.dragStartDelay($event)\\\" (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n     [hidden]=\\\"!gridster.$options.resizable.handles.se || !resize.resizeEnabled\\\"\\n     class=\\\"gridster-item-resizable-handler handle-se\\\"></div>\\n<div (mousedown)=\\\"resize.dragStartDelay($event)\\\" (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n     [hidden]=\\\"!gridster.$options.resizable.handles.ne || !resize.resizeEnabled\\\"\\n     class=\\\"gridster-item-resizable-handler handle-ne\\\"></div>\\n<div (mousedown)=\\\"resize.dragStartDelay($event)\\\" (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n     [hidden]=\\\"!gridster.$options.resizable.handles.sw || !resize.resizeEnabled\\\"\\n     class=\\\"gridster-item-resizable-handler handle-sw\\\"></div>\\n<div (mousedown)=\\\"resize.dragStartDelay($event)\\\" (touchstart)=\\\"resize.dragStartDelay($event)\\\"\\n     [hidden]=\\\"!gridster.$options.resizable.handles.nw || !resize.resizeEnabled\\\"\\n     class=\\\"gridster-item-resizable-handler handle-nw\\\"></div>\\n\",\n      styles: [\"gridster-item{box-sizing:border-box;z-index:1;position:absolute;overflow:hidden;transition:.3s;display:none;background:#fff;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text}gridster-item.gridster-item-moving{cursor:move}gridster-item.gridster-item-moving,gridster-item.gridster-item-resizing{transition:0s;z-index:2;box-shadow:0 0 5px 5px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12)}.gridster-item-resizable-handler{position:absolute;z-index:2}.gridster-item-resizable-handler.handle-n{cursor:n-resize;height:10px;right:0;top:0;left:0}.gridster-item-resizable-handler.handle-e{cursor:e-resize;width:10px;bottom:0;right:0;top:0}.gridster-item-resizable-handler.handle-s{cursor:s-resize;height:10px;right:0;bottom:0;left:0}.gridster-item-resizable-handler.handle-w{cursor:w-resize;width:10px;left:0;top:0;bottom:0}.gridster-item-resizable-handler.handle-ne{cursor:ne-resize;width:10px;height:10px;right:0;top:0}.gridster-item-resizable-handler.handle-nw{cursor:nw-resize;width:10px;height:10px;left:0;top:0}.gridster-item-resizable-handler.handle-se{cursor:se-resize;width:0;height:0;right:0;bottom:0;border-style:solid;border-width:0 0 10px 10px;border-color:transparent}.gridster-item-resizable-handler.handle-sw{cursor:sw-resize;width:10px;height:10px;left:0;bottom:0}gridster-item:hover .gridster-item-resizable-handler.handle-se{border-color:transparent transparent #ccc}\"],\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: GridsterComponent,\n      decorators: [{\n        type: Host\n      }]\n    }, {\n      type: ɵngcc0.Renderer2\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    item: [{\n      type: Input\n    }]\n  });\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\n\n\nvar GridsterPreviewComponent = /*#__PURE__*/function () {\n  /**\r\n   * @param {?} el\r\n   * @param {?} gridster\r\n   * @param {?} renderer\r\n   */\n  function GridsterPreviewComponent(el, gridster, renderer) {\n    _classCallCheck(this, GridsterPreviewComponent);\n\n    this.renderer = renderer;\n    this.el = el.nativeElement;\n    this.gridster = gridster;\n    this.gridster.previewStyle = this.previewStyle.bind(this);\n  }\n  /**\r\n   * @return {?}\r\n   */\n\n\n  _createClass(GridsterPreviewComponent, [{\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      delete this.el;\n      delete this.gridster.previewStyle;\n      delete this.gridster;\n    }\n    /**\r\n     * @param {?=} drag\r\n     * @return {?}\r\n     */\n\n  }, {\n    key: \"previewStyle\",\n    value: function previewStyle(drag) {\n      if (!this.gridster.movingItem) {\n        this.renderer.setStyle(this.el, 'display', '');\n      } else {\n        if (this.gridster.compact && drag) {\n          this.gridster.compact.checkCompactItem(this.gridster.movingItem);\n        }\n\n        this.renderer.setStyle(this.el, 'display', 'block');\n        this.gridster.gridRenderer.updateItem(this.el, this.gridster.movingItem, this.renderer);\n      }\n    }\n  }]);\n\n  return GridsterPreviewComponent;\n}();\n\nGridsterPreviewComponent.ɵfac = function GridsterPreviewComponent_Factory(t) {\n  return new (t || GridsterPreviewComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(GridsterComponent, 1), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2));\n};\n\nGridsterPreviewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: GridsterPreviewComponent,\n  selectors: [[\"gridster-preview\"]],\n  decls: 0,\n  vars: 0,\n  template: function GridsterPreviewComponent_Template(rf, ctx) {},\n  styles: [\"gridster-preview{display:none;background:rgba(0,0,0,.15)}\"],\n  encapsulation: 2\n});\n/** @nocollapse */\n\nGridsterPreviewComponent.ctorParameters = function () {\n  return [{\n    type: ElementRef\n  }, {\n    type: GridsterComponent,\n    decorators: [{\n      type: Host\n    }]\n  }, {\n    type: Renderer2\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridsterPreviewComponent, [{\n    type: Component,\n    args: [{\n      selector: 'gridster-preview',\n      template: '',\n      styles: [\"gridster-preview{display:none;background:rgba(0,0,0,.15)}\"],\n      encapsulation: ViewEncapsulation.None\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.ElementRef\n    }, {\n      type: GridsterComponent,\n      decorators: [{\n        type: Host\n      }]\n    }, {\n      type: ɵngcc0.Renderer2\n    }];\n  }, null);\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\n\n\nvar GridsterModule = function GridsterModule() {\n  _classCallCheck(this, GridsterModule);\n};\n\nGridsterModule.ɵfac = function GridsterModule_Factory(t) {\n  return new (t || GridsterModule)();\n};\n\nGridsterModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: GridsterModule\n});\nGridsterModule.ɵinj = ɵngcc0.ɵɵdefineInjector({\n  providers: [],\n  imports: [[CommonModule]]\n});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(GridsterModule, {\n    declarations: function declarations() {\n      return [GridsterComponent, GridsterItemComponent, GridsterPreviewComponent];\n    },\n    imports: function imports() {\n      return [CommonModule];\n    },\n    exports: function exports() {\n      return [GridsterComponent, GridsterItemComponent];\n    }\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridsterModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [GridsterComponent, GridsterItemComponent, GridsterPreviewComponent],\n      imports: [CommonModule],\n      exports: [GridsterComponent, GridsterItemComponent],\n      providers: [],\n      bootstrap: []\n    }]\n  }], null, null);\n})();\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\n\n\nexport { GridsterComponent, GridsterItemComponent, GridsterItemComponentInterface, GridsterComponentInterface, GridType, DisplayGrid, CompactType, GridsterConfigService, GridsterModule, GridsterPush, GridsterPushResize, GridsterSwap, GridsterPreviewComponent as ɵa }; //# sourceMappingURL=data:application/json;charset=utf-8;base64,","map":{"version":3,"sources":["C:/Users/HP/Desktop/new cns-portal/CNS-Portal/frontend/angular-ui/node_modules/angular-gridster2/fesm2015/angular-gridster2.js"],"names":["Injectable","ChangeDetectorRef","Component","ElementRef","Input","NgZone","Renderer2","ViewEncapsulation","Host","NgModule","CommonModule","ɵngcc0","ɵngcc1","GridsterComponent_div_0_Template","rf","ctx","ɵɵelement","i_r3","index","ctx_r0","ɵɵnextContext","ɵɵproperty","gridRenderer","getGridColumnStyle","GridsterComponent_div_1_Template","i_r5","ctx_r1","getGridRowStyle","_c0","GridType","Fit","ScrollVertical","ScrollHorizontal","Fixed","VerticalFixed","HorizontalFixed","DisplayGrid","Always","OnDragAndResize","None","CompactType","CompactUp","CompactLeft","CompactUpAndLeft","CompactLeftAndUp","GridsterConfigService","gridType","fixedColWidth","fixedRowHeight","keepFixedHeightInMobile","keepFixedWidthInMobile","setGridSize","compactType","mobileBreakpoint","minCols","maxCols","minRows","maxRows","defaultItemCols","defaultItemRows","maxItemCols","maxItemRows","minItemCols","minItemRows","minItemArea","maxItemArea","margin","outerMargin","outerMarginTop","outerMarginRight","outerMarginBottom","outerMarginLeft","scrollSensitivity","scrollSpeed","initCallback","undefined","destroyCallback","gridSizeChangedCallback","itemChangeCallback","itemResizeCallback","itemInitCallback","itemRemovedCallback","itemValidateCallback","enableEmptyCellClick","enableEmptyCellContextMenu","enableEmptyCellDrop","enableEmptyCellDrag","emptyCellClickCallback","emptyCellContextMenuCallback","emptyCellDropCallback","emptyCellDragCallback","emptyCellDragMaxCols","emptyCellDragMaxRows","ignoreMarginInRow","draggable","delayStart","enabled","ignoreContentClass","ignoreContent","dragHandleClass","stop","start","dropOverItems","dropOverItemsCallback","resizable","handles","s","e","n","w","se","ne","sw","nw","swap","pushItems","disablePushOnDrag","disablePushOnResize","pushDirections","north","east","south","west","pushResizeItems","displayGrid","disableWindowResize","disableWarnings","scrollToNewItems","disableAutoPositionOnConflict","GridsterUtils","obj1","obj2","properties","p","hasOwnProperty","merge","func","wait","timeout","context","args","arguments","later","apply","clearTimeout","setTimeout","clientX","touches","length","clientY","changedTouches","gridster","$options","checkContentClass","target","currentTarget","current","contentClass","hasAttribute","getAttribute","split","indexOf","parentNode","a","b","y","x","ɵfac","GridsterUtils_Factory","t","ɵprov","ɵɵdefineInjectable","token","factory","ngDevMode","ɵsetClassMetadata","type","GridsterComponentInterface","GridsterEmptyCell","initialItem","movingItem","previewStyle","emptyCellExit","emptyCellClick","options","renderer","listen","el","emptyCellClickCb","bind","emptyCellClickTouch","emptyCellContextMenu","emptyCellContextMenuCb","emptyCellDrop","emptyCellDragDrop","zone","runOutsideAngular","emptyCellMove","emptyCellDragOver","emptyCellDrag","emptyCellMouseDown","emptyCellDragTouch","checkContentClassForEmptyCellClickEvent","item","getValidItemFromEvent","cdRef","markForCheck","preventDefault","stopPropagation","dataTransfer","dropEffect","emptyCellMMove","emptyCellMouseMove","emptyCellMMoveTouch","emptyCellUp","emptyCellMouseUp","emptyCellUpTouch","oldItem","checkTouchEvent","rect","getBoundingClientRect","scrollLeft","left","scrollTop","top","pixelsToPositionX","Math","floor","pixelsToPositionY","cols","rows","min","abs","checkCollision","GridsterEmptyCell_Factory","ɵɵinject","ctorParameters","GridsterCompact","checkCompactUp","checkCompactLeft","moveUpTillCollision","moveLeftTillCollision","widgetMovedUp","widget","moved","l","grid","i","$item","compactEnabled","itemChanged","checkCompact","GridsterCompact_Factory","GridsterRenderer","mobile","setStyle","curWidth","round","curColWidth","curRowHeight","width","height","transform","marginBottom","marginRight","columns","addClass","removeClass1","removeClass2","removeClass3","removeClass","gridRows","gridColumns","GridsterRenderer_Factory","GridsterComponent","nativeElement","JSON","parse","stringify","calculateLayoutDebounce","debounce","calculateLayout","curHeight","dragInProgress","emptyCell","compact","changes","setOptions","api","optionsChanged","resize","onResize","getNextPossiblePosition","getFirstPossiblePosition","getLastPossiblePosition","offsetWidth","offsetHeight","clientWidth","clientHeight","checkIfToResize","windowResize","updateOptions","widgetsIndex","destroy","scrollWidth","scrollHeight","verticalScrollPresent","horizontalScrollPresent","notPlaced","max","setGridDimensions","marginWidth","marginHeight","updateGridster","updateGrid","setSize","drag","toggle","itemComponent","autoPositionItem","console","warn","push","splice","collision","checkGridCollision","c","findItemWithItem","noNegativePosition","maxGridCols","maxGridRows","inColsLimits","inRowsLimits","minAreaLimit","maxAreaLimit","area","inMinArea","inMaxArea","checkCollisionTwoItems","newItem","startingFrom","rowsIndex","colsIndex","canAddToRows","canAddToColumns","addToRows","tmpItem","Object","assign","farthestItem","reduce","prev","curr","currCoords","compareItems","roundingMethod","noLimit","position","item2","GridsterComponent_Factory","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","selectors","inputs","features","ɵɵNgOnChangesFeature","ngContentSelectors","decls","vars","consts","template","GridsterComponent_Template","ɵɵprojectionDef","ɵɵtemplate","ɵɵprojection","ɵɵadvance","directives","NgForOf","GridsterPreviewComponent","NgStyle","styles","encapsulation","propDecorators","selector","GridsterItemComponentInterface","GridsterSwap","gridsterItem","swapedItem","checkSwapBack","checkSwap","checkItemChanges","pushedBy","gridsterItemCollision","canBeDragged","gridsterItemCollide","copyCollisionX","copyCollisionY","copyX","copyY","GridsterSwap_Factory","intervalDuration","gridsterElement","resizeEvent","resizeEventType","intervalE","intervalW","intervalN","intervalS","scroll","lastMouse","calculateItemPosition","resizeEventScrollType","offsetLeft","offsetTop","elemTopOffset","elemBottomOffset","cancelN","startVertical","cancelS","cancelVertical","elemRightOffset","elemLeftOffset","cancelW","startHorizontal","cancelE","cancelHorizontal","sign","setInterval","cancelScroll","clearInterval","GridsterPush","pushedItems","pushedItemsTemp","pushedItemsTempPath","pushedItemsPath","tryPattern","fromEast","tryWest","trySouth","tryNorth","tryEast","fromWest","fromNorth","fromSouth","direction","disable","pushedItemsOrder","pushed","restoreTempItems","removeFromTempPushed","pushedItem","change","checkPushedItem","checkPushBack","findItemsWithItem","itemCollision","makePush","compare","find","call","lastIndexOf","j","pop","removeFromPushedItem","addToTempPushed","addToPushed","tempPosition","path","lastPosition","removeFromPushed","GridsterPush_Factory","GridsterDraggable","mousedown","touchstart","which","dragFunction","dragMove","dragStopFunction","dragStop","mousemove","touchmove","mouseup","cancelOnBlur","touchend","touchcancel","diffLeft","diffTop","calculateItemPositionFromMousePosition","run","Promise","resolve","then","makeDrag","cancelDrag","restoreItems","restoreSwapItem","setPushedItems","setSwapItem","positionX","positionY","positionXBackup","positionYBackup","swapItems","enableDrag","dragStartFunction","dragStartDelay","checkContentClassForEvent","dragStart","cancelMouse","cancelTouchMove","cancelMove","cancelTouchEnd","cancelTouchCancel","eventMove","GridsterDraggable_Factory","GridsterPushResize","canBeResized","backUpY","backUpRows","backUpX","backUpCols","GridsterPushResize_Factory","GridsterResizable","itemBackup","bottom","right","diffRight","diffBottom","minHeight","positionYToPixels","minWidth","positionXToPixels","pushResize","directionFunction","handleN","handleW","handleS","handleE","handleNW","handleNE","handleSW","handleSE","makeResize","cancelResize","newPosition","setItemTop","setItemHeight","setItemLeft","setItemWidth","ceil","resizeEnabled","GridsterResizable_Factory","GridsterItemComponent","addItem","dragEnabled","removeItem","updateItem","updateItemSize","init","scrollIntoView","newValue","oldValue","GridsterItemComponent_Factory","GridsterItemComponent_Template","ɵɵelementStart","ɵɵlistener","GridsterItemComponent_Template_div_mousedown_1_listener","$event","GridsterItemComponent_Template_div_touchstart_1_listener","ɵɵelementEnd","GridsterItemComponent_Template_div_mousedown_2_listener","GridsterItemComponent_Template_div_touchstart_2_listener","GridsterItemComponent_Template_div_mousedown_3_listener","GridsterItemComponent_Template_div_touchstart_3_listener","GridsterItemComponent_Template_div_mousedown_4_listener","GridsterItemComponent_Template_div_touchstart_4_listener","GridsterItemComponent_Template_div_mousedown_5_listener","GridsterItemComponent_Template_div_touchstart_5_listener","GridsterItemComponent_Template_div_mousedown_6_listener","GridsterItemComponent_Template_div_touchstart_6_listener","GridsterItemComponent_Template_div_mousedown_7_listener","GridsterItemComponent_Template_div_touchstart_7_listener","GridsterItemComponent_Template_div_mousedown_8_listener","GridsterItemComponent_Template_div_touchstart_8_listener","decorators","checkCompactItem","GridsterPreviewComponent_Factory","GridsterPreviewComponent_Template","GridsterModule","GridsterModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","providers","imports","ngJitMode","ɵɵsetNgModuleScope","declarations","exports","bootstrap","ɵa"],"mappings":"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","sourcesContent":["import { Injectable, ChangeDetectorRef, Component, ElementRef, Input, NgZone, Renderer2, ViewEncapsulation, Host, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/** @enum {string} */\r\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\n\nfunction GridsterComponent_div_0_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 3);\n} if (rf & 2) {\n    const i_r3 = ctx.index;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ctx_r0.gridRenderer.getGridColumnStyle(i_r3));\n} }\nfunction GridsterComponent_div_1_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"div\", 4);\n} if (rf & 2) {\n    const i_r5 = ctx.index;\n    const ctx_r1 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"ngStyle\", ctx_r1.gridRenderer.getGridRowStyle(i_r5));\n} }\nconst _c0 = [\"*\"];\nconst GridType = {\r\n    Fit: 'fit',\r\n    ScrollVertical: 'scrollVertical',\r\n    ScrollHorizontal: 'scrollHorizontal',\r\n    Fixed: 'fixed',\r\n    VerticalFixed: 'verticalFixed',\r\n    HorizontalFixed: 'horizontalFixed',\r\n};\r\n/** @enum {string} */\r\nconst DisplayGrid = {\r\n    Always: 'always',\r\n    OnDragAndResize: 'onDrag&Resize',\r\n    None: 'none',\r\n};\r\n/** @enum {string} */\r\nconst CompactType = {\r\n    None: 'none',\r\n    CompactUp: 'compactUp',\r\n    CompactLeft: 'compactLeft',\r\n    CompactUpAndLeft: 'compactUp&Left',\r\n    CompactLeftAndUp: 'compactLeft&Up',\r\n};\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\nconst /** @type {?} */ GridsterConfigService = {\r\n    gridType: GridType.Fit,\r\n    // 'fit' will fit the items in the container without scroll;\r\n    // 'scrollVertical' will fit on width and height of the items will be the same as the width\r\n    // 'scrollHorizontal' will fit on height and width of the items will be the same as the height\r\n    // 'fixed' will set the rows and columns dimensions based on fixedColWidth and fixedRowHeight options\r\n    // 'verticalFixed' will set the rows to fixedRowHeight and columns width will fit the space available\r\n    // 'horizontalFixed' will set the columns to fixedColWidth and rows height will fit the space available\r\n    fixedColWidth: 250,\r\n    // fixed col width for gridType: 'fixed'\r\n    fixedRowHeight: 250,\r\n    // fixed row height for gridType: 'fixed'\r\n    keepFixedHeightInMobile: false,\r\n    // keep the height from fixed gridType in mobile layout\r\n    keepFixedWidthInMobile: false,\r\n    // keep the width from fixed gridType in mobile layout\r\n    setGridSize: false,\r\n    // sets grid size depending on content\r\n    compactType: CompactType.None,\r\n    // compact items: 'none' | 'compactUp' | 'compactLeft' | 'compactUp&Left' | 'compactLeft&Up'\r\n    mobileBreakpoint: 640,\r\n    // if the screen is not wider that this, remove the grid layout and stack the items\r\n    minCols: 1,\r\n    // minimum amount of columns in the grid\r\n    maxCols: 100,\r\n    // maximum amount of columns in the grid\r\n    minRows: 1,\r\n    // minimum amount of rows in the grid\r\n    maxRows: 100,\r\n    // maximum amount of rows in the grid\r\n    defaultItemCols: 1,\r\n    // default width of an item in columns\r\n    defaultItemRows: 1,\r\n    // default height of an item in rows\r\n    maxItemCols: 50,\r\n    // max item number of cols\r\n    maxItemRows: 50,\r\n    // max item number of rows\r\n    minItemCols: 1,\r\n    // min item number of columns\r\n    minItemRows: 1,\r\n    // min item number of rows\r\n    minItemArea: 1,\r\n    // min item area: cols * rows\r\n    maxItemArea: 2500,\r\n    // max item area: cols * rows\r\n    margin: 10,\r\n    // margin between grid items\r\n    outerMargin: true,\r\n    // if margins will apply to the sides of the container\r\n    outerMarginTop: null,\r\n    // override outer margin for grid\r\n    outerMarginRight: null,\r\n    // override outer margin for grid\r\n    outerMarginBottom: null,\r\n    // override outer margin for grid\r\n    outerMarginLeft: null,\r\n    // override outer margin for grid\r\n    scrollSensitivity: 10,\r\n    // margin of the dashboard where to start scrolling\r\n    scrollSpeed: 20,\r\n    // how much to scroll each mouse move when in the scrollSensitivity zone\r\n    initCallback: undefined,\r\n    // callback to call after grid has initialized. Arguments: gridsterComponent\r\n    destroyCallback: undefined,\r\n    // callback to call after grid has destroyed. Arguments: gridsterComponent\r\n    gridSizeChangedCallback: undefined,\r\n    // callback to call after grid has changed size. Arguments: gridsterComponent\r\n    itemChangeCallback: undefined,\r\n    // callback to call for each item when is changes x, y, rows, cols.\r\n    // Arguments: gridsterItem, gridsterItemComponent\r\n    itemResizeCallback: undefined,\r\n    // callback to call for each item when width/height changes.\r\n    // Arguments: gridsterItem, gridsterItemComponent\r\n    itemInitCallback: undefined,\r\n    // callback to call for each item when is initialized.\r\n    // Arguments: gridsterItem, gridsterItemComponent\r\n    itemRemovedCallback: undefined,\r\n    // callback to call for each item when is initialized.\r\n    // Arguments: gridsterItem, gridsterItemComponent\r\n    itemValidateCallback: undefined,\r\n    // callback to call to validate item position/size. Return true if valid.\r\n    // Arguments: gridsterItem\r\n    enableEmptyCellClick: false,\r\n    // enable empty cell click events\r\n    enableEmptyCellContextMenu: false,\r\n    // enable empty cell context menu (right click) events\r\n    enableEmptyCellDrop: false,\r\n    // enable empty cell drop events\r\n    enableEmptyCellDrag: false,\r\n    // enable empty cell drag events\r\n    emptyCellClickCallback: undefined,\r\n    // empty cell click callback\r\n    emptyCellContextMenuCallback: undefined,\r\n    // empty cell context menu (right click) callback\r\n    emptyCellDropCallback: undefined,\r\n    // empty cell drag drop callback. HTML5 Drag & Drop\r\n    emptyCellDragCallback: undefined,\r\n    // empty cell drag and create item like excel cell selection\r\n    emptyCellDragMaxCols: 50,\r\n    // limit empty cell drag max cols\r\n    emptyCellDragMaxRows: 50,\r\n    // limit empty cell drag max rows\r\n    // Arguments: event, gridsterItem{x, y, rows: defaultItemRows, cols: defaultItemCols}\r\n    ignoreMarginInRow: false,\r\n    // ignore the gap between rows for items which span multiple rows (see #162, #224)\r\n    draggable: {\r\n        delayStart: 0,\r\n        // milliseconds to delay the start of drag, useful for touch interaction\r\n        enabled: false,\r\n        // enable/disable draggable items\r\n        ignoreContentClass: 'gridster-item-content',\r\n        // default content class to ignore the drag event from\r\n        ignoreContent: false,\r\n        // if true drag will start only from elements from `dragHandleClass`\r\n        dragHandleClass: 'drag-handler',\r\n        // drag event only from this class. If `ignoreContent` is true.\r\n        stop: undefined,\r\n        // callback when dragging an item stops.  Accepts Promise return to cancel/approve drag.\r\n        start: undefined,\r\n        // callback when dragging an item starts.\r\n        // Arguments: item, gridsterItem, event\r\n        dropOverItems: false,\r\n        // enable drop items on top other item\r\n        dropOverItemsCallback: undefined // callback on drop over another item\r\n    },\r\n    resizable: {\r\n        delayStart: 0,\r\n        // milliseconds to delay the start of resize, useful for touch interaction\r\n        enabled: false,\r\n        // enable/disable resizable items\r\n        handles: {\r\n            s: true,\r\n            e: true,\r\n            n: true,\r\n            w: true,\r\n            se: true,\r\n            ne: true,\r\n            sw: true,\r\n            nw: true\r\n        },\r\n        // resizable edges of an item\r\n        stop: undefined,\r\n        // callback when resizing an item stops. Accepts Promise return to cancel/approve resize.\r\n        start: undefined // callback when resizing an item starts.\r\n    },\r\n    swap: true,\r\n    // allow items to switch position if drop on top of another\r\n    pushItems: false,\r\n    // push items when resizing and dragging\r\n    disablePushOnDrag: false,\r\n    // disable push on drag\r\n    disablePushOnResize: false,\r\n    // disable push on resize\r\n    pushDirections: { north: true, east: true, south: true, west: true },\r\n    // control the directions items are pushed\r\n    pushResizeItems: false,\r\n    // on resize of item will shrink adjacent items\r\n    displayGrid: DisplayGrid.OnDragAndResize,\r\n    // display background grid of rows and columns\r\n    disableWindowResize: false,\r\n    // disable the window on resize listener. This will stop grid to recalculate on window resize.\r\n    disableWarnings: false,\r\n    // disable console log warnings about misplacement of grid items\r\n    scrollToNewItems: false,\r\n    // scroll to new items placed in a scrollable view\r\n    disableAutoPositionOnConflict: false // disable auto-position of items on conflict state\r\n};\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\nclass GridsterUtils {\r\n    /**\r\n     * @param {?} obj1\r\n     * @param {?} obj2\r\n     * @param {?} properties\r\n     * @return {?}\r\n     */\r\n    static merge(obj1, obj2, properties) {\r\n        for (const /** @type {?} */ p in obj2) {\r\n            if (obj2[p] !== void 0 && properties.hasOwnProperty(p)) {\r\n                if (typeof obj2[p] === 'object') {\r\n                    obj1[p] = GridsterUtils.merge(obj1[p], obj2[p], properties[p]);\r\n                }\r\n                else {\r\n                    obj1[p] = obj2[p];\r\n                }\r\n            }\r\n        }\r\n        return obj1;\r\n    }\r\n    /**\r\n     * @param {?} func\r\n     * @param {?} wait\r\n     * @return {?}\r\n     */\r\n    static debounce(func, wait) {\r\n        let /** @type {?} */ timeout;\r\n        return function () {\r\n            const /** @type {?} */ context = this, /** @type {?} */ args = arguments;\r\n            const /** @type {?} */ later = function () {\r\n                timeout = null;\r\n                func.apply(context, args);\r\n            };\r\n            clearTimeout(timeout);\r\n            timeout = setTimeout(later, wait);\r\n        };\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    static checkTouchEvent(e) {\r\n        if (e.clientX === undefined && e.touches) {\r\n            if (e.touches && e.touches.length) {\r\n                e.clientX = e.touches[0].clientX;\r\n                e.clientY = e.touches[0].clientY;\r\n            }\r\n            else if (e.changedTouches && e.changedTouches.length) {\r\n                e.clientX = e.changedTouches[0].clientX;\r\n                e.clientY = e.changedTouches[0].clientY;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} gridster\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    static checkContentClassForEvent(gridster, e) {\r\n        if (gridster.$options.draggable.ignoreContent) {\r\n            if (!GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.dragHandleClass)) {\r\n                return true;\r\n            }\r\n        }\r\n        else {\r\n            if (GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.ignoreContentClass)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * @param {?} gridster\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    static checkContentClassForEmptyCellClickEvent(gridster, e) {\r\n        return GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.ignoreContentClass)\r\n            || GridsterUtils.checkContentClass(e.target, e.currentTarget, gridster.$options.draggable.dragHandleClass);\r\n    }\r\n    /**\r\n     * @param {?} target\r\n     * @param {?} current\r\n     * @param {?} contentClass\r\n     * @return {?}\r\n     */\r\n    static checkContentClass(target, current, contentClass) {\r\n        if (!target || target === current) {\r\n            return false;\r\n        }\r\n        if (target.hasAttribute('class') && target.getAttribute('class').split(' ').indexOf(contentClass) > -1) {\r\n            return true;\r\n        }\r\n        else {\r\n            return GridsterUtils.checkContentClass(target.parentNode, current, contentClass);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} a\r\n     * @param {?} b\r\n     * @return {?}\r\n     */\r\n    static compareItems(a, b) {\r\n        if (a.y > b.y) {\r\n            return -1;\r\n        }\r\n        else if (a.y < b.y) {\r\n            return 1;\r\n        }\r\n        else if (a.x > b.x) {\r\n            return -1;\r\n        }\r\n        else {\r\n            return 1;\r\n        }\r\n    }\r\n}\nGridsterUtils.ɵfac = function GridsterUtils_Factory(t) { return new (t || GridsterUtils)(); };\nGridsterUtils.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: GridsterUtils, factory: GridsterUtils.ɵfac });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridsterUtils, [{\n        type: Injectable\n    }], null, null); })();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @abstract\r\n */\r\nclass GridsterComponentInterface {\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\nclass GridsterEmptyCell {\r\n    /**\r\n     * @param {?} gridster\r\n     */\r\n    constructor(gridster) {\r\n        this.gridster = gridster;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    destroy() {\r\n        delete this.initialItem;\r\n        delete this.gridster.movingItem;\r\n        if (this.gridster.previewStyle) {\r\n            this.gridster.previewStyle();\r\n        }\r\n        delete this.gridster;\r\n        if (this.emptyCellExit) {\r\n            this.emptyCellExit();\r\n            this.emptyCellExit = null;\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    updateOptions() {\r\n        if (this.gridster.$options.enableEmptyCellClick && !this.emptyCellClick && this.gridster.options.emptyCellClickCallback) {\r\n            this.emptyCellClick = this.gridster.renderer.listen(this.gridster.el, 'click', this.emptyCellClickCb.bind(this));\r\n            this.emptyCellClickTouch = this.gridster.renderer.listen(this.gridster.el, 'touchend', this.emptyCellClickCb.bind(this));\r\n        }\r\n        else if (!this.gridster.$options.enableEmptyCellClick && this.emptyCellClick && this.emptyCellClickTouch) {\r\n            this.emptyCellClick();\r\n            this.emptyCellClickTouch();\r\n            this.emptyCellClick = null;\r\n            this.emptyCellClickTouch = null;\r\n        }\r\n        if (this.gridster.$options.enableEmptyCellContextMenu && !this.emptyCellContextMenu &&\r\n            this.gridster.options.emptyCellContextMenuCallback) {\r\n            this.emptyCellContextMenu = this.gridster.renderer.listen(this.gridster.el, 'contextmenu', this.emptyCellContextMenuCb.bind(this));\r\n        }\r\n        else if (!this.gridster.$options.enableEmptyCellContextMenu && this.emptyCellContextMenu) {\r\n            this.emptyCellContextMenu();\r\n            this.emptyCellContextMenu = null;\r\n        }\r\n        if (this.gridster.$options.enableEmptyCellDrop && !this.emptyCellDrop && this.gridster.options.emptyCellDropCallback) {\r\n            this.emptyCellDrop = this.gridster.renderer.listen(this.gridster.el, 'drop', this.emptyCellDragDrop.bind(this));\r\n            this.gridster.zone.runOutsideAngular(() => {\r\n                this.emptyCellMove = this.gridster.renderer.listen(this.gridster.el, 'dragover', this.emptyCellDragOver.bind(this));\r\n            });\r\n            this.emptyCellExit = this.gridster.renderer.listen('document', 'dragend', () => {\r\n                this.gridster.movingItem = null;\r\n                this.gridster.previewStyle();\r\n            });\r\n        }\r\n        else if (!this.gridster.$options.enableEmptyCellDrop && this.emptyCellDrop && this.emptyCellMove && this.emptyCellExit) {\r\n            this.emptyCellDrop();\r\n            this.emptyCellMove();\r\n            this.emptyCellExit();\r\n            this.emptyCellMove = null;\r\n            this.emptyCellDrop = null;\r\n            this.emptyCellExit = null;\r\n        }\r\n        if (this.gridster.$options.enableEmptyCellDrag && !this.emptyCellDrag && this.gridster.options.emptyCellDragCallback) {\r\n            this.emptyCellDrag = this.gridster.renderer.listen(this.gridster.el, 'mousedown', this.emptyCellMouseDown.bind(this));\r\n            this.emptyCellDragTouch = this.gridster.renderer.listen(this.gridster.el, 'touchstart', this.emptyCellMouseDown.bind(this));\r\n        }\r\n        else if (!this.gridster.$options.enableEmptyCellDrag && this.emptyCellDrag && this.emptyCellDragTouch) {\r\n            this.emptyCellDrag();\r\n            this.emptyCellDragTouch();\r\n            this.emptyCellDrag = null;\r\n            this.emptyCellDragTouch = null;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    emptyCellClickCb(e) {\r\n        if (this.gridster.movingItem || GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\r\n            return;\r\n        }\r\n        const /** @type {?} */ item = this.getValidItemFromEvent(e);\r\n        if (!item) {\r\n            return;\r\n        }\r\n        if (this.gridster.options.emptyCellClickCallback) {\r\n            this.gridster.options.emptyCellClickCallback(e, item);\r\n        }\r\n        this.gridster.cdRef.markForCheck();\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    emptyCellContextMenuCb(e) {\r\n        if (this.gridster.movingItem || GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\r\n            return;\r\n        }\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        const /** @type {?} */ item = this.getValidItemFromEvent(e);\r\n        if (!item) {\r\n            return;\r\n        }\r\n        if (this.gridster.options.emptyCellContextMenuCallback) {\r\n            this.gridster.options.emptyCellContextMenuCallback(e, item);\r\n        }\r\n        this.gridster.cdRef.markForCheck();\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    emptyCellDragDrop(e) {\r\n        const /** @type {?} */ item = this.getValidItemFromEvent(e);\r\n        if (!item) {\r\n            return;\r\n        }\r\n        if (this.gridster.options.emptyCellDropCallback) {\r\n            this.gridster.options.emptyCellDropCallback(e, item);\r\n        }\r\n        this.gridster.cdRef.markForCheck();\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    emptyCellDragOver(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        const /** @type {?} */ item = this.getValidItemFromEvent(e);\r\n        if (item) {\r\n            e.dataTransfer.dropEffect = 'move';\r\n            this.gridster.movingItem = item;\r\n        }\r\n        else {\r\n            e.dataTransfer.dropEffect = 'none';\r\n            this.gridster.movingItem = null;\r\n        }\r\n        this.gridster.previewStyle();\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    emptyCellMouseDown(e) {\r\n        if (GridsterUtils.checkContentClassForEmptyCellClickEvent(this.gridster, e)) {\r\n            return;\r\n        }\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        const /** @type {?} */ item = this.getValidItemFromEvent(e);\r\n        if (!item) {\r\n            return;\r\n        }\r\n        this.initialItem = item;\r\n        this.gridster.movingItem = item;\r\n        this.gridster.previewStyle();\r\n        this.gridster.zone.runOutsideAngular(() => {\r\n            this.emptyCellMMove = this.gridster.renderer.listen('window', 'mousemove', this.emptyCellMouseMove.bind(this));\r\n            this.emptyCellMMoveTouch = this.gridster.renderer.listen('window', 'touchmove', this.emptyCellMouseMove.bind(this));\r\n        });\r\n        this.emptyCellUp = this.gridster.renderer.listen('window', 'mouseup', this.emptyCellMouseUp.bind(this));\r\n        this.emptyCellUpTouch = this.gridster.renderer.listen('window', 'touchend', this.emptyCellMouseUp.bind(this));\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    emptyCellMouseMove(e) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        const /** @type {?} */ item = this.getValidItemFromEvent(e, this.initialItem);\r\n        if (!item) {\r\n            return;\r\n        }\r\n        this.gridster.movingItem = item;\r\n        this.gridster.previewStyle();\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    emptyCellMouseUp(e) {\r\n        this.emptyCellMMove();\r\n        this.emptyCellMMoveTouch();\r\n        this.emptyCellUp();\r\n        this.emptyCellUpTouch();\r\n        const /** @type {?} */ item = this.getValidItemFromEvent(e, this.initialItem);\r\n        if (item) {\r\n            this.gridster.movingItem = item;\r\n        }\r\n        if (this.gridster.options.emptyCellDragCallback && this.gridster.movingItem) {\r\n            this.gridster.options.emptyCellDragCallback(e, this.gridster.movingItem);\r\n        }\r\n        setTimeout(() => {\r\n            this.initialItem = null;\r\n            if (this.gridster) {\r\n                this.gridster.movingItem = null;\r\n                this.gridster.previewStyle();\r\n            }\r\n        });\r\n        this.gridster.cdRef.markForCheck();\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @param {?=} oldItem\r\n     * @return {?}\r\n     */\r\n    getValidItemFromEvent(e, oldItem) {\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        GridsterUtils.checkTouchEvent(e);\r\n        const /** @type {?} */ rect = this.gridster.el.getBoundingClientRect();\r\n        const /** @type {?} */ x = e.clientX + this.gridster.el.scrollLeft - rect.left - this.gridster.$options.margin;\r\n        const /** @type {?} */ y = e.clientY + this.gridster.el.scrollTop - rect.top - this.gridster.$options.margin;\r\n        const /** @type {?} */ item = {\r\n            x: this.gridster.pixelsToPositionX(x, Math.floor, true),\r\n            y: this.gridster.pixelsToPositionY(y, Math.floor, true),\r\n            cols: this.gridster.$options.defaultItemCols,\r\n            rows: this.gridster.$options.defaultItemRows\r\n        };\r\n        if (oldItem) {\r\n            item.cols = Math.min(Math.abs(oldItem.x - item.x) + 1, this.gridster.$options.emptyCellDragMaxCols);\r\n            item.rows = Math.min(Math.abs(oldItem.y - item.y) + 1, this.gridster.$options.emptyCellDragMaxRows);\r\n            if (oldItem.x < item.x) {\r\n                item.x = oldItem.x;\r\n            }\r\n            else if (oldItem.x - item.x > this.gridster.$options.emptyCellDragMaxCols - 1) {\r\n                item.x = this.gridster.movingItem ? this.gridster.movingItem.x : 0;\r\n            }\r\n            if (oldItem.y < item.y) {\r\n                item.y = oldItem.y;\r\n            }\r\n            else if (oldItem.y - item.y > this.gridster.$options.emptyCellDragMaxRows - 1) {\r\n                item.y = this.gridster.movingItem ? this.gridster.movingItem.y : 0;\r\n            }\r\n        }\r\n        if (this.gridster.checkCollision(item)) {\r\n            return;\r\n        }\r\n        return item;\r\n    }\r\n}\nGridsterEmptyCell.ɵfac = function GridsterEmptyCell_Factory(t) { return new (t || GridsterEmptyCell)(ɵngcc0.ɵɵinject(GridsterComponentInterface)); };\nGridsterEmptyCell.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: GridsterEmptyCell, factory: GridsterEmptyCell.ɵfac });\r\n/** @nocollapse */\r\nGridsterEmptyCell.ctorParameters = () => [\r\n    { type: GridsterComponentInterface }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridsterEmptyCell, [{\n        type: Injectable\n    }], function () { return [{ type: GridsterComponentInterface }]; }, null); })();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\nclass GridsterCompact {\r\n    /**\r\n     * @param {?} gridster\r\n     */\r\n    constructor(gridster) {\r\n        this.gridster = gridster;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    destroy() {\r\n        delete this.gridster;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    checkCompact() {\r\n        if (this.gridster.$options.compactType !== CompactType.None) {\r\n            if (this.gridster.$options.compactType === CompactType.CompactUp) {\r\n                this.checkCompactUp();\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\r\n                this.checkCompactLeft();\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\r\n                this.checkCompactUp();\r\n                this.checkCompactLeft();\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\r\n                this.checkCompactLeft();\r\n                this.checkCompactUp();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} item\r\n     * @return {?}\r\n     */\r\n    checkCompactItem(item) {\r\n        if (this.gridster.$options.compactType !== CompactType.None) {\r\n            if (this.gridster.$options.compactType === CompactType.CompactUp) {\r\n                this.moveUpTillCollision(item);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactLeft) {\r\n                this.moveLeftTillCollision(item);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactUpAndLeft) {\r\n                this.moveUpTillCollision(item);\r\n                this.moveLeftTillCollision(item);\r\n            }\r\n            else if (this.gridster.$options.compactType === CompactType.CompactLeftAndUp) {\r\n                this.moveLeftTillCollision(item);\r\n                this.moveUpTillCollision(item);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    checkCompactUp() {\r\n        let /** @type {?} */ widgetMovedUp = false, /** @type {?} */ widget, /** @type {?} */ moved;\r\n        const /** @type {?} */ l = this.gridster.grid.length;\r\n        for (let /** @type {?} */ i = 0; i < l; i++) {\r\n            widget = this.gridster.grid[i];\r\n            if (widget.$item.compactEnabled === false) {\r\n                continue;\r\n            }\r\n            moved = this.moveUpTillCollision(widget.$item);\r\n            if (moved) {\r\n                widgetMovedUp = true;\r\n                widget.item.y = widget.$item.y;\r\n                widget.itemChanged();\r\n            }\r\n        }\r\n        if (widgetMovedUp) {\r\n            this.checkCompact();\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} item\r\n     * @return {?}\r\n     */\r\n    moveUpTillCollision(item) {\r\n        item.y -= 1;\r\n        if (this.gridster.checkCollision(item)) {\r\n            item.y += 1;\r\n            return false;\r\n        }\r\n        else {\r\n            this.moveUpTillCollision(item);\r\n            return true;\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    checkCompactLeft() {\r\n        let /** @type {?} */ widgetMovedUp = false, /** @type {?} */ widget, /** @type {?} */ moved;\r\n        const /** @type {?} */ l = this.gridster.grid.length;\r\n        for (let /** @type {?} */ i = 0; i < l; i++) {\r\n            widget = this.gridster.grid[i];\r\n            if (widget.$item.compactEnabled === false) {\r\n                continue;\r\n            }\r\n            moved = this.moveLeftTillCollision(widget.$item);\r\n            if (moved) {\r\n                widgetMovedUp = true;\r\n                widget.item.x = widget.$item.x;\r\n                widget.itemChanged();\r\n            }\r\n        }\r\n        if (widgetMovedUp) {\r\n            this.checkCompact();\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} item\r\n     * @return {?}\r\n     */\r\n    moveLeftTillCollision(item) {\r\n        item.x -= 1;\r\n        if (this.gridster.checkCollision(item)) {\r\n            item.x += 1;\r\n            return false;\r\n        }\r\n        else {\r\n            this.moveLeftTillCollision(item);\r\n            return true;\r\n        }\r\n    }\r\n}\nGridsterCompact.ɵfac = function GridsterCompact_Factory(t) { return new (t || GridsterCompact)(ɵngcc0.ɵɵinject(GridsterComponentInterface)); };\nGridsterCompact.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: GridsterCompact, factory: GridsterCompact.ɵfac });\r\n/** @nocollapse */\r\nGridsterCompact.ctorParameters = () => [\r\n    { type: GridsterComponentInterface }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridsterCompact, [{\n        type: Injectable\n    }], function () { return [{ type: GridsterComponentInterface }]; }, null); })();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\nclass GridsterRenderer {\r\n    /**\r\n     * @param {?} gridster\r\n     */\r\n    constructor(gridster) {\r\n        this.gridster = gridster;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    destroy() {\r\n        delete this.gridster;\r\n    }\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} item\r\n     * @param {?} renderer\r\n     * @return {?}\r\n     */\r\n    updateItem(el, item, renderer) {\r\n        if (this.gridster.mobile) {\r\n            renderer.setStyle(el, 'transform', '');\r\n            if (this.gridster.$options.keepFixedHeightInMobile) {\r\n                renderer.setStyle(el, 'height', (item.rows * this.gridster.$options.fixedRowHeight) + 'px');\r\n            }\r\n            else {\r\n                renderer.setStyle(el, 'height', (this.gridster.curWidth / 2 * item.rows) + 'px');\r\n            }\r\n            if (this.gridster.$options.keepFixedWidthInMobile) {\r\n                renderer.setStyle(el, 'width', this.gridster.$options.fixedColWidth + 'px');\r\n            }\r\n            else {\r\n                renderer.setStyle(el, 'width', '');\r\n            }\r\n            renderer.setStyle(el, 'margin-bottom', this.gridster.$options.margin + 'px');\r\n            renderer.setStyle(el, 'margin-right', '');\r\n        }\r\n        else {\r\n            const /** @type {?} */ x = Math.round(this.gridster.curColWidth * item.x);\r\n            const /** @type {?} */ y = Math.round(this.gridster.curRowHeight * item.y);\r\n            const /** @type {?} */ width = this.gridster.curColWidth * item.cols - this.gridster.$options.margin;\r\n            const /** @type {?} */ height = (this.gridster.curRowHeight * item.rows - this.gridster.$options.margin);\r\n            const /** @type {?} */ transform = 'translate3d(' + x + 'px, ' + y + 'px, 0)';\r\n            renderer.setStyle(el, 'transform', transform);\r\n            renderer.setStyle(el, 'width', width + 'px');\r\n            renderer.setStyle(el, 'height', height + 'px');\r\n            let /** @type {?} */ marginBottom = null;\r\n            let /** @type {?} */ marginRight = null;\r\n            if (this.gridster.$options.outerMargin) {\r\n                if (this.gridster.rows === item.rows + item.y) {\r\n                    if (this.gridster.$options.outerMarginBottom !== null) {\r\n                        marginBottom = this.gridster.$options.outerMarginBottom + 'px';\r\n                    }\r\n                    else {\r\n                        marginBottom = this.gridster.$options.margin + 'px';\r\n                    }\r\n                }\r\n                if (this.gridster.columns === item.cols + item.x) {\r\n                    if (this.gridster.$options.outerMarginBottom !== null) {\r\n                        marginRight = this.gridster.$options.outerMarginRight + 'px';\r\n                    }\r\n                    else {\r\n                        marginRight = this.gridster.$options.margin + 'px';\r\n                    }\r\n                }\r\n            }\r\n            renderer.setStyle(el, 'margin-bottom', marginBottom);\r\n            renderer.setStyle(el, 'margin-right', marginRight);\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    updateGridster() {\r\n        let /** @type {?} */ addClass = '';\r\n        let /** @type {?} */ removeClass1 = '';\r\n        let /** @type {?} */ removeClass2 = '';\r\n        let /** @type {?} */ removeClass3 = '';\r\n        if (this.gridster.$options.gridType === GridType.Fit) {\r\n            addClass = GridType.Fit;\r\n            removeClass1 = GridType.ScrollVertical;\r\n            removeClass2 = GridType.ScrollHorizontal;\r\n            removeClass3 = GridType.Fixed;\r\n        }\r\n        else if (this.gridster.$options.gridType === GridType.ScrollVertical) {\r\n            this.gridster.curRowHeight = this.gridster.curColWidth;\r\n            addClass = GridType.ScrollVertical;\r\n            removeClass1 = GridType.Fit;\r\n            removeClass2 = GridType.ScrollHorizontal;\r\n            removeClass3 = GridType.Fixed;\r\n        }\r\n        else if (this.gridster.$options.gridType === GridType.ScrollHorizontal) {\r\n            this.gridster.curColWidth = this.gridster.curRowHeight;\r\n            addClass = GridType.ScrollHorizontal;\r\n            removeClass1 = GridType.Fit;\r\n            removeClass2 = GridType.ScrollVertical;\r\n            removeClass3 = GridType.Fixed;\r\n        }\r\n        else if (this.gridster.$options.gridType === GridType.Fixed) {\r\n            this.gridster.curColWidth = this.gridster.$options.fixedColWidth +\r\n                (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\r\n            this.gridster.curRowHeight = this.gridster.$options.fixedRowHeight +\r\n                (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\r\n            addClass = GridType.Fixed;\r\n            removeClass1 = GridType.Fit;\r\n            removeClass2 = GridType.ScrollVertical;\r\n            removeClass3 = GridType.ScrollHorizontal;\r\n        }\r\n        else if (this.gridster.$options.gridType === GridType.VerticalFixed) {\r\n            this.gridster.curRowHeight = this.gridster.$options.fixedRowHeight +\r\n                (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\r\n            addClass = GridType.ScrollVertical;\r\n            removeClass1 = GridType.Fit;\r\n            removeClass2 = GridType.ScrollHorizontal;\r\n            removeClass3 = GridType.Fixed;\r\n        }\r\n        else if (this.gridster.$options.gridType === GridType.HorizontalFixed) {\r\n            this.gridster.curColWidth = this.gridster.$options.fixedColWidth +\r\n                (this.gridster.$options.ignoreMarginInRow ? 0 : this.gridster.$options.margin);\r\n            addClass = GridType.ScrollHorizontal;\r\n            removeClass1 = GridType.Fit;\r\n            removeClass2 = GridType.ScrollVertical;\r\n            removeClass3 = GridType.Fixed;\r\n        }\r\n        if (this.gridster.mobile) {\r\n            this.gridster.renderer.removeClass(this.gridster.el, addClass);\r\n        }\r\n        else {\r\n            this.gridster.renderer.addClass(this.gridster.el, addClass);\r\n        }\r\n        this.gridster.renderer.removeClass(this.gridster.el, removeClass1);\r\n        this.gridster.renderer.removeClass(this.gridster.el, removeClass2);\r\n        this.gridster.renderer.removeClass(this.gridster.el, removeClass3);\r\n    }\r\n    /**\r\n     * @param {?} i\r\n     * @return {?}\r\n     */\r\n    getGridColumnStyle(i) {\r\n        return {\r\n            transform: 'translateX(' + this.gridster.curColWidth * i + 'px)',\r\n            width: this.gridster.curColWidth - this.gridster.$options.margin + 'px',\r\n            height: this.gridster.gridRows.length * this.gridster.curRowHeight - this.gridster.$options.margin + 'px'\r\n        };\r\n    }\r\n    /**\r\n     * @param {?} i\r\n     * @return {?}\r\n     */\r\n    getGridRowStyle(i) {\r\n        return {\r\n            transform: 'translateY(' + this.gridster.curRowHeight * i + 'px)',\r\n            width: this.gridster.gridColumns.length * this.gridster.curColWidth - this.gridster.$options.margin + 'px',\r\n            height: this.gridster.curRowHeight - this.gridster.$options.margin + 'px'\r\n        };\r\n    }\r\n}\nGridsterRenderer.ɵfac = function GridsterRenderer_Factory(t) { return new (t || GridsterRenderer)(ɵngcc0.ɵɵinject(GridsterComponentInterface)); };\nGridsterRenderer.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: GridsterRenderer, factory: GridsterRenderer.ɵfac });\r\n/** @nocollapse */\r\nGridsterRenderer.ctorParameters = () => [\r\n    { type: GridsterComponentInterface }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridsterRenderer, [{\n        type: Injectable\n    }], function () { return [{ type: GridsterComponentInterface }]; }, null); })();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\nclass GridsterComponent {\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} renderer\r\n     * @param {?} cdRef\r\n     * @param {?} zone\r\n     */\r\n    constructor(el, renderer, cdRef, zone) {\r\n        this.renderer = renderer;\r\n        this.cdRef = cdRef;\r\n        this.zone = zone;\r\n        this.gridColumns = [];\r\n        this.gridRows = [];\r\n        this.el = el.nativeElement;\r\n        this.$options = JSON.parse(JSON.stringify(GridsterConfigService));\r\n        this.calculateLayoutDebounce = GridsterUtils.debounce(this.calculateLayout.bind(this), 0);\r\n        this.mobile = false;\r\n        this.curWidth = 0;\r\n        this.curHeight = 0;\r\n        this.grid = [];\r\n        this.curColWidth = 0;\r\n        this.curRowHeight = 0;\r\n        this.dragInProgress = false;\r\n        this.emptyCell = new GridsterEmptyCell(this);\r\n        this.compact = new GridsterCompact(this);\r\n        this.gridRenderer = new GridsterRenderer(this);\r\n    }\r\n    /**\r\n     * @param {?} item\r\n     * @param {?} item2\r\n     * @return {?}\r\n     */\r\n    static checkCollisionTwoItems(item, item2) {\r\n        return item.x < item2.x + item2.cols\r\n            && item.x + item.cols > item2.x\r\n            && item.y < item2.y + item2.rows\r\n            && item.y + item.rows > item2.y;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        if (this.options.initCallback) {\r\n            this.options.initCallback(this);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} changes\r\n     * @return {?}\r\n     */\r\n    ngOnChanges(changes) {\r\n        if (changes[\"options\"]) {\r\n            this.setOptions();\r\n            this.options.api = {\r\n                optionsChanged: this.optionsChanged.bind(this),\r\n                resize: this.onResize.bind(this),\r\n                getNextPossiblePosition: this.getNextPossiblePosition.bind(this),\r\n                getFirstPossiblePosition: this.getFirstPossiblePosition.bind(this),\r\n                getLastPossiblePosition: this.getLastPossiblePosition.bind(this),\r\n            };\r\n            this.columns = this.$options.minCols;\r\n            this.rows = this.$options.minRows;\r\n            this.setGridSize();\r\n            this.calculateLayout();\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    resize() {\r\n        let /** @type {?} */ height;\r\n        let /** @type {?} */ width;\r\n        if (this.$options.gridType === 'fit' && !this.mobile) {\r\n            width = this.el.offsetWidth;\r\n            height = this.el.offsetHeight;\r\n        }\r\n        else {\r\n            width = this.el.clientWidth;\r\n            height = this.el.clientHeight;\r\n        }\r\n        if ((width !== this.curWidth || height !== this.curHeight) && this.checkIfToResize()) {\r\n            this.onResize();\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    setOptions() {\r\n        this.$options = GridsterUtils.merge(this.$options, this.options, this.$options);\r\n        if (!this.$options.disableWindowResize && !this.windowResize) {\r\n            this.windowResize = this.renderer.listen('window', 'resize', this.onResize.bind(this));\r\n        }\r\n        else if (this.$options.disableWindowResize && this.windowResize) {\r\n            this.windowResize();\r\n            this.windowResize = null;\r\n        }\r\n        this.emptyCell.updateOptions();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    optionsChanged() {\r\n        this.setOptions();\r\n        let /** @type {?} */ widgetsIndex = this.grid.length - 1, /** @type {?} */ widget;\r\n        for (; widgetsIndex >= 0; widgetsIndex--) {\r\n            widget = this.grid[widgetsIndex];\r\n            widget.updateOptions();\r\n        }\r\n        this.calculateLayout();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        if (this.windowResize) {\r\n            this.windowResize();\r\n        }\r\n        if (this.options.destroyCallback) {\r\n            this.options.destroyCallback(this);\r\n        }\r\n        if (this.options.api) {\r\n            this.options.api.resize = undefined;\r\n            this.options.api.optionsChanged = undefined;\r\n            this.options.api.getNextPossiblePosition = undefined;\r\n            this.options.api = undefined;\r\n        }\r\n        this.emptyCell.destroy();\r\n        delete this.emptyCell;\r\n        this.compact.destroy();\r\n        delete this.compact;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    onResize() {\r\n        this.setGridSize();\r\n        this.calculateLayout();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    checkIfToResize() {\r\n        const /** @type {?} */ clientWidth = this.el.clientWidth;\r\n        const /** @type {?} */ offsetWidth = this.el.offsetWidth;\r\n        const /** @type {?} */ scrollWidth = this.el.scrollWidth;\r\n        const /** @type {?} */ clientHeight = this.el.clientHeight;\r\n        const /** @type {?} */ offsetHeight = this.el.offsetHeight;\r\n        const /** @type {?} */ scrollHeight = this.el.scrollHeight;\r\n        const /** @type {?} */ verticalScrollPresent = clientWidth < offsetWidth && scrollHeight > offsetHeight\r\n            && scrollHeight - offsetHeight < offsetWidth - clientWidth;\r\n        const /** @type {?} */ horizontalScrollPresent = clientHeight < offsetHeight\r\n            && scrollWidth > offsetWidth && scrollWidth - offsetWidth < offsetHeight - clientHeight;\r\n        if (verticalScrollPresent) {\r\n            return false;\r\n        }\r\n        return !horizontalScrollPresent;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    setGridSize() {\r\n        let /** @type {?} */ width = this.el.clientWidth;\r\n        let /** @type {?} */ height = this.el.clientHeight;\r\n        if (this.$options.setGridSize || this.$options.gridType === 'fit' && !this.mobile) {\r\n            width = this.el.offsetWidth;\r\n            height = this.el.offsetHeight;\r\n        }\r\n        else {\r\n            width = this.el.clientWidth;\r\n            height = this.el.clientHeight;\r\n        }\r\n        this.curWidth = width;\r\n        this.curHeight = height;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    setGridDimensions() {\r\n        this.setGridSize();\r\n        if (!this.mobile && this.$options.mobileBreakpoint > this.curWidth) {\r\n            this.mobile = !this.mobile;\r\n            this.renderer.addClass(this.el, 'mobile');\r\n        }\r\n        else if (this.mobile && this.$options.mobileBreakpoint < this.curWidth) {\r\n            this.mobile = !this.mobile;\r\n            this.renderer.removeClass(this.el, 'mobile');\r\n        }\r\n        let /** @type {?} */ rows = this.$options.minRows, /** @type {?} */ columns = this.$options.minCols;\r\n        let /** @type {?} */ widgetsIndex = this.grid.length - 1, /** @type {?} */ widget;\r\n        for (; widgetsIndex >= 0; widgetsIndex--) {\r\n            widget = this.grid[widgetsIndex];\r\n            if (!widget.notPlaced) {\r\n                rows = Math.max(rows, widget.$item.y + widget.$item.rows);\r\n                columns = Math.max(columns, widget.$item.x + widget.$item.cols);\r\n            }\r\n        }\r\n        if (this.columns !== columns || this.rows !== rows) {\r\n            this.columns = columns;\r\n            this.rows = rows;\r\n            if (this.options.gridSizeChangedCallback) {\r\n                this.options.gridSizeChangedCallback(this);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    calculateLayout() {\r\n        if (this.compact) {\r\n            this.compact.checkCompact();\r\n        }\r\n        this.setGridDimensions();\r\n        if (this.$options.outerMargin) {\r\n            let /** @type {?} */ marginWidth = -this.$options.margin;\r\n            if (this.$options.outerMarginLeft !== null) {\r\n                marginWidth += this.$options.outerMarginLeft;\r\n                this.renderer.setStyle(this.el, 'padding-left', this.$options.outerMarginLeft + 'px');\r\n            }\r\n            else {\r\n                marginWidth += this.$options.margin;\r\n                this.renderer.setStyle(this.el, 'padding-left', this.$options.margin + 'px');\r\n            }\r\n            if (this.$options.outerMarginRight !== null) {\r\n                marginWidth += this.$options.outerMarginRight;\r\n                this.renderer.setStyle(this.el, 'padding-right', this.$options.outerMarginRight + 'px');\r\n            }\r\n            else {\r\n                marginWidth += this.$options.margin;\r\n                this.renderer.setStyle(this.el, 'padding-right', this.$options.margin + 'px');\r\n            }\r\n            this.curColWidth = (this.curWidth - marginWidth) / this.columns;\r\n            let /** @type {?} */ marginHeight = -this.$options.margin;\r\n            if (this.$options.outerMarginTop !== null) {\r\n                marginHeight += this.$options.outerMarginTop;\r\n                this.renderer.setStyle(this.el, 'padding-top', this.$options.outerMarginTop + 'px');\r\n            }\r\n            else {\r\n                marginHeight += this.$options.margin;\r\n                this.renderer.setStyle(this.el, 'padding-top', this.$options.margin + 'px');\r\n            }\r\n            if (this.$options.outerMarginBottom !== null) {\r\n                marginHeight += this.$options.outerMarginBottom;\r\n                this.renderer.setStyle(this.el, 'padding-bottom', this.$options.outerMarginBottom + 'px');\r\n            }\r\n            else {\r\n                marginHeight += this.$options.margin;\r\n                this.renderer.setStyle(this.el, 'padding-bottom', this.$options.margin + 'px');\r\n            }\r\n            this.curRowHeight = (this.curHeight - marginHeight) / this.rows;\r\n        }\r\n        else {\r\n            this.curColWidth = (this.curWidth + this.$options.margin) / this.columns;\r\n            this.curRowHeight = (this.curHeight + this.$options.margin) / this.rows;\r\n            this.renderer.setStyle(this.el, 'padding-left', 0 + 'px');\r\n            this.renderer.setStyle(this.el, 'padding-right', 0 + 'px');\r\n            this.renderer.setStyle(this.el, 'padding-top', 0 + 'px');\r\n            this.renderer.setStyle(this.el, 'padding-bottom', 0 + 'px');\r\n        }\r\n        this.gridRenderer.updateGridster();\r\n        this.updateGrid();\r\n        if (this.$options.setGridSize) {\r\n            this.renderer.setStyle(this.el, 'width', (this.columns * this.curColWidth + this.$options.margin) + 'px');\r\n            this.renderer.setStyle(this.el, 'height', (this.rows * this.curRowHeight + this.$options.margin) + 'px');\r\n        }\r\n        else {\r\n            this.renderer.setStyle(this.el, 'width', '');\r\n            this.renderer.setStyle(this.el, 'height', '');\r\n        }\r\n        let /** @type {?} */ widgetsIndex = this.grid.length - 1, /** @type {?} */ widget;\r\n        for (; widgetsIndex >= 0; widgetsIndex--) {\r\n            widget = this.grid[widgetsIndex];\r\n            widget.setSize();\r\n            widget.drag.toggle();\r\n            widget.resize.toggle();\r\n        }\r\n        setTimeout(this.resize.bind(this), 100);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    updateGrid() {\r\n        if (this.$options.displayGrid === 'always' && !this.mobile) {\r\n            this.renderer.addClass(this.el, 'display-grid');\r\n        }\r\n        else if (this.$options.displayGrid === 'onDrag&Resize' && this.dragInProgress) {\r\n            this.renderer.addClass(this.el, 'display-grid');\r\n        }\r\n        else if (this.$options.displayGrid === 'none' || !this.dragInProgress || this.mobile) {\r\n            this.renderer.removeClass(this.el, 'display-grid');\r\n        }\r\n        this.setGridDimensions();\r\n        this.gridColumns.length = Math.max(this.columns, Math.floor(this.curWidth / this.curColWidth)) || 0;\r\n        this.gridRows.length = Math.max(this.rows, Math.floor(this.curHeight / this.curRowHeight)) || 0;\r\n        this.cdRef.markForCheck();\r\n    }\r\n    /**\r\n     * @param {?} itemComponent\r\n     * @return {?}\r\n     */\r\n    addItem(itemComponent) {\r\n        if (itemComponent.$item.cols === undefined) {\r\n            itemComponent.$item.cols = this.$options.defaultItemCols;\r\n            itemComponent.item.cols = itemComponent.$item.cols;\r\n            itemComponent.itemChanged();\r\n        }\r\n        if (itemComponent.$item.rows === undefined) {\r\n            itemComponent.$item.rows = this.$options.defaultItemRows;\r\n            itemComponent.item.rows = itemComponent.$item.rows;\r\n            itemComponent.itemChanged();\r\n        }\r\n        if (itemComponent.$item.x === -1 || itemComponent.$item.y === -1) {\r\n            this.autoPositionItem(itemComponent);\r\n        }\r\n        else if (this.checkCollision(itemComponent.$item)) {\r\n            if (!this.$options.disableWarnings) {\r\n                itemComponent.notPlaced = true;\r\n                console.warn('Can\\'t be placed in the bounds of the dashboard, trying to auto position!/n' +\r\n                    JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\r\n            }\r\n            if (!this.$options.disableAutoPositionOnConflict) {\r\n                this.autoPositionItem(itemComponent);\r\n            }\r\n            else {\r\n                itemComponent.notPlaced = true;\r\n            }\r\n        }\r\n        this.grid.push(itemComponent);\r\n        this.calculateLayoutDebounce();\r\n    }\r\n    /**\r\n     * @param {?} itemComponent\r\n     * @return {?}\r\n     */\r\n    removeItem(itemComponent) {\r\n        this.grid.splice(this.grid.indexOf(itemComponent), 1);\r\n        this.calculateLayoutDebounce();\r\n        if (this.options.itemRemovedCallback) {\r\n            this.options.itemRemovedCallback(itemComponent.item, itemComponent);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} item\r\n     * @return {?}\r\n     */\r\n    checkCollision(item) {\r\n        let /** @type {?} */ collision = false;\r\n        if (this.options.itemValidateCallback) {\r\n            collision = !this.options.itemValidateCallback(item);\r\n        }\r\n        if (!collision && this.checkGridCollision(item)) {\r\n            collision = true;\r\n        }\r\n        if (!collision) {\r\n            const /** @type {?} */ c = this.findItemWithItem(item);\r\n            if (c) {\r\n                collision = c;\r\n            }\r\n        }\r\n        return collision;\r\n    }\r\n    /**\r\n     * @param {?} item\r\n     * @return {?}\r\n     */\r\n    checkGridCollision(item) {\r\n        const /** @type {?} */ noNegativePosition = item.y > -1 && item.x > -1;\r\n        const /** @type {?} */ maxGridCols = item.cols + item.x <= this.$options.maxCols;\r\n        const /** @type {?} */ maxGridRows = item.rows + item.y <= this.$options.maxRows;\r\n        const /** @type {?} */ maxItemCols = item.maxItemCols === undefined ? this.$options.maxItemCols : item.maxItemCols;\r\n        const /** @type {?} */ minItemCols = item.minItemCols === undefined ? this.$options.minItemCols : item.minItemCols;\r\n        const /** @type {?} */ maxItemRows = item.maxItemRows === undefined ? this.$options.maxItemRows : item.maxItemRows;\r\n        const /** @type {?} */ minItemRows = item.minItemRows === undefined ? this.$options.minItemRows : item.minItemRows;\r\n        const /** @type {?} */ inColsLimits = item.cols <= maxItemCols && item.cols >= minItemCols;\r\n        const /** @type {?} */ inRowsLimits = item.rows <= maxItemRows && item.rows >= minItemRows;\r\n        const /** @type {?} */ minAreaLimit = item.minItemArea === undefined ? this.$options.minItemArea : item.minItemArea;\r\n        const /** @type {?} */ maxAreaLimit = item.maxItemArea === undefined ? this.$options.maxItemArea : item.maxItemArea;\r\n        const /** @type {?} */ area = item.cols * item.rows;\r\n        const /** @type {?} */ inMinArea = minAreaLimit <= area;\r\n        const /** @type {?} */ inMaxArea = maxAreaLimit >= area;\r\n        return !(noNegativePosition && maxGridCols && maxGridRows && inColsLimits && inRowsLimits && inMinArea && inMaxArea);\r\n    }\r\n    /**\r\n     * @param {?} item\r\n     * @return {?}\r\n     */\r\n    findItemWithItem(item) {\r\n        let /** @type {?} */ widgetsIndex = this.grid.length - 1, /** @type {?} */ widget;\r\n        for (; widgetsIndex > -1; widgetsIndex--) {\r\n            widget = this.grid[widgetsIndex];\r\n            if (widget.$item !== item && GridsterComponent.checkCollisionTwoItems(widget.$item, item)) {\r\n                return widget;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * @param {?} item\r\n     * @return {?}\r\n     */\r\n    findItemsWithItem(item) {\r\n        const /** @type {?} */ a = [];\r\n        let /** @type {?} */ widgetsIndex = this.grid.length - 1, /** @type {?} */ widget;\r\n        for (; widgetsIndex > -1; widgetsIndex--) {\r\n            widget = this.grid[widgetsIndex];\r\n            if (widget.$item !== item && GridsterComponent.checkCollisionTwoItems(widget.$item, item)) {\r\n                a.push(widget);\r\n            }\r\n        }\r\n        return a;\r\n    }\r\n    /**\r\n     * @param {?} itemComponent\r\n     * @return {?}\r\n     */\r\n    autoPositionItem(itemComponent) {\r\n        if (this.getNextPossiblePosition(itemComponent.$item)) {\r\n            itemComponent.notPlaced = false;\r\n            itemComponent.item.x = itemComponent.$item.x;\r\n            itemComponent.item.y = itemComponent.$item.y;\r\n            itemComponent.itemChanged();\r\n        }\r\n        else {\r\n            itemComponent.notPlaced = true;\r\n            if (!this.$options.disableWarnings) {\r\n                console.warn('Can\\'t be placed in the bounds of the dashboard!/n' +\r\n                    JSON.stringify(itemComponent.item, ['cols', 'rows', 'x', 'y']));\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} newItem\r\n     * @param {?=} startingFrom\r\n     * @return {?}\r\n     */\r\n    getNextPossiblePosition(newItem, startingFrom = {}) {\r\n        if (newItem.cols === -1) {\r\n            newItem.cols = this.$options.defaultItemCols;\r\n        }\r\n        if (newItem.rows === -1) {\r\n            newItem.rows = this.$options.defaultItemRows;\r\n        }\r\n        this.setGridDimensions();\r\n        let /** @type {?} */ rowsIndex = startingFrom.y || 0, /** @type {?} */ colsIndex;\r\n        for (; rowsIndex < this.rows; rowsIndex++) {\r\n            newItem.y = rowsIndex;\r\n            colsIndex = startingFrom.x || 0;\r\n            for (; colsIndex < this.columns; colsIndex++) {\r\n                newItem.x = colsIndex;\r\n                if (!this.checkCollision(newItem)) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        const /** @type {?} */ canAddToRows = this.$options.maxRows >= this.rows + newItem.rows;\r\n        const /** @type {?} */ canAddToColumns = this.$options.maxCols >= this.columns + newItem.cols;\r\n        const /** @type {?} */ addToRows = this.rows <= this.columns && canAddToRows;\r\n        if (!addToRows && canAddToColumns) {\r\n            newItem.x = this.columns;\r\n            newItem.y = 0;\r\n            return true;\r\n        }\r\n        else if (canAddToRows) {\r\n            newItem.y = this.rows;\r\n            newItem.x = 0;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * @param {?} item\r\n     * @return {?}\r\n     */\r\n    getFirstPossiblePosition(item) {\r\n        const /** @type {?} */ tmpItem = Object.assign({}, item);\r\n        this.getNextPossiblePosition(tmpItem);\r\n        return tmpItem;\r\n    }\r\n    /**\r\n     * @param {?} item\r\n     * @return {?}\r\n     */\r\n    getLastPossiblePosition(item) {\r\n        let /** @type {?} */ farthestItem = { y: 0, x: 0 };\r\n        farthestItem = this.grid.reduce((prev, curr) => {\r\n            const /** @type {?} */ currCoords = { y: curr.$item.y + curr.$item.rows - 1, x: curr.$item.x + curr.$item.cols - 1 };\r\n            if (GridsterUtils.compareItems(prev, currCoords) === 1) {\r\n                return currCoords;\r\n            }\r\n            else {\r\n                return prev;\r\n            }\r\n        }, farthestItem);\r\n        const /** @type {?} */ tmpItem = Object.assign({}, item);\r\n        this.getNextPossiblePosition(tmpItem, farthestItem);\r\n        return tmpItem;\r\n    }\r\n    /**\r\n     * @param {?} x\r\n     * @param {?} roundingMethod\r\n     * @param {?=} noLimit\r\n     * @return {?}\r\n     */\r\n    pixelsToPositionX(x, roundingMethod, noLimit) {\r\n        const /** @type {?} */ position = roundingMethod(x / this.curColWidth);\r\n        if (noLimit) {\r\n            return position;\r\n        }\r\n        else {\r\n            return Math.max(position, 0);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} y\r\n     * @param {?} roundingMethod\r\n     * @param {?=} noLimit\r\n     * @return {?}\r\n     */\r\n    pixelsToPositionY(y, roundingMethod, noLimit) {\r\n        const /** @type {?} */ position = roundingMethod(y / this.curRowHeight);\r\n        if (noLimit) {\r\n            return position;\r\n        }\r\n        else {\r\n            return Math.max(position, 0);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} x\r\n     * @return {?}\r\n     */\r\n    positionXToPixels(x) {\r\n        return x * this.curColWidth;\r\n    }\r\n    /**\r\n     * @param {?} y\r\n     * @return {?}\r\n     */\r\n    positionYToPixels(y) {\r\n        return y * this.curRowHeight;\r\n    }\r\n}\nGridsterComponent.ɵfac = function GridsterComponent_Factory(t) { return new (t || GridsterComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nGridsterComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: GridsterComponent, selectors: [[\"gridster\"]], inputs: { options: \"options\" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 4, vars: 2, consts: [[\"class\", \"gridster-column\", 3, \"ngStyle\", 4, \"ngFor\", \"ngForOf\"], [\"class\", \"gridster-row\", 3, \"ngStyle\", 4, \"ngFor\", \"ngForOf\"], [1, \"gridster-preview\"], [1, \"gridster-column\", 3, \"ngStyle\"], [1, \"gridster-row\", 3, \"ngStyle\"]], template: function GridsterComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵtemplate(0, GridsterComponent_div_0_Template, 1, 1, \"div\", 0);\n        ɵngcc0.ɵɵtemplate(1, GridsterComponent_div_1_Template, 1, 1, \"div\", 1);\n        ɵngcc0.ɵɵprojection(2);\n        ɵngcc0.ɵɵelement(3, \"gridster-preview\", 2);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.gridColumns);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.gridRows);\n    } }, directives: function () { return [ɵngcc1.NgForOf, GridsterPreviewComponent, ɵngcc1.NgStyle]; }, styles: [\"gridster{position:relative;box-sizing:border-box;background:grey;width:100%;height:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:block}gridster.fit{overflow-x:hidden;overflow-y:hidden}gridster.scrollVertical{overflow-x:hidden;overflow-y:auto}gridster.scrollHorizontal{overflow-x:auto;overflow-y:hidden}gridster.fixed{overflow:auto}gridster.mobile{overflow-x:hidden;overflow-y:auto}gridster.mobile gridster-item{position:relative}gridster .gridster-column,gridster .gridster-row{position:absolute;display:none;transition:.3s;box-sizing:border-box}gridster.display-grid .gridster-column,gridster.display-grid .gridster-row{display:block}gridster .gridster-column{border-left:1px solid #fff;border-right:1px solid #fff}gridster .gridster-row{border-top:1px solid #fff;border-bottom:1px solid #fff}\"], encapsulation: 2 });\r\n/** @nocollapse */\r\nGridsterComponent.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: Renderer2 },\r\n    { type: ChangeDetectorRef },\r\n    { type: NgZone }\r\n];\r\nGridsterComponent.propDecorators = {\r\n    options: [{ type: Input }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridsterComponent, [{\n        type: Component,\n        args: [{\n                selector: 'gridster',\n                template: `<div class=\"gridster-column\" *ngFor=\"let column of gridColumns; let i = index;\"\n     [ngStyle]=\"gridRenderer.getGridColumnStyle(i)\"></div>\n<div class=\"gridster-row\" *ngFor=\"let row of gridRows; let i = index;\"\n     [ngStyle]=\"gridRenderer.getGridRowStyle(i)\"></div>\n<ng-content></ng-content>\n<gridster-preview class=\"gridster-preview\"></gridster-preview>\n`,\n                styles: [`gridster{position:relative;box-sizing:border-box;background:grey;width:100%;height:100%;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;display:block}gridster.fit{overflow-x:hidden;overflow-y:hidden}gridster.scrollVertical{overflow-x:hidden;overflow-y:auto}gridster.scrollHorizontal{overflow-x:auto;overflow-y:hidden}gridster.fixed{overflow:auto}gridster.mobile{overflow-x:hidden;overflow-y:auto}gridster.mobile gridster-item{position:relative}gridster .gridster-column,gridster .gridster-row{position:absolute;display:none;transition:.3s;box-sizing:border-box}gridster.display-grid .gridster-column,gridster.display-grid .gridster-row{display:block}gridster .gridster-column{border-left:1px solid #fff;border-right:1px solid #fff}gridster .gridster-row{border-top:1px solid #fff;border-bottom:1px solid #fff}`],\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc0.NgZone }]; }, { options: [{\n            type: Input\n        }] }); })();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\n/**\r\n * @abstract\r\n */\r\nclass GridsterItemComponentInterface {\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\nclass GridsterSwap {\r\n    /**\r\n     * @param {?} gridsterItem\r\n     */\r\n    constructor(gridsterItem) {\r\n        this.gridsterItem = gridsterItem;\r\n        this.gridster = gridsterItem.gridster;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    destroy() {\r\n        delete this.gridster;\r\n        delete this.gridsterItem;\r\n        delete this.swapedItem;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    swapItems() {\r\n        if (this.gridster.$options.swap) {\r\n            this.checkSwapBack();\r\n            this.checkSwap(this.gridsterItem);\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    checkSwapBack() {\r\n        if (this.swapedItem) {\r\n            const /** @type {?} */ x = this.swapedItem.$item.x;\r\n            const /** @type {?} */ y = this.swapedItem.$item.y;\r\n            this.swapedItem.$item.x = this.swapedItem.item.x || 0;\r\n            this.swapedItem.$item.y = this.swapedItem.item.y || 0;\r\n            if (this.gridster.checkCollision(this.swapedItem.$item)) {\r\n                this.swapedItem.$item.x = x;\r\n                this.swapedItem.$item.y = y;\r\n            }\r\n            else {\r\n                this.swapedItem.setSize();\r\n                this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\r\n                this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\r\n                this.swapedItem = undefined;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    restoreSwapItem() {\r\n        if (this.swapedItem) {\r\n            this.swapedItem.$item.x = this.swapedItem.item.x || 0;\r\n            this.swapedItem.$item.y = this.swapedItem.item.y || 0;\r\n            this.swapedItem.setSize();\r\n            this.swapedItem = undefined;\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    setSwapItem() {\r\n        if (this.swapedItem) {\r\n            this.swapedItem.checkItemChanges(this.swapedItem.$item, this.swapedItem.item);\r\n            this.swapedItem = undefined;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} pushedBy\r\n     * @return {?}\r\n     */\r\n    checkSwap(pushedBy) {\r\n        const /** @type {?} */ gridsterItemCollision = this.gridster.checkCollision(pushedBy.$item);\r\n        if (gridsterItemCollision && gridsterItemCollision !== true && gridsterItemCollision.canBeDragged()) {\r\n            const /** @type {?} */ gridsterItemCollide = gridsterItemCollision;\r\n            const /** @type {?} */ copyCollisionX = gridsterItemCollide.$item.x;\r\n            const /** @type {?} */ copyCollisionY = gridsterItemCollide.$item.y;\r\n            const /** @type {?} */ copyX = pushedBy.$item.x;\r\n            const /** @type {?} */ copyY = pushedBy.$item.y;\r\n            gridsterItemCollide.$item.x = pushedBy.item.x || 0;\r\n            gridsterItemCollide.$item.y = pushedBy.item.y || 0;\r\n            pushedBy.$item.x = gridsterItemCollide.item.x || 0;\r\n            pushedBy.$item.y = gridsterItemCollide.item.y || 0;\r\n            if (this.gridster.checkCollision(gridsterItemCollide.$item) || this.gridster.checkCollision(pushedBy.$item)) {\r\n                pushedBy.$item.x = copyX;\r\n                pushedBy.$item.y = copyY;\r\n                gridsterItemCollide.$item.x = copyCollisionX;\r\n                gridsterItemCollide.$item.y = copyCollisionY;\r\n            }\r\n            else {\r\n                gridsterItemCollide.setSize();\r\n                this.swapedItem = gridsterItemCollide;\r\n            }\r\n        }\r\n    }\r\n}\nGridsterSwap.ɵfac = function GridsterSwap_Factory(t) { return new (t || GridsterSwap)(ɵngcc0.ɵɵinject(GridsterItemComponentInterface)); };\nGridsterSwap.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: GridsterSwap, factory: GridsterSwap.ɵfac });\r\n/** @nocollapse */\r\nGridsterSwap.ctorParameters = () => [\r\n    { type: GridsterItemComponentInterface }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridsterSwap, [{\n        type: Injectable\n    }], function () { return [{ type: GridsterItemComponentInterface }]; }, null); })();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\nlet /** @type {?} */ scrollSensitivity;\r\nlet /** @type {?} */ scrollSpeed;\r\nconst /** @type {?} */ intervalDuration = 50;\r\nlet /** @type {?} */ gridsterElement;\r\nlet /** @type {?} */ resizeEvent;\r\nlet /** @type {?} */ resizeEventType;\r\nlet /** @type {?} */ intervalE;\r\nlet /** @type {?} */ intervalW;\r\nlet /** @type {?} */ intervalN;\r\nlet /** @type {?} */ intervalS;\r\n/**\r\n * @param {?} gridster\r\n * @param {?} left\r\n * @param {?} top\r\n * @param {?} width\r\n * @param {?} height\r\n * @param {?} e\r\n * @param {?} lastMouse\r\n * @param {?} calculateItemPosition\r\n * @param {?=} resize\r\n * @param {?=} resizeEventScrollType\r\n * @return {?}\r\n */\r\nfunction scroll(gridster, left, top, width, height, e, lastMouse, calculateItemPosition, resize, resizeEventScrollType) {\r\n    scrollSensitivity = gridster.$options.scrollSensitivity;\r\n    scrollSpeed = gridster.$options.scrollSpeed;\r\n    gridsterElement = gridster.el;\r\n    resizeEvent = resize;\r\n    resizeEventType = resizeEventScrollType;\r\n    const /** @type {?} */ offsetWidth = gridsterElement.offsetWidth;\r\n    const /** @type {?} */ offsetHeight = gridsterElement.offsetHeight;\r\n    const /** @type {?} */ offsetLeft = gridsterElement.scrollLeft;\r\n    const /** @type {?} */ offsetTop = gridsterElement.scrollTop;\r\n    const /** @type {?} */ elemTopOffset = top - offsetTop;\r\n    const /** @type {?} */ elemBottomOffset = offsetHeight + offsetTop - top - height;\r\n    if (lastMouse.clientY < e.clientY && elemBottomOffset < scrollSensitivity) {\r\n        cancelN();\r\n        if ((resizeEvent && resizeEventType && !resizeEventType.s) || intervalS) {\r\n            return;\r\n        }\r\n        intervalS = startVertical(1, calculateItemPosition, lastMouse);\r\n    }\r\n    else if (lastMouse.clientY > e.clientY && offsetTop > 0 && elemTopOffset < scrollSensitivity) {\r\n        cancelS();\r\n        if ((resizeEvent && resizeEventType && !resizeEventType.n) || intervalN) {\r\n            return;\r\n        }\r\n        intervalN = startVertical(-1, calculateItemPosition, lastMouse);\r\n    }\r\n    else if (lastMouse.clientY !== e.clientY) {\r\n        cancelVertical();\r\n    }\r\n    const /** @type {?} */ elemRightOffset = offsetLeft + offsetWidth - left - width;\r\n    const /** @type {?} */ elemLeftOffset = left - offsetLeft;\r\n    if (lastMouse.clientX < e.clientX && elemRightOffset <= scrollSensitivity) {\r\n        cancelW();\r\n        if ((resizeEvent && resizeEventType && !resizeEventType.e) || intervalE) {\r\n            return;\r\n        }\r\n        intervalE = startHorizontal(1, calculateItemPosition, lastMouse);\r\n    }\r\n    else if (lastMouse.clientX > e.clientX && offsetLeft > 0 && elemLeftOffset < scrollSensitivity) {\r\n        cancelE();\r\n        if ((resizeEvent && resizeEventType && !resizeEventType.w) || intervalW) {\r\n            return;\r\n        }\r\n        intervalW = startHorizontal(-1, calculateItemPosition, lastMouse);\r\n    }\r\n    else if (lastMouse.clientX !== e.clientX) {\r\n        cancelHorizontal();\r\n    }\r\n}\r\n/**\r\n * @param {?} sign\r\n * @param {?} calculateItemPosition\r\n * @param {?} lastMouse\r\n * @return {?}\r\n */\r\nfunction startVertical(sign, calculateItemPosition, lastMouse) {\r\n    let /** @type {?} */ clientY = lastMouse.clientY;\r\n    return setInterval(() => {\r\n        if (!gridsterElement || sign === -1 && gridsterElement.scrollTop - scrollSpeed < 0) {\r\n            cancelVertical();\r\n        }\r\n        gridsterElement.scrollTop += sign * scrollSpeed;\r\n        clientY += sign * scrollSpeed;\r\n        calculateItemPosition({ clientX: lastMouse.clientX, clientY: clientY });\r\n    }, intervalDuration);\r\n}\r\n/**\r\n * @param {?} sign\r\n * @param {?} calculateItemPosition\r\n * @param {?} lastMouse\r\n * @return {?}\r\n */\r\nfunction startHorizontal(sign, calculateItemPosition, lastMouse) {\r\n    let /** @type {?} */ clientX = lastMouse.clientX;\r\n    return setInterval(() => {\r\n        if (!gridsterElement || sign === -1 && gridsterElement.scrollLeft - scrollSpeed < 0) {\r\n            cancelHorizontal();\r\n        }\r\n        gridsterElement.scrollLeft += sign * scrollSpeed;\r\n        clientX += sign * scrollSpeed;\r\n        calculateItemPosition({ clientX: clientX, clientY: lastMouse.clientY });\r\n    }, intervalDuration);\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction cancelScroll() {\r\n    cancelHorizontal();\r\n    cancelVertical();\r\n    gridsterElement = undefined;\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction cancelHorizontal() {\r\n    cancelE();\r\n    cancelW();\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction cancelVertical() {\r\n    cancelN();\r\n    cancelS();\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction cancelE() {\r\n    if (intervalE) {\r\n        clearInterval(intervalE);\r\n        intervalE = 0;\r\n    }\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction cancelW() {\r\n    if (intervalW) {\r\n        clearInterval(intervalW);\r\n        intervalW = 0;\r\n    }\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction cancelS() {\r\n    if (intervalS) {\r\n        clearInterval(intervalS);\r\n        intervalS = 0;\r\n    }\r\n}\r\n/**\r\n * @return {?}\r\n */\r\nfunction cancelN() {\r\n    if (intervalN) {\r\n        clearInterval(intervalN);\r\n        intervalN = 0;\r\n    }\r\n}\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\nclass GridsterPush {\r\n    /**\r\n     * @param {?} gridsterItem\r\n     */\r\n    constructor(gridsterItem) {\r\n        this.pushedItems = [];\r\n        this.pushedItemsTemp = [];\r\n        this.pushedItemsTempPath = [];\r\n        this.pushedItemsPath = [];\r\n        this.gridsterItem = gridsterItem;\r\n        this.gridster = gridsterItem.gridster;\r\n        this.tryPattern = {\r\n            fromEast: [this.tryWest, this.trySouth, this.tryNorth, this.tryEast],\r\n            fromWest: [this.tryEast, this.trySouth, this.tryNorth, this.tryWest],\r\n            fromNorth: [this.trySouth, this.tryEast, this.tryWest, this.tryNorth],\r\n            fromSouth: [this.tryNorth, this.tryEast, this.tryWest, this.trySouth]\r\n        };\r\n        this.fromSouth = 'fromSouth';\r\n        this.fromNorth = 'fromNorth';\r\n        this.fromEast = 'fromEast';\r\n        this.fromWest = 'fromWest';\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    destroy() {\r\n        delete this.gridster;\r\n        delete this.gridsterItem;\r\n    }\r\n    /**\r\n     * @param {?} direction\r\n     * @param {?=} disable\r\n     * @return {?}\r\n     */\r\n    pushItems(direction, disable) {\r\n        if (this.gridster.$options.pushItems && !disable) {\r\n            this.pushedItemsOrder = [];\r\n            const /** @type {?} */ pushed = this.push(this.gridsterItem, direction);\r\n            if (!pushed) {\r\n                this.restoreTempItems();\r\n            }\r\n            this.pushedItemsOrder = [];\r\n            this.pushedItemsTemp = [];\r\n            this.pushedItemsTempPath = [];\r\n            return pushed;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    restoreTempItems() {\r\n        let /** @type {?} */ i = this.pushedItemsTemp.length - 1;\r\n        for (; i > -1; i--) {\r\n            this.removeFromTempPushed(this.pushedItemsTemp[i]);\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    restoreItems() {\r\n        let /** @type {?} */ i = 0;\r\n        const /** @type {?} */ l = this.pushedItems.length;\r\n        let /** @type {?} */ pushedItem;\r\n        for (; i < l; i++) {\r\n            pushedItem = this.pushedItems[i];\r\n            pushedItem.$item.x = pushedItem.item.x || 0;\r\n            pushedItem.$item.y = pushedItem.item.y || 0;\r\n            pushedItem.setSize();\r\n        }\r\n        this.pushedItems = [];\r\n        this.pushedItemsPath = [];\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    setPushedItems() {\r\n        let /** @type {?} */ i = 0;\r\n        const /** @type {?} */ l = this.pushedItems.length;\r\n        let /** @type {?} */ pushedItem;\r\n        for (; i < l; i++) {\r\n            pushedItem = this.pushedItems[i];\r\n            pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\r\n        }\r\n        this.pushedItems = [];\r\n        this.pushedItemsPath = [];\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    checkPushBack() {\r\n        let /** @type {?} */ i = this.pushedItems.length - 1;\r\n        let /** @type {?} */ change = false;\r\n        for (; i > -1; i--) {\r\n            if (this.checkPushedItem(this.pushedItems[i], i)) {\r\n                change = true;\r\n            }\r\n        }\r\n        if (change) {\r\n            this.checkPushBack();\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} gridsterItem\r\n     * @param {?} direction\r\n     * @return {?}\r\n     */\r\n    push(gridsterItem, direction) {\r\n        if (this.gridster.checkGridCollision(gridsterItem.$item)) {\r\n            return false;\r\n        }\r\n        if (direction === '') {\r\n            return false;\r\n        }\r\n        const /** @type {?} */ a = this.gridster.findItemsWithItem(gridsterItem.$item);\r\n        let /** @type {?} */ i = a.length - 1, /** @type {?} */ itemCollision;\r\n        let /** @type {?} */ makePush = true;\r\n        const /** @type {?} */ b = [];\r\n        for (; i > -1; i--) {\r\n            itemCollision = a[i];\r\n            if (itemCollision === this.gridsterItem) {\r\n                makePush = false;\r\n                break;\r\n            }\r\n            if (!itemCollision.canBeDragged()) {\r\n                makePush = false;\r\n                break;\r\n            }\r\n            const /** @type {?} */ compare = this.pushedItemsTemp.find((el) => {\r\n                return el.$item.x === itemCollision.$item.x && el.$item.y === itemCollision.$item.y;\r\n            });\r\n            if (compare) {\r\n                makePush = false;\r\n                break;\r\n            }\r\n            if (this.tryPattern[direction][0].call(this, itemCollision, gridsterItem)) {\r\n                this.pushedItemsOrder.push(itemCollision);\r\n                b.push(itemCollision);\r\n            }\r\n            else if (this.tryPattern[direction][1].call(this, itemCollision, gridsterItem)) {\r\n                this.pushedItemsOrder.push(itemCollision);\r\n                b.push(itemCollision);\r\n            }\r\n            else if (this.tryPattern[direction][2].call(this, itemCollision, gridsterItem)) {\r\n                this.pushedItemsOrder.push(itemCollision);\r\n                b.push(itemCollision);\r\n            }\r\n            else if (this.tryPattern[direction][3].call(this, itemCollision, gridsterItem)) {\r\n                this.pushedItemsOrder.push(itemCollision);\r\n                b.push(itemCollision);\r\n            }\r\n            else {\r\n                makePush = false;\r\n                break;\r\n            }\r\n        }\r\n        if (!makePush) {\r\n            i = this.pushedItemsOrder.lastIndexOf(b[0]);\r\n            if (i > -1) {\r\n                let /** @type {?} */ j = this.pushedItemsOrder.length - 1;\r\n                for (; j >= i; j--) {\r\n                    itemCollision = this.pushedItemsOrder[j];\r\n                    this.pushedItemsOrder.pop();\r\n                    this.removeFromTempPushed(itemCollision);\r\n                    this.removeFromPushedItem(itemCollision);\r\n                }\r\n            }\r\n        }\r\n        return makePush;\r\n    }\r\n    /**\r\n     * @param {?} gridsterItemCollide\r\n     * @param {?} gridsterItem\r\n     * @return {?}\r\n     */\r\n    trySouth(gridsterItemCollide, gridsterItem) {\r\n        if (!this.gridster.$options.pushDirections.south) {\r\n            return false;\r\n        }\r\n        this.addToTempPushed(gridsterItemCollide);\r\n        gridsterItemCollide.$item.y = gridsterItem.$item.y + gridsterItem.$item.rows;\r\n        if (this.push(gridsterItemCollide, this.fromNorth)) {\r\n            gridsterItemCollide.setSize();\r\n            this.addToPushed(gridsterItemCollide);\r\n            return true;\r\n        }\r\n        else {\r\n            this.removeFromTempPushed(gridsterItemCollide);\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * @param {?} gridsterItemCollide\r\n     * @param {?} gridsterItem\r\n     * @return {?}\r\n     */\r\n    tryNorth(gridsterItemCollide, gridsterItem) {\r\n        if (!this.gridster.$options.pushDirections.north) {\r\n            return false;\r\n        }\r\n        this.addToTempPushed(gridsterItemCollide);\r\n        gridsterItemCollide.$item.y = gridsterItem.$item.y - gridsterItemCollide.$item.rows;\r\n        if (this.push(gridsterItemCollide, this.fromSouth)) {\r\n            gridsterItemCollide.setSize();\r\n            this.addToPushed(gridsterItemCollide);\r\n            return true;\r\n        }\r\n        else {\r\n            this.removeFromTempPushed(gridsterItemCollide);\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * @param {?} gridsterItemCollide\r\n     * @param {?} gridsterItem\r\n     * @return {?}\r\n     */\r\n    tryEast(gridsterItemCollide, gridsterItem) {\r\n        if (!this.gridster.$options.pushDirections.east) {\r\n            return false;\r\n        }\r\n        this.addToTempPushed(gridsterItemCollide);\r\n        gridsterItemCollide.$item.x = gridsterItem.$item.x + gridsterItem.$item.cols;\r\n        if (this.push(gridsterItemCollide, this.fromWest)) {\r\n            gridsterItemCollide.setSize();\r\n            this.addToPushed(gridsterItemCollide);\r\n            return true;\r\n        }\r\n        else {\r\n            this.removeFromTempPushed(gridsterItemCollide);\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * @param {?} gridsterItemCollide\r\n     * @param {?} gridsterItem\r\n     * @return {?}\r\n     */\r\n    tryWest(gridsterItemCollide, gridsterItem) {\r\n        if (!this.gridster.$options.pushDirections.west) {\r\n            return false;\r\n        }\r\n        this.addToTempPushed(gridsterItemCollide);\r\n        gridsterItemCollide.$item.x = gridsterItem.$item.x - gridsterItemCollide.$item.cols;\r\n        if (this.push(gridsterItemCollide, this.fromEast)) {\r\n            gridsterItemCollide.setSize();\r\n            this.addToPushed(gridsterItemCollide);\r\n            return true;\r\n        }\r\n        else {\r\n            this.removeFromTempPushed(gridsterItemCollide);\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * @param {?} gridsterItem\r\n     * @return {?}\r\n     */\r\n    addToTempPushed(gridsterItem) {\r\n        let /** @type {?} */ i = this.pushedItemsTemp.indexOf(gridsterItem);\r\n        if (i === -1) {\r\n            i = this.pushedItemsTemp.push(gridsterItem) - 1;\r\n            this.pushedItemsTempPath[i] = [];\r\n        }\r\n        this.pushedItemsTempPath[i].push({ x: gridsterItem.$item.x, y: gridsterItem.$item.y });\r\n    }\r\n    /**\r\n     * @param {?} gridsterItem\r\n     * @return {?}\r\n     */\r\n    removeFromTempPushed(gridsterItem) {\r\n        const /** @type {?} */ i = this.pushedItemsTemp.indexOf(gridsterItem);\r\n        const /** @type {?} */ tempPosition = this.pushedItemsTempPath[i].pop();\r\n        if (!tempPosition) {\r\n            return;\r\n        }\r\n        gridsterItem.$item.x = tempPosition.x;\r\n        gridsterItem.$item.y = tempPosition.y;\r\n        gridsterItem.setSize();\r\n        if (!this.pushedItemsTempPath[i].length) {\r\n            this.pushedItemsTemp.splice(i, 1);\r\n            this.pushedItemsTempPath.splice(i, 1);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} gridsterItem\r\n     * @return {?}\r\n     */\r\n    addToPushed(gridsterItem) {\r\n        if (this.pushedItems.indexOf(gridsterItem) < 0) {\r\n            this.pushedItems.push(gridsterItem);\r\n            this.pushedItemsPath.push([{ x: gridsterItem.item.x || 0, y: gridsterItem.item.y || 0 },\r\n                { x: gridsterItem.$item.x, y: gridsterItem.$item.y }]);\r\n        }\r\n        else {\r\n            const /** @type {?} */ i = this.pushedItems.indexOf(gridsterItem);\r\n            this.pushedItemsPath[i].push({ x: gridsterItem.$item.x, y: gridsterItem.$item.y });\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} i\r\n     * @return {?}\r\n     */\r\n    removeFromPushed(i) {\r\n        if (i > -1) {\r\n            this.pushedItems.splice(i, 1);\r\n            this.pushedItemsPath.splice(i, 1);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} gridsterItem\r\n     * @return {?}\r\n     */\r\n    removeFromPushedItem(gridsterItem) {\r\n        const /** @type {?} */ i = this.pushedItems.indexOf(gridsterItem);\r\n        if (i > -1) {\r\n            this.pushedItemsPath[i].pop();\r\n            if (!this.pushedItemsPath.length) {\r\n                this.pushedItems.splice(i, 1);\r\n                this.pushedItemsPath.splice(i, 1);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} pushedItem\r\n     * @param {?} i\r\n     * @return {?}\r\n     */\r\n    checkPushedItem(pushedItem, i) {\r\n        const /** @type {?} */ path = this.pushedItemsPath[i];\r\n        let /** @type {?} */ j = path.length - 2;\r\n        let /** @type {?} */ lastPosition, /** @type {?} */ x, /** @type {?} */ y;\r\n        let /** @type {?} */ change = false;\r\n        for (; j > -1; j--) {\r\n            lastPosition = path[j];\r\n            x = pushedItem.$item.x;\r\n            y = pushedItem.$item.y;\r\n            pushedItem.$item.x = lastPosition.x;\r\n            pushedItem.$item.y = lastPosition.y;\r\n            if (!this.gridster.findItemWithItem(pushedItem.$item)) {\r\n                pushedItem.setSize();\r\n                path.splice(j + 1, path.length - j - 1);\r\n                change = true;\r\n            }\r\n            else {\r\n                pushedItem.$item.x = x;\r\n                pushedItem.$item.y = y;\r\n            }\r\n        }\r\n        if (path.length < 2) {\r\n            this.removeFromPushed(i);\r\n        }\r\n        return change;\r\n    }\r\n}\nGridsterPush.ɵfac = function GridsterPush_Factory(t) { return new (t || GridsterPush)(ɵngcc0.ɵɵinject(GridsterItemComponentInterface)); };\nGridsterPush.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: GridsterPush, factory: GridsterPush.ɵfac });\r\n/** @nocollapse */\r\nGridsterPush.ctorParameters = () => [\r\n    { type: GridsterItemComponentInterface }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridsterPush, [{\n        type: Injectable\n    }], function () { return [{ type: GridsterItemComponentInterface }]; }, null); })();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\nclass GridsterDraggable {\r\n    /**\r\n     * @param {?} gridsterItem\r\n     * @param {?} gridster\r\n     * @param {?} zone\r\n     */\r\n    constructor(gridsterItem, gridster, zone) {\r\n        this.zone = zone;\r\n        this.collision = false;\r\n        this.gridsterItem = gridsterItem;\r\n        this.gridster = gridster;\r\n        this.lastMouse = {\r\n            clientX: 0,\r\n            clientY: 0\r\n        };\r\n        this.path = [];\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    destroy() {\r\n        delete this.gridster.movingItem;\r\n        if (this.gridster.previewStyle) {\r\n            this.gridster.previewStyle(true);\r\n        }\r\n        delete this.gridsterItem;\r\n        delete this.gridster;\r\n        delete this.collision;\r\n        if (this.mousedown) {\r\n            this.mousedown();\r\n            this.touchstart();\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    dragStart(e) {\r\n        switch (e.which) {\r\n            case 1:\r\n                // left mouse button\r\n                break;\r\n            case 2:\r\n            case 3:\r\n                // right or middle mouse button\r\n                return;\r\n        }\r\n        if (this.gridster.options.draggable && this.gridster.options.draggable.start) {\r\n            this.gridster.options.draggable.start(this.gridsterItem.item, this.gridsterItem, e);\r\n        }\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        this.dragFunction = this.dragMove.bind(this);\r\n        this.dragStopFunction = this.dragStop.bind(this);\r\n        this.zone.runOutsideAngular(() => {\r\n            this.mousemove = this.gridsterItem.renderer.listen('document', 'mousemove', this.dragFunction);\r\n            this.touchmove = this.gridster.renderer.listen(this.gridster.el, 'touchmove', this.dragFunction);\r\n        });\r\n        this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStopFunction);\r\n        this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStopFunction);\r\n        this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStopFunction);\r\n        this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStopFunction);\r\n        this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-moving');\r\n        this.margin = this.gridster.$options.margin;\r\n        this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\r\n        this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\r\n        this.left = this.gridsterItem.left - this.margin;\r\n        this.top = this.gridsterItem.top - this.margin;\r\n        this.width = this.gridsterItem.width;\r\n        this.height = this.gridsterItem.height;\r\n        this.diffLeft = e.clientX + this.offsetLeft - this.margin - this.left;\r\n        this.diffTop = e.clientY + this.offsetTop - this.margin - this.top;\r\n        this.gridster.movingItem = this.gridsterItem.$item;\r\n        this.gridster.previewStyle(true);\r\n        this.push = new GridsterPush(this.gridsterItem);\r\n        this.swap = new GridsterSwap(this.gridsterItem);\r\n        this.gridster.dragInProgress = true;\r\n        this.gridster.updateGrid();\r\n        this.path.push({ x: this.gridsterItem.item.x || 0, y: this.gridsterItem.item.y || 0 });\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    dragMove(e) {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        GridsterUtils.checkTouchEvent(e);\r\n        this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\r\n        this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\r\n        scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse, this.calculateItemPositionFromMousePosition.bind(this));\r\n        this.calculateItemPositionFromMousePosition(e);\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    calculateItemPositionFromMousePosition(e) {\r\n        this.left = e.clientX + this.offsetLeft - this.diffLeft;\r\n        this.top = e.clientY + this.offsetTop - this.diffTop;\r\n        this.calculateItemPosition();\r\n        this.lastMouse.clientX = e.clientX;\r\n        this.lastMouse.clientY = e.clientY;\r\n        this.zone.run(() => {\r\n            this.gridster.updateGrid();\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    dragStop(e) {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        cancelScroll();\r\n        this.cancelOnBlur();\r\n        this.mousemove();\r\n        this.mouseup();\r\n        this.touchmove();\r\n        this.touchend();\r\n        this.touchcancel();\r\n        this.gridsterItem.renderer.removeClass(this.gridsterItem.el, 'gridster-item-moving');\r\n        this.gridster.dragInProgress = false;\r\n        this.gridster.updateGrid();\r\n        this.path = [];\r\n        if (this.gridster.options.draggable && this.gridster.options.draggable.stop) {\r\n            Promise.resolve(this.gridster.options.draggable.stop(this.gridsterItem.item, this.gridsterItem, e))\r\n                .then(this.makeDrag.bind(this), this.cancelDrag.bind(this));\r\n        }\r\n        else {\r\n            this.makeDrag();\r\n        }\r\n        setTimeout(() => {\r\n            if (this.gridster) {\r\n                this.gridster.movingItem = null;\r\n                this.gridster.previewStyle(true);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    cancelDrag() {\r\n        this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\r\n        this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\r\n        this.gridsterItem.setSize();\r\n        this.push.restoreItems();\r\n        this.swap.restoreSwapItem();\r\n        this.push.destroy();\r\n        delete this.push;\r\n        this.swap.destroy();\r\n        delete this.swap;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    makeDrag() {\r\n        if (this.gridster.$options.draggable.dropOverItems && this.gridster.options.draggable\r\n            && this.gridster.options.draggable.dropOverItemsCallback\r\n            && this.collision && this.collision !== true && this.collision.$item) {\r\n            this.gridster.options.draggable.dropOverItemsCallback(this.gridsterItem.item, this.collision.item, this.gridster);\r\n        }\r\n        this.collision = false;\r\n        this.gridsterItem.setSize();\r\n        this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\r\n        this.push.setPushedItems();\r\n        this.swap.setSwapItem();\r\n        this.push.destroy();\r\n        delete this.push;\r\n        this.swap.destroy();\r\n        delete this.swap;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    calculateItemPosition() {\r\n        this.gridster.movingItem = this.gridsterItem.$item;\r\n        this.positionX = this.gridster.pixelsToPositionX(this.left, Math.round);\r\n        this.positionY = this.gridster.pixelsToPositionY(this.top, Math.round);\r\n        this.positionXBackup = this.gridsterItem.$item.x;\r\n        this.positionYBackup = this.gridsterItem.$item.y;\r\n        this.gridsterItem.$item.x = this.positionX;\r\n        if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\r\n            this.gridsterItem.$item.x = this.positionXBackup;\r\n        }\r\n        this.gridsterItem.$item.y = this.positionY;\r\n        if (this.gridster.checkGridCollision(this.gridsterItem.$item)) {\r\n            this.gridsterItem.$item.y = this.positionYBackup;\r\n        }\r\n        const /** @type {?} */ transform = 'translate(' + this.left + 'px, ' + this.top + 'px)';\r\n        this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'transform', transform);\r\n        if (this.positionXBackup !== this.gridsterItem.$item.x || this.positionYBackup !== this.gridsterItem.$item.y) {\r\n            const /** @type {?} */ lastPosition = this.path[this.path.length - 1];\r\n            let /** @type {?} */ direction = '';\r\n            if (lastPosition.x < this.gridsterItem.$item.x) {\r\n                direction = this.push.fromWest;\r\n            }\r\n            else if (lastPosition.x > this.gridsterItem.$item.x) {\r\n                direction = this.push.fromEast;\r\n            }\r\n            else if (lastPosition.y < this.gridsterItem.$item.y) {\r\n                direction = this.push.fromNorth;\r\n            }\r\n            else if (lastPosition.y > this.gridsterItem.$item.y) {\r\n                direction = this.push.fromSouth;\r\n            }\r\n            this.push.pushItems(direction, this.gridster.$options.disablePushOnDrag);\r\n            this.swap.swapItems();\r\n            this.collision = this.gridster.checkCollision(this.gridsterItem.$item);\r\n            if (this.collision) {\r\n                this.gridsterItem.$item.x = this.positionXBackup;\r\n                this.gridsterItem.$item.y = this.positionYBackup;\r\n                if (this.gridster.$options.draggable.dropOverItems && this.collision !== true && this.collision.$item) {\r\n                    this.gridster.movingItem = null;\r\n                }\r\n            }\r\n            else {\r\n                this.path.push({ x: this.gridsterItem.$item.x, y: this.gridsterItem.$item.y });\r\n            }\r\n            this.push.checkPushBack();\r\n        }\r\n        this.gridster.previewStyle(true);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toggle() {\r\n        const /** @type {?} */ enableDrag = this.gridsterItem.canBeDragged();\r\n        if (!this.enabled && enableDrag) {\r\n            this.enabled = !this.enabled;\r\n            this.dragStartFunction = this.dragStartDelay.bind(this);\r\n            this.mousedown = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'mousedown', this.dragStartFunction);\r\n            this.touchstart = this.gridsterItem.renderer.listen(this.gridsterItem.el, 'touchstart', this.dragStartFunction);\r\n        }\r\n        else if (this.enabled && !enableDrag) {\r\n            this.enabled = !this.enabled;\r\n            this.mousedown();\r\n            this.touchstart();\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    dragStartDelay(e) {\r\n        if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('gridster-item-resizable-handler') > -1) {\r\n            return;\r\n        }\r\n        if (GridsterUtils.checkContentClassForEvent(this.gridster, e)) {\r\n            return;\r\n        }\r\n        GridsterUtils.checkTouchEvent(e);\r\n        if (!this.gridster.$options.draggable.delayStart) {\r\n            this.dragStart(e);\r\n            return;\r\n        }\r\n        const /** @type {?} */ timeout = setTimeout(() => {\r\n            this.dragStart(e);\r\n            cancelDrag();\r\n        }, this.gridster.$options.draggable.delayStart);\r\n        const /** @type {?} */ cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\r\n        const /** @type {?} */ cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\r\n        const /** @type {?} */ cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\r\n        const /** @type {?} */ cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\r\n        const /** @type {?} */ cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\r\n        /**\r\n         * @param {?} eventMove\r\n         * @return {?}\r\n         */\r\n        function cancelMove(eventMove) {\r\n            GridsterUtils.checkTouchEvent(eventMove);\r\n            if (Math.abs(eventMove.clientX - e.clientX) > 9 || Math.abs(eventMove.clientY - e.clientY) > 9) {\r\n                cancelDrag();\r\n            }\r\n        }\r\n        /**\r\n         * @return {?}\r\n         */\r\n        function cancelDrag() {\r\n            clearTimeout(timeout);\r\n            cancelOnBlur();\r\n            cancelMouse();\r\n            cancelTouchMove();\r\n            cancelTouchEnd();\r\n            cancelTouchCancel();\r\n        }\r\n    }\r\n}\nGridsterDraggable.ɵfac = function GridsterDraggable_Factory(t) { return new (t || GridsterDraggable)(ɵngcc0.ɵɵinject(GridsterItemComponentInterface), ɵngcc0.ɵɵinject(GridsterComponentInterface), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nGridsterDraggable.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: GridsterDraggable, factory: GridsterDraggable.ɵfac });\r\n/** @nocollapse */\r\nGridsterDraggable.ctorParameters = () => [\r\n    { type: GridsterItemComponentInterface },\r\n    { type: GridsterComponentInterface },\r\n    { type: NgZone }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridsterDraggable, [{\n        type: Injectable\n    }], function () { return [{ type: GridsterItemComponentInterface }, { type: GridsterComponentInterface }, { type: ɵngcc0.NgZone }]; }, null); })();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\nclass GridsterPushResize {\r\n    /**\r\n     * @param {?} gridsterItem\r\n     */\r\n    constructor(gridsterItem) {\r\n        this.pushedItems = [];\r\n        this.pushedItemsPath = [];\r\n        this.gridsterItem = gridsterItem;\r\n        this.gridster = gridsterItem.gridster;\r\n        this.tryPattern = {\r\n            fromEast: this.tryWest,\r\n            fromWest: this.tryEast,\r\n            fromNorth: this.trySouth,\r\n            fromSouth: this.tryNorth\r\n        };\r\n        this.fromSouth = 'fromSouth';\r\n        this.fromNorth = 'fromNorth';\r\n        this.fromEast = 'fromEast';\r\n        this.fromWest = 'fromWest';\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    destroy() {\r\n        delete this.gridster;\r\n        delete this.gridsterItem;\r\n    }\r\n    /**\r\n     * @param {?} direction\r\n     * @return {?}\r\n     */\r\n    pushItems(direction) {\r\n        if (this.gridster.$options.pushResizeItems) {\r\n            return this.push(this.gridsterItem, direction);\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    restoreItems() {\r\n        let /** @type {?} */ i = 0;\r\n        const /** @type {?} */ l = this.pushedItems.length;\r\n        let /** @type {?} */ pushedItem;\r\n        for (; i < l; i++) {\r\n            pushedItem = this.pushedItems[i];\r\n            pushedItem.$item.x = pushedItem.item.x || 0;\r\n            pushedItem.$item.y = pushedItem.item.y || 0;\r\n            pushedItem.$item.cols = pushedItem.item.cols || 1;\r\n            pushedItem.$item[\"row\"] = pushedItem.item[\"row\"] || 1;\r\n            pushedItem.setSize();\r\n        }\r\n        this.pushedItems = [];\r\n        this.pushedItemsPath = [];\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    setPushedItems() {\r\n        let /** @type {?} */ i = 0;\r\n        const /** @type {?} */ l = this.pushedItems.length;\r\n        let /** @type {?} */ pushedItem;\r\n        for (; i < l; i++) {\r\n            pushedItem = this.pushedItems[i];\r\n            pushedItem.checkItemChanges(pushedItem.$item, pushedItem.item);\r\n        }\r\n        this.pushedItems = [];\r\n        this.pushedItemsPath = [];\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    checkPushBack() {\r\n        let /** @type {?} */ i = this.pushedItems.length - 1;\r\n        let /** @type {?} */ change = false;\r\n        for (; i > -1; i--) {\r\n            if (this.checkPushedItem(this.pushedItems[i], i)) {\r\n                change = true;\r\n            }\r\n        }\r\n        if (change) {\r\n            this.checkPushBack();\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} gridsterItem\r\n     * @param {?} direction\r\n     * @return {?}\r\n     */\r\n    push(gridsterItem, direction) {\r\n        const /** @type {?} */ gridsterItemCollision = this.gridster.checkCollision(gridsterItem.$item);\r\n        if (gridsterItemCollision && gridsterItemCollision !== true &&\r\n            gridsterItemCollision !== this.gridsterItem && gridsterItemCollision.canBeResized()) {\r\n            if (this.tryPattern[direction].call(this, gridsterItemCollision, gridsterItem, direction)) {\r\n                return true;\r\n            }\r\n        }\r\n        else if (gridsterItemCollision === false) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * @param {?} gridsterItemCollide\r\n     * @param {?} gridsterItem\r\n     * @param {?} direction\r\n     * @return {?}\r\n     */\r\n    trySouth(gridsterItemCollide, gridsterItem, direction) {\r\n        const /** @type {?} */ backUpY = gridsterItemCollide.$item.y;\r\n        const /** @type {?} */ backUpRows = gridsterItemCollide.$item.rows;\r\n        gridsterItemCollide.$item.y = gridsterItem.$item.y + gridsterItem.$item.rows;\r\n        gridsterItemCollide.$item.rows = backUpRows + backUpY - gridsterItemCollide.$item.y;\r\n        if (!GridsterComponent.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\r\n            && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\r\n            gridsterItemCollide.setSize();\r\n            this.addToPushed(gridsterItemCollide);\r\n            this.push(gridsterItem, direction);\r\n            return true;\r\n        }\r\n        else {\r\n            gridsterItemCollide.$item.y = backUpY;\r\n            gridsterItemCollide.$item.rows = backUpRows;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * @param {?} gridsterItemCollide\r\n     * @param {?} gridsterItem\r\n     * @param {?} direction\r\n     * @return {?}\r\n     */\r\n    tryNorth(gridsterItemCollide, gridsterItem, direction) {\r\n        const /** @type {?} */ backUpRows = gridsterItemCollide.$item.rows;\r\n        gridsterItemCollide.$item.rows = gridsterItem.$item.y - gridsterItemCollide.$item.y;\r\n        if (!GridsterComponent.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\r\n            && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\r\n            gridsterItemCollide.setSize();\r\n            this.addToPushed(gridsterItemCollide);\r\n            this.push(gridsterItem, direction);\r\n            return true;\r\n        }\r\n        else {\r\n            gridsterItemCollide.$item.rows = backUpRows;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * @param {?} gridsterItemCollide\r\n     * @param {?} gridsterItem\r\n     * @param {?} direction\r\n     * @return {?}\r\n     */\r\n    tryEast(gridsterItemCollide, gridsterItem, direction) {\r\n        const /** @type {?} */ backUpX = gridsterItemCollide.$item.x;\r\n        const /** @type {?} */ backUpCols = gridsterItemCollide.$item.cols;\r\n        gridsterItemCollide.$item.x = gridsterItem.$item.x + gridsterItem.$item.cols;\r\n        gridsterItemCollide.$item.cols = backUpCols + backUpX - gridsterItemCollide.$item.x;\r\n        if (!GridsterComponent.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\r\n            && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\r\n            gridsterItemCollide.setSize();\r\n            this.addToPushed(gridsterItemCollide);\r\n            this.push(gridsterItem, direction);\r\n            return true;\r\n        }\r\n        else {\r\n            gridsterItemCollide.$item.x = backUpX;\r\n            gridsterItemCollide.$item.cols = backUpCols;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * @param {?} gridsterItemCollide\r\n     * @param {?} gridsterItem\r\n     * @param {?} direction\r\n     * @return {?}\r\n     */\r\n    tryWest(gridsterItemCollide, gridsterItem, direction) {\r\n        const /** @type {?} */ backUpCols = gridsterItemCollide.$item.cols;\r\n        gridsterItemCollide.$item.cols = gridsterItem.$item.x - gridsterItemCollide.$item.x;\r\n        if (!GridsterComponent.checkCollisionTwoItems(gridsterItemCollide.$item, gridsterItem.$item)\r\n            && !this.gridster.checkGridCollision(gridsterItemCollide.$item)) {\r\n            gridsterItemCollide.setSize();\r\n            this.addToPushed(gridsterItemCollide);\r\n            this.push(gridsterItem, direction);\r\n            return true;\r\n        }\r\n        else {\r\n            gridsterItemCollide.$item.cols = backUpCols;\r\n        }\r\n        return false;\r\n    }\r\n    /**\r\n     * @param {?} gridsterItem\r\n     * @return {?}\r\n     */\r\n    addToPushed(gridsterItem) {\r\n        if (this.pushedItems.indexOf(gridsterItem) < 0) {\r\n            this.pushedItems.push(gridsterItem);\r\n            this.pushedItemsPath.push([\r\n                {\r\n                    x: gridsterItem.item.x || 0,\r\n                    y: gridsterItem.item.y || 0,\r\n                    cols: gridsterItem.item.cols || 0,\r\n                    rows: gridsterItem.item.rows || 0\r\n                },\r\n                {\r\n                    x: gridsterItem.$item.x,\r\n                    y: gridsterItem.$item.y,\r\n                    cols: gridsterItem.$item.cols,\r\n                    rows: gridsterItem.$item.rows\r\n                }\r\n            ]);\r\n        }\r\n        else {\r\n            const /** @type {?} */ i = this.pushedItems.indexOf(gridsterItem);\r\n            this.pushedItemsPath[i].push({\r\n                x: gridsterItem.$item.x,\r\n                y: gridsterItem.$item.y,\r\n                cols: gridsterItem.$item.cols,\r\n                rows: gridsterItem.$item.rows\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} i\r\n     * @return {?}\r\n     */\r\n    removeFromPushed(i) {\r\n        if (i > -1) {\r\n            this.pushedItems.splice(i, 1);\r\n            this.pushedItemsPath.splice(i, 1);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} pushedItem\r\n     * @param {?} i\r\n     * @return {?}\r\n     */\r\n    checkPushedItem(pushedItem, i) {\r\n        const /** @type {?} */ path = this.pushedItemsPath[i];\r\n        let /** @type {?} */ j = path.length - 2;\r\n        let /** @type {?} */ lastPosition, /** @type {?} */ x, /** @type {?} */ y, /** @type {?} */ cols, /** @type {?} */ rows;\r\n        for (; j > -1; j--) {\r\n            lastPosition = path[j];\r\n            x = pushedItem.$item.x;\r\n            y = pushedItem.$item.y;\r\n            cols = pushedItem.$item.cols;\r\n            rows = pushedItem.$item.rows;\r\n            pushedItem.$item.x = lastPosition.x;\r\n            pushedItem.$item.y = lastPosition.y;\r\n            pushedItem.$item.cols = lastPosition.cols;\r\n            pushedItem.$item.rows = lastPosition.rows;\r\n            if (!this.gridster.findItemWithItem(pushedItem.$item)) {\r\n                pushedItem.setSize();\r\n                path.splice(j + 1, path.length - 1 - j);\r\n            }\r\n            else {\r\n                pushedItem.$item.x = x;\r\n                pushedItem.$item.y = y;\r\n                pushedItem.$item.cols = cols;\r\n                pushedItem.$item.rows = rows;\r\n            }\r\n        }\r\n        if (path.length < 2) {\r\n            this.removeFromPushed(i);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n}\nGridsterPushResize.ɵfac = function GridsterPushResize_Factory(t) { return new (t || GridsterPushResize)(ɵngcc0.ɵɵinject(GridsterItemComponentInterface)); };\nGridsterPushResize.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: GridsterPushResize, factory: GridsterPushResize.ɵfac });\r\n/** @nocollapse */\r\nGridsterPushResize.ctorParameters = () => [\r\n    { type: GridsterItemComponentInterface }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridsterPushResize, [{\n        type: Injectable\n    }], function () { return [{ type: GridsterItemComponentInterface }]; }, null); })();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\nclass GridsterResizable {\r\n    /**\r\n     * @param {?} gridsterItem\r\n     * @param {?} gridster\r\n     * @param {?} zone\r\n     */\r\n    constructor(gridsterItem, gridster, zone) {\r\n        this.zone = zone;\r\n        this.gridsterItem = gridsterItem;\r\n        this.gridster = gridster;\r\n        this.lastMouse = {\r\n            clientX: 0,\r\n            clientY: 0\r\n        };\r\n        this.itemBackup = [0, 0, 0, 0];\r\n        this.resizeEventScrollType = { w: false, e: false, n: false, s: false };\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    destroy() {\r\n        delete this.gridster.movingItem;\r\n        if (this.gridster.previewStyle) {\r\n            this.gridster.previewStyle();\r\n        }\r\n        delete this.gridsterItem;\r\n        delete this.gridster;\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    dragStart(e) {\r\n        switch (e.which) {\r\n            case 1:\r\n                // left mouse button\r\n                break;\r\n            case 2:\r\n            case 3:\r\n                // right or middle mouse button\r\n                return;\r\n        }\r\n        if (this.gridster.options.resizable && this.gridster.options.resizable.start) {\r\n            this.gridster.options.resizable.start(this.gridsterItem.item, this.gridsterItem, e);\r\n        }\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        this.dragFunction = this.dragMove.bind(this);\r\n        this.dragStopFunction = this.dragStop.bind(this);\r\n        this.zone.runOutsideAngular(() => {\r\n            this.mousemove = this.gridsterItem.renderer.listen('document', 'mousemove', this.dragFunction);\r\n            this.touchmove = this.gridster.renderer.listen(this.gridster.el, 'touchmove', this.dragFunction);\r\n        });\r\n        this.mouseup = this.gridsterItem.renderer.listen('document', 'mouseup', this.dragStopFunction);\r\n        this.cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', this.dragStopFunction);\r\n        this.touchend = this.gridsterItem.renderer.listen('document', 'touchend', this.dragStopFunction);\r\n        this.touchcancel = this.gridsterItem.renderer.listen('document', 'touchcancel', this.dragStopFunction);\r\n        this.gridsterItem.renderer.addClass(this.gridsterItem.el, 'gridster-item-resizing');\r\n        this.lastMouse.clientX = e.clientX;\r\n        this.lastMouse.clientY = e.clientY;\r\n        this.left = this.gridsterItem.left;\r\n        this.top = this.gridsterItem.top;\r\n        this.width = this.gridsterItem.width;\r\n        this.height = this.gridsterItem.height;\r\n        this.bottom = this.gridsterItem.top + this.gridsterItem.height;\r\n        this.right = this.gridsterItem.left + this.gridsterItem.width;\r\n        this.margin = this.gridster.$options.margin;\r\n        this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\r\n        this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\r\n        this.diffLeft = e.clientX + this.offsetLeft - this.left;\r\n        this.diffRight = e.clientX + this.offsetLeft - this.right;\r\n        this.diffTop = e.clientY + this.offsetTop - this.top;\r\n        this.diffBottom = e.clientY + this.offsetTop - this.bottom;\r\n        this.minHeight = this.gridster.positionYToPixels(this.gridsterItem.$item.minItemRows || this.gridster.$options.minItemRows)\r\n            - this.margin;\r\n        this.minWidth = this.gridster.positionXToPixels(this.gridsterItem.$item.minItemCols || this.gridster.$options.minItemCols)\r\n            - this.margin;\r\n        this.gridster.movingItem = this.gridsterItem.$item;\r\n        this.gridster.previewStyle();\r\n        this.push = new GridsterPush(this.gridsterItem);\r\n        this.pushResize = new GridsterPushResize(this.gridsterItem);\r\n        this.gridster.dragInProgress = true;\r\n        this.gridster.updateGrid();\r\n        if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-n') > -1) {\r\n            this.resizeEventScrollType.n = true;\r\n            this.directionFunction = this.handleN;\r\n        }\r\n        else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-w') > -1) {\r\n            this.resizeEventScrollType.w = true;\r\n            this.directionFunction = this.handleW;\r\n        }\r\n        else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-s') > -1) {\r\n            this.resizeEventScrollType.s = true;\r\n            this.directionFunction = this.handleS;\r\n        }\r\n        else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-e') > -1) {\r\n            this.resizeEventScrollType.e = true;\r\n            this.directionFunction = this.handleE;\r\n        }\r\n        else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-nw') > -1) {\r\n            this.resizeEventScrollType.n = true;\r\n            this.resizeEventScrollType.w = true;\r\n            this.directionFunction = this.handleNW;\r\n        }\r\n        else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-ne') > -1) {\r\n            this.resizeEventScrollType.n = true;\r\n            this.resizeEventScrollType.e = true;\r\n            this.directionFunction = this.handleNE;\r\n        }\r\n        else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-sw') > -1) {\r\n            this.resizeEventScrollType.s = true;\r\n            this.resizeEventScrollType.w = true;\r\n            this.directionFunction = this.handleSW;\r\n        }\r\n        else if (e.target.hasAttribute('class') && e.target.getAttribute('class').split(' ').indexOf('handle-se') > -1) {\r\n            this.resizeEventScrollType.s = true;\r\n            this.resizeEventScrollType.e = true;\r\n            this.directionFunction = this.handleSE;\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    dragMove(e) {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        GridsterUtils.checkTouchEvent(e);\r\n        this.offsetTop = this.gridster.el.scrollTop - this.gridster.el.offsetTop;\r\n        this.offsetLeft = this.gridster.el.scrollLeft - this.gridster.el.offsetLeft;\r\n        scroll(this.gridster, this.left, this.top, this.width, this.height, e, this.lastMouse, this.directionFunction.bind(this), true, this.resizeEventScrollType);\r\n        this.directionFunction(e);\r\n        this.lastMouse.clientX = e.clientX;\r\n        this.lastMouse.clientY = e.clientY;\r\n        this.zone.run(() => {\r\n            this.gridster.updateGrid();\r\n        });\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    dragStop(e) {\r\n        e.stopPropagation();\r\n        e.preventDefault();\r\n        cancelScroll();\r\n        this.mousemove();\r\n        this.mouseup();\r\n        this.cancelOnBlur();\r\n        this.touchmove();\r\n        this.touchend();\r\n        this.touchcancel();\r\n        this.gridster.dragInProgress = false;\r\n        this.gridster.updateGrid();\r\n        if (this.gridster.options.resizable && this.gridster.options.resizable.stop) {\r\n            Promise.resolve(this.gridster.options.resizable.stop(this.gridsterItem.item, this.gridsterItem, e))\r\n                .then(this.makeResize.bind(this), this.cancelResize.bind(this));\r\n        }\r\n        else {\r\n            this.makeResize();\r\n        }\r\n        setTimeout(() => {\r\n            this.gridsterItem.renderer.removeClass(this.gridsterItem.el, 'gridster-item-resizing');\r\n            if (this.gridster) {\r\n                this.gridster.movingItem = null;\r\n                this.gridster.previewStyle();\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    cancelResize() {\r\n        this.gridsterItem.$item.cols = this.gridsterItem.item.cols || 1;\r\n        this.gridsterItem.$item.rows = this.gridsterItem.item.rows || 1;\r\n        this.gridsterItem.$item.x = this.gridsterItem.item.x || 0;\r\n        this.gridsterItem.$item.y = this.gridsterItem.item.y || 0;\r\n        this.gridsterItem.setSize();\r\n        this.push.restoreItems();\r\n        this.pushResize.restoreItems();\r\n        this.push.destroy();\r\n        delete this.push;\r\n        this.pushResize.destroy();\r\n        delete this.pushResize;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    makeResize() {\r\n        this.gridsterItem.setSize();\r\n        this.gridsterItem.checkItemChanges(this.gridsterItem.$item, this.gridsterItem.item);\r\n        this.push.setPushedItems();\r\n        this.pushResize.setPushedItems();\r\n        this.push.destroy();\r\n        delete this.push;\r\n        this.pushResize.destroy();\r\n        delete this.pushResize;\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    handleN(e) {\r\n        this.top = e.clientY + this.offsetTop - this.diffTop;\r\n        this.height = this.bottom - this.top;\r\n        if (this.minHeight > this.height) {\r\n            this.height = this.minHeight;\r\n            this.top = this.bottom - this.minHeight;\r\n        }\r\n        this.newPosition = this.gridster.pixelsToPositionY(this.top + this.margin, Math.floor);\r\n        if (this.gridsterItem.$item.y !== this.newPosition) {\r\n            this.itemBackup[1] = this.gridsterItem.$item.y;\r\n            this.itemBackup[3] = this.gridsterItem.$item.rows;\r\n            this.gridsterItem.$item.rows += this.gridsterItem.$item.y - this.newPosition;\r\n            this.gridsterItem.$item.y = this.newPosition;\r\n            this.pushResize.pushItems(this.pushResize.fromSouth);\r\n            this.push.pushItems(this.push.fromSouth, this.gridster.$options.disablePushOnResize);\r\n            if (this.gridster.checkCollision(this.gridsterItem.$item)) {\r\n                this.gridsterItem.$item.y = this.itemBackup[1];\r\n                this.gridsterItem.$item.rows = this.itemBackup[3];\r\n                this.setItemTop(this.gridster.positionYToPixels(this.gridsterItem.$item.y));\r\n                this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) - this.margin);\r\n                return;\r\n            }\r\n            else {\r\n                this.gridster.previewStyle();\r\n            }\r\n            this.pushResize.checkPushBack();\r\n            this.push.checkPushBack();\r\n        }\r\n        this.setItemTop(this.top);\r\n        this.setItemHeight(this.height);\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    handleW(e) {\r\n        this.left = e.clientX + this.offsetLeft - this.diffLeft;\r\n        this.width = this.right - this.left;\r\n        if (this.minWidth > this.width) {\r\n            this.width = this.minWidth;\r\n            this.left = this.right - this.minWidth;\r\n        }\r\n        this.newPosition = this.gridster.pixelsToPositionX(this.left + this.margin, Math.floor);\r\n        if (this.gridsterItem.$item.x !== this.newPosition) {\r\n            this.itemBackup[0] = this.gridsterItem.$item.x;\r\n            this.itemBackup[2] = this.gridsterItem.$item.cols;\r\n            this.gridsterItem.$item.cols += this.gridsterItem.$item.x - this.newPosition;\r\n            this.gridsterItem.$item.x = this.newPosition;\r\n            this.pushResize.pushItems(this.pushResize.fromEast);\r\n            this.push.pushItems(this.push.fromEast, this.gridster.$options.disablePushOnResize);\r\n            if (this.gridster.checkCollision(this.gridsterItem.$item)) {\r\n                this.gridsterItem.$item.x = this.itemBackup[0];\r\n                this.gridsterItem.$item.cols = this.itemBackup[2];\r\n                this.setItemLeft(this.gridster.positionXToPixels(this.gridsterItem.$item.x));\r\n                this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) - this.margin);\r\n                return;\r\n            }\r\n            else {\r\n                this.gridster.previewStyle();\r\n            }\r\n            this.pushResize.checkPushBack();\r\n            this.push.checkPushBack();\r\n        }\r\n        this.setItemLeft(this.left);\r\n        this.setItemWidth(this.width);\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    handleS(e) {\r\n        this.height = e.clientY + this.offsetTop - this.diffBottom - this.top;\r\n        if (this.minHeight > this.height) {\r\n            this.height = this.minHeight;\r\n        }\r\n        this.bottom = this.top + this.height;\r\n        this.newPosition = this.gridster.pixelsToPositionY(this.bottom, Math.ceil);\r\n        if ((this.gridsterItem.$item.y + this.gridsterItem.$item.rows) !== this.newPosition) {\r\n            this.itemBackup[3] = this.gridsterItem.$item.rows;\r\n            this.gridsterItem.$item.rows = this.newPosition - this.gridsterItem.$item.y;\r\n            this.pushResize.pushItems(this.pushResize.fromNorth);\r\n            this.push.pushItems(this.push.fromNorth, this.gridster.$options.disablePushOnResize);\r\n            if (this.gridster.checkCollision(this.gridsterItem.$item)) {\r\n                this.gridsterItem.$item.rows = this.itemBackup[3];\r\n                this.setItemHeight(this.gridster.positionYToPixels(this.gridsterItem.$item.rows) - this.margin);\r\n                return;\r\n            }\r\n            else {\r\n                this.gridster.previewStyle();\r\n            }\r\n            this.pushResize.checkPushBack();\r\n            this.push.checkPushBack();\r\n        }\r\n        this.setItemHeight(this.height);\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    handleE(e) {\r\n        this.width = e.clientX + this.offsetLeft - this.diffRight - this.left;\r\n        if (this.minWidth > this.width) {\r\n            this.width = this.minWidth;\r\n        }\r\n        this.right = this.left + this.width;\r\n        this.newPosition = this.gridster.pixelsToPositionX(this.right, Math.ceil);\r\n        if ((this.gridsterItem.$item.x + this.gridsterItem.$item.cols) !== this.newPosition) {\r\n            this.itemBackup[2] = this.gridsterItem.$item.cols;\r\n            this.gridsterItem.$item.cols = this.newPosition - this.gridsterItem.$item.x;\r\n            this.pushResize.pushItems(this.pushResize.fromWest);\r\n            this.push.pushItems(this.push.fromWest, this.gridster.$options.disablePushOnResize);\r\n            if (this.gridster.checkCollision(this.gridsterItem.$item)) {\r\n                this.gridsterItem.$item.cols = this.itemBackup[2];\r\n                this.setItemWidth(this.gridster.positionXToPixels(this.gridsterItem.$item.cols) - this.margin);\r\n                return;\r\n            }\r\n            else {\r\n                this.gridster.previewStyle();\r\n            }\r\n            this.pushResize.checkPushBack();\r\n            this.push.checkPushBack();\r\n        }\r\n        this.setItemWidth(this.width);\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    handleNW(e) {\r\n        this.handleN(e);\r\n        this.handleW(e);\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    handleNE(e) {\r\n        this.handleN(e);\r\n        this.handleE(e);\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    handleSW(e) {\r\n        this.handleS(e);\r\n        this.handleW(e);\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    handleSE(e) {\r\n        this.handleS(e);\r\n        this.handleE(e);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    toggle() {\r\n        this.resizeEnabled = this.gridsterItem.canBeResized();\r\n    }\r\n    /**\r\n     * @param {?} e\r\n     * @return {?}\r\n     */\r\n    dragStartDelay(e) {\r\n        GridsterUtils.checkTouchEvent(e);\r\n        if (!this.gridster.$options.resizable.delayStart) {\r\n            this.dragStart(e);\r\n            return;\r\n        }\r\n        const /** @type {?} */ timeout = setTimeout(() => {\r\n            this.dragStart(e);\r\n            cancelDrag();\r\n        }, this.gridster.$options.resizable.delayStart);\r\n        const /** @type {?} */ cancelMouse = this.gridsterItem.renderer.listen('document', 'mouseup', cancelDrag);\r\n        const /** @type {?} */ cancelOnBlur = this.gridsterItem.renderer.listen('window', 'blur', cancelDrag);\r\n        const /** @type {?} */ cancelTouchMove = this.gridsterItem.renderer.listen('document', 'touchmove', cancelMove);\r\n        const /** @type {?} */ cancelTouchEnd = this.gridsterItem.renderer.listen('document', 'touchend', cancelDrag);\r\n        const /** @type {?} */ cancelTouchCancel = this.gridsterItem.renderer.listen('document', 'touchcancel', cancelDrag);\r\n        /**\r\n         * @param {?} eventMove\r\n         * @return {?}\r\n         */\r\n        function cancelMove(eventMove) {\r\n            GridsterUtils.checkTouchEvent(eventMove);\r\n            if (Math.abs(eventMove.clientX - e.clientX) > 9 || Math.abs(eventMove.clientY - e.clientY) > 9) {\r\n                cancelDrag();\r\n            }\r\n        }\r\n        /**\r\n         * @return {?}\r\n         */\r\n        function cancelDrag() {\r\n            clearTimeout(timeout);\r\n            cancelOnBlur();\r\n            cancelMouse();\r\n            cancelTouchMove();\r\n            cancelTouchEnd();\r\n            cancelTouchCancel();\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} top\r\n     * @return {?}\r\n     */\r\n    setItemTop(top) {\r\n        const /** @type {?} */ transform = 'translate(' + this.left + 'px, ' + top + 'px)';\r\n        this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'transform', transform);\r\n    }\r\n    /**\r\n     * @param {?} left\r\n     * @return {?}\r\n     */\r\n    setItemLeft(left) {\r\n        const /** @type {?} */ transform = 'translate(' + left + 'px, ' + this.top + 'px)';\r\n        this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'transform', transform);\r\n    }\r\n    /**\r\n     * @param {?} height\r\n     * @return {?}\r\n     */\r\n    setItemHeight(height) {\r\n        this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'height', height + 'px');\r\n    }\r\n    /**\r\n     * @param {?} width\r\n     * @return {?}\r\n     */\r\n    setItemWidth(width) {\r\n        this.gridsterItem.renderer.setStyle(this.gridsterItem.el, 'width', width + 'px');\r\n    }\r\n}\nGridsterResizable.ɵfac = function GridsterResizable_Factory(t) { return new (t || GridsterResizable)(ɵngcc0.ɵɵinject(GridsterItemComponentInterface), ɵngcc0.ɵɵinject(GridsterComponentInterface), ɵngcc0.ɵɵinject(ɵngcc0.NgZone)); };\nGridsterResizable.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: GridsterResizable, factory: GridsterResizable.ɵfac });\r\n/** @nocollapse */\r\nGridsterResizable.ctorParameters = () => [\r\n    { type: GridsterItemComponentInterface },\r\n    { type: GridsterComponentInterface },\r\n    { type: NgZone }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridsterResizable, [{\n        type: Injectable\n    }], function () { return [{ type: GridsterItemComponentInterface }, { type: GridsterComponentInterface }, { type: ɵngcc0.NgZone }]; }, null); })();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\nclass GridsterItemComponent {\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} gridster\r\n     * @param {?} renderer\r\n     * @param {?} zone\r\n     */\r\n    constructor(el, gridster, renderer, zone) {\r\n        this.renderer = renderer;\r\n        this.zone = zone;\r\n        this.el = el.nativeElement;\r\n        this.$item = {\r\n            cols: -1,\r\n            rows: -1,\r\n            x: -1,\r\n            y: -1,\r\n        };\r\n        this.gridster = gridster;\r\n        this.drag = new GridsterDraggable(this, gridster, this.zone);\r\n        this.resize = new GridsterResizable(this, gridster, this.zone);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnInit() {\r\n        this.updateOptions();\r\n        this.gridster.addItem(this);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    updateOptions() {\r\n        this.$item = GridsterUtils.merge(this.$item, this.item, {\r\n            cols: undefined,\r\n            rows: undefined,\r\n            x: undefined,\r\n            y: undefined,\r\n            dragEnabled: undefined,\r\n            resizeEnabled: undefined,\r\n            compactEnabled: undefined,\r\n            maxItemRows: undefined,\r\n            minItemRows: undefined,\r\n            maxItemCols: undefined,\r\n            minItemCols: undefined,\r\n            maxItemArea: undefined,\r\n            minItemArea: undefined,\r\n        });\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        this.gridster.removeItem(this);\r\n        delete this.gridster;\r\n        this.drag.destroy();\r\n        delete this.drag;\r\n        this.resize.destroy();\r\n        delete this.resize;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    setSize() {\r\n        this.renderer.setStyle(this.el, 'display', this.notPlaced ? '' : 'block');\r\n        this.gridster.gridRenderer.updateItem(this.el, this.$item, this.renderer);\r\n        this.updateItemSize();\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    updateItemSize() {\r\n        const /** @type {?} */ top = this.$item.y * this.gridster.curRowHeight;\r\n        const /** @type {?} */ left = this.$item.x * this.gridster.curColWidth;\r\n        const /** @type {?} */ width = this.$item.cols * this.gridster.curColWidth - this.gridster.$options.margin;\r\n        const /** @type {?} */ height = this.$item.rows * this.gridster.curRowHeight - this.gridster.$options.margin;\r\n        if (!this.init && width > 0 && height > 0) {\r\n            this.init = true;\r\n            if (this.item.initCallback) {\r\n                this.item.initCallback(this.item, this);\r\n            }\r\n            if (this.gridster.options.itemInitCallback) {\r\n                this.gridster.options.itemInitCallback(this.item, this);\r\n            }\r\n            if (this.gridster.$options.scrollToNewItems) {\r\n                this.el.scrollIntoView(false);\r\n            }\r\n        }\r\n        if (width !== this.width || height !== this.height) {\r\n            this.width = width;\r\n            this.height = height;\r\n            if (this.gridster.options.itemResizeCallback) {\r\n                this.gridster.options.itemResizeCallback(this.item, this);\r\n            }\r\n        }\r\n        this.top = top;\r\n        this.left = left;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    itemChanged() {\r\n        if (this.gridster.options.itemChangeCallback) {\r\n            this.gridster.options.itemChangeCallback(this.item, this);\r\n        }\r\n    }\r\n    /**\r\n     * @param {?} newValue\r\n     * @param {?} oldValue\r\n     * @return {?}\r\n     */\r\n    checkItemChanges(newValue, oldValue) {\r\n        if (newValue.rows === oldValue.rows && newValue.cols === oldValue.cols && newValue.x === oldValue.x && newValue.y === oldValue.y) {\r\n            return;\r\n        }\r\n        if (this.gridster.checkCollision(this.$item)) {\r\n            this.$item.x = oldValue.x || 0;\r\n            this.$item.y = oldValue.y || 0;\r\n            this.$item.cols = oldValue.cols || 1;\r\n            this.$item.rows = oldValue.rows || 1;\r\n            this.setSize();\r\n        }\r\n        else {\r\n            this.item.cols = this.$item.cols;\r\n            this.item.rows = this.$item.rows;\r\n            this.item.x = this.$item.x;\r\n            this.item.y = this.$item.y;\r\n            this.gridster.calculateLayoutDebounce();\r\n            this.itemChanged();\r\n        }\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    canBeDragged() {\r\n        return !this.gridster.mobile &&\r\n            (this.$item.dragEnabled === undefined ? this.gridster.$options.draggable.enabled : this.$item.dragEnabled);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    canBeResized() {\r\n        return !this.gridster.mobile &&\r\n            (this.$item.resizeEnabled === undefined ? this.gridster.$options.resizable.enabled : this.$item.resizeEnabled);\r\n    }\r\n}\nGridsterItemComponent.ɵfac = function GridsterItemComponent_Factory(t) { return new (t || GridsterItemComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(GridsterComponent, 1), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nGridsterItemComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: GridsterItemComponent, selectors: [[\"gridster-item\"]], inputs: { item: \"item\" }, ngContentSelectors: _c0, decls: 9, vars: 8, consts: [[1, \"gridster-item-resizable-handler\", \"handle-s\", 3, \"hidden\", \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-e\", 3, \"hidden\", \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-n\", 3, \"hidden\", \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-w\", 3, \"hidden\", \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-se\", 3, \"hidden\", \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-ne\", 3, \"hidden\", \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-sw\", 3, \"hidden\", \"mousedown\", \"touchstart\"], [1, \"gridster-item-resizable-handler\", \"handle-nw\", 3, \"hidden\", \"mousedown\", \"touchstart\"]], template: function GridsterItemComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0);\n        ɵngcc0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_Template_div_mousedown_1_listener($event) { return ctx.resize.dragStartDelay($event); })(\"touchstart\", function GridsterItemComponent_Template_div_touchstart_1_listener($event) { return ctx.resize.dragStartDelay($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(2, \"div\", 1);\n        ɵngcc0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_Template_div_mousedown_2_listener($event) { return ctx.resize.dragStartDelay($event); })(\"touchstart\", function GridsterItemComponent_Template_div_touchstart_2_listener($event) { return ctx.resize.dragStartDelay($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_Template_div_mousedown_3_listener($event) { return ctx.resize.dragStartDelay($event); })(\"touchstart\", function GridsterItemComponent_Template_div_touchstart_3_listener($event) { return ctx.resize.dragStartDelay($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(4, \"div\", 3);\n        ɵngcc0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_Template_div_mousedown_4_listener($event) { return ctx.resize.dragStartDelay($event); })(\"touchstart\", function GridsterItemComponent_Template_div_touchstart_4_listener($event) { return ctx.resize.dragStartDelay($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(5, \"div\", 4);\n        ɵngcc0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_Template_div_mousedown_5_listener($event) { return ctx.resize.dragStartDelay($event); })(\"touchstart\", function GridsterItemComponent_Template_div_touchstart_5_listener($event) { return ctx.resize.dragStartDelay($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(6, \"div\", 5);\n        ɵngcc0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_Template_div_mousedown_6_listener($event) { return ctx.resize.dragStartDelay($event); })(\"touchstart\", function GridsterItemComponent_Template_div_touchstart_6_listener($event) { return ctx.resize.dragStartDelay($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(7, \"div\", 6);\n        ɵngcc0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_Template_div_mousedown_7_listener($event) { return ctx.resize.dragStartDelay($event); })(\"touchstart\", function GridsterItemComponent_Template_div_touchstart_7_listener($event) { return ctx.resize.dragStartDelay($event); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(8, \"div\", 7);\n        ɵngcc0.ɵɵlistener(\"mousedown\", function GridsterItemComponent_Template_div_mousedown_8_listener($event) { return ctx.resize.dragStartDelay($event); })(\"touchstart\", function GridsterItemComponent_Template_div_touchstart_8_listener($event) { return ctx.resize.dragStartDelay($event); });\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"hidden\", !ctx.gridster.$options.resizable.handles.s || !ctx.resize.resizeEnabled);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"hidden\", !ctx.gridster.$options.resizable.handles.e || !ctx.resize.resizeEnabled);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"hidden\", !ctx.gridster.$options.resizable.handles.n || !ctx.resize.resizeEnabled);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"hidden\", !ctx.gridster.$options.resizable.handles.w || !ctx.resize.resizeEnabled);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"hidden\", !ctx.gridster.$options.resizable.handles.se || !ctx.resize.resizeEnabled);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"hidden\", !ctx.gridster.$options.resizable.handles.ne || !ctx.resize.resizeEnabled);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"hidden\", !ctx.gridster.$options.resizable.handles.sw || !ctx.resize.resizeEnabled);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"hidden\", !ctx.gridster.$options.resizable.handles.nw || !ctx.resize.resizeEnabled);\n    } }, styles: [\"gridster-item{box-sizing:border-box;z-index:1;position:absolute;overflow:hidden;transition:.3s;display:none;background:#fff;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text}gridster-item.gridster-item-moving{cursor:move}gridster-item.gridster-item-moving,gridster-item.gridster-item-resizing{transition:0s;z-index:2;box-shadow:0 0 5px 5px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12)}.gridster-item-resizable-handler{position:absolute;z-index:2}.gridster-item-resizable-handler.handle-n{cursor:n-resize;height:10px;right:0;top:0;left:0}.gridster-item-resizable-handler.handle-e{cursor:e-resize;width:10px;bottom:0;right:0;top:0}.gridster-item-resizable-handler.handle-s{cursor:s-resize;height:10px;right:0;bottom:0;left:0}.gridster-item-resizable-handler.handle-w{cursor:w-resize;width:10px;left:0;top:0;bottom:0}.gridster-item-resizable-handler.handle-ne{cursor:ne-resize;width:10px;height:10px;right:0;top:0}.gridster-item-resizable-handler.handle-nw{cursor:nw-resize;width:10px;height:10px;left:0;top:0}.gridster-item-resizable-handler.handle-se{cursor:se-resize;width:0;height:0;right:0;bottom:0;border-style:solid;border-width:0 0 10px 10px;border-color:transparent}.gridster-item-resizable-handler.handle-sw{cursor:sw-resize;width:10px;height:10px;left:0;bottom:0}gridster-item:hover .gridster-item-resizable-handler.handle-se{border-color:transparent transparent #ccc}\"], encapsulation: 2 });\r\n/** @nocollapse */\r\nGridsterItemComponent.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: GridsterComponent, decorators: [{ type: Host }] },\r\n    { type: Renderer2 },\r\n    { type: NgZone }\r\n];\r\nGridsterItemComponent.propDecorators = {\r\n    item: [{ type: Input }]\r\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridsterItemComponent, [{\n        type: Component,\n        args: [{\n                selector: 'gridster-item',\n                template: `<ng-content></ng-content>\n<div (mousedown)=\"resize.dragStartDelay($event)\" (touchstart)=\"resize.dragStartDelay($event)\"\n     [hidden]=\"!gridster.$options.resizable.handles.s || !resize.resizeEnabled\"\n     class=\"gridster-item-resizable-handler handle-s\"></div>\n<div (mousedown)=\"resize.dragStartDelay($event)\" (touchstart)=\"resize.dragStartDelay($event)\"\n     [hidden]=\"!gridster.$options.resizable.handles.e || !resize.resizeEnabled\"\n     class=\"gridster-item-resizable-handler handle-e\"></div>\n<div (mousedown)=\"resize.dragStartDelay($event)\" (touchstart)=\"resize.dragStartDelay($event)\"\n     [hidden]=\"!gridster.$options.resizable.handles.n || !resize.resizeEnabled\"\n     class=\"gridster-item-resizable-handler handle-n\"></div>\n<div (mousedown)=\"resize.dragStartDelay($event)\" (touchstart)=\"resize.dragStartDelay($event)\"\n     [hidden]=\"!gridster.$options.resizable.handles.w || !resize.resizeEnabled\"\n     class=\"gridster-item-resizable-handler handle-w\"></div>\n<div (mousedown)=\"resize.dragStartDelay($event)\" (touchstart)=\"resize.dragStartDelay($event)\"\n     [hidden]=\"!gridster.$options.resizable.handles.se || !resize.resizeEnabled\"\n     class=\"gridster-item-resizable-handler handle-se\"></div>\n<div (mousedown)=\"resize.dragStartDelay($event)\" (touchstart)=\"resize.dragStartDelay($event)\"\n     [hidden]=\"!gridster.$options.resizable.handles.ne || !resize.resizeEnabled\"\n     class=\"gridster-item-resizable-handler handle-ne\"></div>\n<div (mousedown)=\"resize.dragStartDelay($event)\" (touchstart)=\"resize.dragStartDelay($event)\"\n     [hidden]=\"!gridster.$options.resizable.handles.sw || !resize.resizeEnabled\"\n     class=\"gridster-item-resizable-handler handle-sw\"></div>\n<div (mousedown)=\"resize.dragStartDelay($event)\" (touchstart)=\"resize.dragStartDelay($event)\"\n     [hidden]=\"!gridster.$options.resizable.handles.nw || !resize.resizeEnabled\"\n     class=\"gridster-item-resizable-handler handle-nw\"></div>\n`,\n                styles: [`gridster-item{box-sizing:border-box;z-index:1;position:absolute;overflow:hidden;transition:.3s;display:none;background:#fff;-webkit-user-select:text;-moz-user-select:text;-ms-user-select:text;user-select:text}gridster-item.gridster-item-moving{cursor:move}gridster-item.gridster-item-moving,gridster-item.gridster-item-resizing{transition:0s;z-index:2;box-shadow:0 0 5px 5px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12)}.gridster-item-resizable-handler{position:absolute;z-index:2}.gridster-item-resizable-handler.handle-n{cursor:n-resize;height:10px;right:0;top:0;left:0}.gridster-item-resizable-handler.handle-e{cursor:e-resize;width:10px;bottom:0;right:0;top:0}.gridster-item-resizable-handler.handle-s{cursor:s-resize;height:10px;right:0;bottom:0;left:0}.gridster-item-resizable-handler.handle-w{cursor:w-resize;width:10px;left:0;top:0;bottom:0}.gridster-item-resizable-handler.handle-ne{cursor:ne-resize;width:10px;height:10px;right:0;top:0}.gridster-item-resizable-handler.handle-nw{cursor:nw-resize;width:10px;height:10px;left:0;top:0}.gridster-item-resizable-handler.handle-se{cursor:se-resize;width:0;height:0;right:0;bottom:0;border-style:solid;border-width:0 0 10px 10px;border-color:transparent}.gridster-item-resizable-handler.handle-sw{cursor:sw-resize;width:10px;height:10px;left:0;bottom:0}gridster-item:hover .gridster-item-resizable-handler.handle-se{border-color:transparent transparent #ccc}`],\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: GridsterComponent, decorators: [{\n                type: Host\n            }] }, { type: ɵngcc0.Renderer2 }, { type: ɵngcc0.NgZone }]; }, { item: [{\n            type: Input\n        }] }); })();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\nclass GridsterPreviewComponent {\r\n    /**\r\n     * @param {?} el\r\n     * @param {?} gridster\r\n     * @param {?} renderer\r\n     */\r\n    constructor(el, gridster, renderer) {\r\n        this.renderer = renderer;\r\n        this.el = el.nativeElement;\r\n        this.gridster = gridster;\r\n        this.gridster.previewStyle = this.previewStyle.bind(this);\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    ngOnDestroy() {\r\n        delete this.el;\r\n        delete this.gridster.previewStyle;\r\n        delete this.gridster;\r\n    }\r\n    /**\r\n     * @param {?=} drag\r\n     * @return {?}\r\n     */\r\n    previewStyle(drag) {\r\n        if (!this.gridster.movingItem) {\r\n            this.renderer.setStyle(this.el, 'display', '');\r\n        }\r\n        else {\r\n            if (this.gridster.compact && drag) {\r\n                this.gridster.compact.checkCompactItem(this.gridster.movingItem);\r\n            }\r\n            this.renderer.setStyle(this.el, 'display', 'block');\r\n            this.gridster.gridRenderer.updateItem(this.el, this.gridster.movingItem, this.renderer);\r\n        }\r\n    }\r\n}\nGridsterPreviewComponent.ɵfac = function GridsterPreviewComponent_Factory(t) { return new (t || GridsterPreviewComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(GridsterComponent, 1), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2)); };\nGridsterPreviewComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: GridsterPreviewComponent, selectors: [[\"gridster-preview\"]], decls: 0, vars: 0, template: function GridsterPreviewComponent_Template(rf, ctx) { }, styles: [\"gridster-preview{display:none;background:rgba(0,0,0,.15)}\"], encapsulation: 2 });\r\n/** @nocollapse */\r\nGridsterPreviewComponent.ctorParameters = () => [\r\n    { type: ElementRef },\r\n    { type: GridsterComponent, decorators: [{ type: Host }] },\r\n    { type: Renderer2 }\r\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridsterPreviewComponent, [{\n        type: Component,\n        args: [{\n                selector: 'gridster-preview',\n                template: '',\n                styles: [`gridster-preview{display:none;background:rgba(0,0,0,.15)}`],\n                encapsulation: ViewEncapsulation.None\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: GridsterComponent, decorators: [{\n                type: Host\n            }] }, { type: ɵngcc0.Renderer2 }]; }, null); })();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\r\nclass GridsterModule {\r\n}\nGridsterModule.ɵfac = function GridsterModule_Factory(t) { return new (t || GridsterModule)(); };\nGridsterModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: GridsterModule });\nGridsterModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ providers: [], imports: [[\n            CommonModule\n        ]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(GridsterModule, { declarations: function () { return [GridsterComponent, GridsterItemComponent, GridsterPreviewComponent]; }, imports: function () { return [CommonModule]; }, exports: function () { return [GridsterComponent, GridsterItemComponent]; } }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(GridsterModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    GridsterComponent,\n                    GridsterItemComponent,\n                    GridsterPreviewComponent\n                ],\n                imports: [\n                    CommonModule\n                ],\n                exports: [GridsterComponent, GridsterItemComponent],\n                providers: [],\n                bootstrap: []\n            }]\n    }], null, null); })();\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes} checked by tsc\r\n */\n\nexport { GridsterComponent, GridsterItemComponent, GridsterItemComponentInterface, GridsterComponentInterface, GridType, DisplayGrid, CompactType, GridsterConfigService, GridsterModule, GridsterPush, GridsterPushResize, GridsterSwap, GridsterPreviewComponent as ɵa };\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,"]},"metadata":{},"sourceType":"module"}