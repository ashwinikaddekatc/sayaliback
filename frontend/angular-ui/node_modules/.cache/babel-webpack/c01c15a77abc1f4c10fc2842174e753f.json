{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Desktop/CNS-Portal-ashwini15523/frontend/angular-ui/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/HP/Desktop/CNS-Portal-ashwini15523/frontend/angular-ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nvar legacyCustomElement = function legacyCustomElement(tagName, clazz) {\n  window.customElements.define(tagName, clazz); // Cast as any because TS doesn't recognize the return type as being a\n  // subtype of the decorated class when clazz is typed as\n  // `Constructor<HTMLElement>` for some reason.\n  // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n  // applied to elements however.\n  // tslint:disable-next-line:no-any\n\n  return clazz;\n};\n\nvar standardCustomElement = function standardCustomElement(tagName, descriptor) {\n  var kind = descriptor.kind,\n      elements = descriptor.elements;\n  return {\n    kind: kind,\n    elements: elements,\n    // This callback is called once the class is otherwise fully defined\n    finisher: function finisher(clazz) {\n      window.customElements.define(tagName, clazz);\n    }\n  };\n};\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * ```\n * @customElement('my-element')\n * class MyElement {\n *   render() {\n *     return html``;\n *   }\n * }\n * ```\n * @category Decorator\n * @param tagName The name of the custom element to define.\n */\n\n\nexport var customElement = function customElement(tagName) {\n  return function (classOrDescriptor) {\n    return typeof classOrDescriptor === 'function' ? legacyCustomElement(tagName, classOrDescriptor) : standardCustomElement(tagName, classOrDescriptor);\n  };\n};\n\nvar standardProperty = function standardProperty(options, element) {\n  // When decorating an accessor, pass it through and add property metadata.\n  // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n  // stomp over the user's accessor.\n  if (element.kind === 'method' && element.descriptor && !('value' in element.descriptor)) {\n    return Object.assign(Object.assign({}, element), {\n      finisher: function finisher(clazz) {\n        clazz.createProperty(element.key, options);\n      }\n    });\n  } else {\n    // createProperty() takes care of defining the property, but we still\n    // must return some kind of descriptor, so return a descriptor for an\n    // unused prototype field. The finisher calls createProperty().\n    return {\n      kind: 'field',\n      key: Symbol(),\n      placement: 'own',\n      descriptor: {},\n      // When @babel/plugin-proposal-decorators implements initializers,\n      // do this instead of the initializer below. See:\n      // https://github.com/babel/babel/issues/9260 extras: [\n      //   {\n      //     kind: 'initializer',\n      //     placement: 'own',\n      //     initializer: descriptor.initializer,\n      //   }\n      // ],\n      initializer: function initializer() {\n        if (typeof element.initializer === 'function') {\n          this[element.key] = element.initializer.call(this);\n        }\n      },\n      finisher: function finisher(clazz) {\n        clazz.createProperty(element.key, options);\n      }\n    };\n  }\n};\n\nvar legacyProperty = function legacyProperty(options, proto, name) {\n  proto.constructor.createProperty(name, options);\n};\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A [[`PropertyDeclaration`]] may optionally be\n * supplied to configure property features.\n *\n * This decorator should only be used for public fields. Private or protected\n * fields should use the [[`internalProperty`]] decorator.\n *\n * @example\n * ```ts\n * class MyElement {\n *   @property({ type: Boolean })\n *   clicked = false;\n * }\n * ```\n * @category Decorator\n * @ExportDecoratedItems\n */\n\n\nexport function property(options) {\n  // tslint:disable-next-line:no-any decorator\n  return function (protoOrDescriptor, name) {\n    return name !== undefined ? legacyProperty(options, protoOrDescriptor, name) : standardProperty(options, protoOrDescriptor);\n  };\n}\n/**\n * Declares a private or protected property that still triggers updates to the\n * element when it changes.\n *\n * Properties declared this way must not be used from HTML or HTML templating\n * systems, they're solely for properties internal to the element. These\n * properties may be renamed by optimization tools like closure compiler.\n * @category Decorator\n */\n\nexport function internalProperty(options) {\n  return property({\n    attribute: false,\n    hasChanged: options === null || options === void 0 ? void 0 : options.hasChanged\n  });\n}\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n * @param cache An optional boolean which when true performs the DOM query only\n * once and caches the result.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * @example\n *\n * ```ts\n * class MyElement {\n *   @query('#first')\n *   first;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\n\nexport function query(selector, cache) {\n  return function (protoOrDescriptor, // tslint:disable-next-line:no-any decorator\n  name) {\n    var descriptor = {\n      get: function get() {\n        return this.renderRoot.querySelector(selector);\n      },\n      enumerable: true,\n      configurable: true\n    };\n\n    if (cache) {\n      var key = typeof name === 'symbol' ? Symbol() : \"__\".concat(name);\n\n      descriptor.get = function () {\n        if (this[key] === undefined) {\n          this[key] = this.renderRoot.querySelector(selector);\n        }\n\n        return this[key];\n      };\n    }\n\n    return name !== undefined ? legacyQuery(descriptor, protoOrDescriptor, name) : standardQuery(descriptor, protoOrDescriptor);\n  };\n} // Note, in the future, we may extend this decorator to support the use case\n// where the queried element may need to do work to become ready to interact\n// with (e.g. load some implementation code). If so, we might elect to\n// add a second argument defining a function that can be run to make the\n// queried element loaded/updated/ready.\n\n/**\n * A property decorator that converts a class property into a getter that\n * returns a promise that resolves to the result of a querySelector on the\n * element's renderRoot done after the element's `updateComplete` promise\n * resolves. When the queried property may change with element state, this\n * decorator can be used instead of requiring users to await the\n * `updateComplete` before accessing the property.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * @example\n * ```ts\n * class MyElement {\n *   @queryAsync('#first')\n *   first;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n *\n * // external usage\n * async doSomethingWithFirst() {\n *  (await aMyElement.first).doSomething();\n * }\n * ```\n * @category Decorator\n */\n\nexport function queryAsync(selector) {\n  return function (protoOrDescriptor, // tslint:disable-next-line:no-any decorator\n  name) {\n    var descriptor = {\n      get: function get() {\n        var _this = this;\n\n        return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return _this.updateComplete;\n\n                case 2:\n                  return _context.abrupt(\"return\", _this.renderRoot.querySelector(selector));\n\n                case 3:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }))();\n      },\n      enumerable: true,\n      configurable: true\n    };\n    return name !== undefined ? legacyQuery(descriptor, protoOrDescriptor, name) : standardQuery(descriptor, protoOrDescriptor);\n  };\n}\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See:\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\n *\n * @example\n * ```ts\n * class MyElement {\n *   @queryAll('div')\n *   divs;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\n\nexport function queryAll(selector) {\n  return function (protoOrDescriptor, // tslint:disable-next-line:no-any decorator\n  name) {\n    var descriptor = {\n      get: function get() {\n        return this.renderRoot.querySelectorAll(selector);\n      },\n      enumerable: true,\n      configurable: true\n    };\n    return name !== undefined ? legacyQuery(descriptor, protoOrDescriptor, name) : standardQuery(descriptor, protoOrDescriptor);\n  };\n}\n\nvar legacyQuery = function legacyQuery(descriptor, proto, name) {\n  Object.defineProperty(proto, name, descriptor);\n};\n\nvar standardQuery = function standardQuery(descriptor, element) {\n  return {\n    kind: 'method',\n    placement: 'prototype',\n    key: element.key,\n    descriptor: descriptor\n  };\n};\n\nvar standardEventOptions = function standardEventOptions(options, element) {\n  return Object.assign(Object.assign({}, element), {\n    finisher: function finisher(clazz) {\n      Object.assign(clazz.prototype[element.key], options);\n    }\n  });\n};\n\nvar legacyEventOptions = // tslint:disable-next-line:no-any legacy decorator\nfunction legacyEventOptions(options, proto, name) {\n  Object.assign(proto[name], options);\n};\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifies event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n * ```ts\n * class MyElement {\n *   clicked = false;\n *\n *   render() {\n *     return html`\n *       <div @click=${this._onClick}`>\n *         <button></button>\n *       </div>\n *     `;\n *   }\n *\n *   @eventOptions({capture: true})\n *   _onClick(e) {\n *     this.clicked = true;\n *   }\n * }\n * ```\n * @category Decorator\n */\n\n\nexport function eventOptions(options) {\n  // Return value typed as any to prevent TypeScript from complaining that\n  // standard decorator function signature does not match TypeScript decorator\n  // signature\n  // TODO(kschaaf): unclear why it was only failing on this decorator and not\n  // the others\n  return function (protoOrDescriptor, name) {\n    return name !== undefined ? legacyEventOptions(options, protoOrDescriptor, name) : standardEventOptions(options, protoOrDescriptor);\n  };\n} // x-browser support for matches\n// tslint:disable-next-line:no-any\n\nvar ElementProto = Element.prototype;\nvar legacyMatches = ElementProto.msMatchesSelector || ElementProto.webkitMatchesSelector;\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedNodes` of the given named `slot`. Note, the type of\n * this property should be annotated as `NodeListOf<HTMLElement>`.\n *\n * @param slotName A string name of the slot.\n * @param flatten A boolean which when true flattens the assigned nodes,\n * meaning any assigned nodes that are slot elements are replaced with their\n * assigned nodes.\n * @param selector A string which filters the results to elements that match\n * the given css selector.\n *\n * * @example\n * ```ts\n * class MyElement {\n *   @queryAssignedNodes('list', true, '.item')\n *   listItems;\n *\n *   render() {\n *     return html`\n *       <slot name=\"list\"></slot>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\n\nexport function queryAssignedNodes() {\n  var slotName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var flatten = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var selector = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n  return function (protoOrDescriptor, // tslint:disable-next-line:no-any decorator\n  name) {\n    var descriptor = {\n      get: function get() {\n        var slotSelector = \"slot\".concat(slotName ? \"[name=\".concat(slotName, \"]\") : ':not([name])');\n        var slot = this.renderRoot.querySelector(slotSelector);\n        var nodes = slot && slot.assignedNodes({\n          flatten: flatten\n        });\n\n        if (nodes && selector) {\n          nodes = nodes.filter(function (node) {\n            return node.nodeType === Node.ELEMENT_NODE && node.matches ? node.matches(selector) : legacyMatches.call(node, selector);\n          });\n        }\n\n        return nodes;\n      },\n      enumerable: true,\n      configurable: true\n    };\n    return name !== undefined ? legacyQuery(descriptor, protoOrDescriptor, name) : standardQuery(descriptor, protoOrDescriptor);\n  };\n} //# sourceMappingURL=decorators.js.map","map":{"version":3,"sources":["C:/Users/HP/Desktop/CNS-Portal-ashwini15523/frontend/angular-ui/node_modules/lit-element/lib/decorators.js"],"names":["legacyCustomElement","tagName","clazz","window","customElements","define","standardCustomElement","descriptor","kind","elements","finisher","customElement","classOrDescriptor","standardProperty","options","element","Object","assign","createProperty","key","Symbol","placement","initializer","call","legacyProperty","proto","name","constructor","property","protoOrDescriptor","undefined","internalProperty","attribute","hasChanged","query","selector","cache","get","renderRoot","querySelector","enumerable","configurable","legacyQuery","standardQuery","queryAsync","updateComplete","queryAll","querySelectorAll","defineProperty","standardEventOptions","prototype","legacyEventOptions","eventOptions","ElementProto","Element","legacyMatches","msMatchesSelector","webkitMatchesSelector","queryAssignedNodes","slotName","flatten","slotSelector","slot","nodes","assignedNodes","filter","node","nodeType","Node","ELEMENT_NODE","matches"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst legacyCustomElement = (tagName, clazz) => {\n    window.customElements.define(tagName, clazz);\n    // Cast as any because TS doesn't recognize the return type as being a\n    // subtype of the decorated class when clazz is typed as\n    // `Constructor<HTMLElement>` for some reason.\n    // `Constructor<HTMLElement>` is helpful to make sure the decorator is\n    // applied to elements however.\n    // tslint:disable-next-line:no-any\n    return clazz;\n};\nconst standardCustomElement = (tagName, descriptor) => {\n    const { kind, elements } = descriptor;\n    return {\n        kind,\n        elements,\n        // This callback is called once the class is otherwise fully defined\n        finisher(clazz) {\n            window.customElements.define(tagName, clazz);\n        }\n    };\n};\n/**\n * Class decorator factory that defines the decorated class as a custom element.\n *\n * ```\n * @customElement('my-element')\n * class MyElement {\n *   render() {\n *     return html``;\n *   }\n * }\n * ```\n * @category Decorator\n * @param tagName The name of the custom element to define.\n */\nexport const customElement = (tagName) => (classOrDescriptor) => (typeof classOrDescriptor === 'function') ?\n    legacyCustomElement(tagName, classOrDescriptor) :\n    standardCustomElement(tagName, classOrDescriptor);\nconst standardProperty = (options, element) => {\n    // When decorating an accessor, pass it through and add property metadata.\n    // Note, the `hasOwnProperty` check in `createProperty` ensures we don't\n    // stomp over the user's accessor.\n    if (element.kind === 'method' && element.descriptor &&\n        !('value' in element.descriptor)) {\n        return Object.assign(Object.assign({}, element), { finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            } });\n    }\n    else {\n        // createProperty() takes care of defining the property, but we still\n        // must return some kind of descriptor, so return a descriptor for an\n        // unused prototype field. The finisher calls createProperty().\n        return {\n            kind: 'field',\n            key: Symbol(),\n            placement: 'own',\n            descriptor: {},\n            // When @babel/plugin-proposal-decorators implements initializers,\n            // do this instead of the initializer below. See:\n            // https://github.com/babel/babel/issues/9260 extras: [\n            //   {\n            //     kind: 'initializer',\n            //     placement: 'own',\n            //     initializer: descriptor.initializer,\n            //   }\n            // ],\n            initializer() {\n                if (typeof element.initializer === 'function') {\n                    this[element.key] = element.initializer.call(this);\n                }\n            },\n            finisher(clazz) {\n                clazz.createProperty(element.key, options);\n            }\n        };\n    }\n};\nconst legacyProperty = (options, proto, name) => {\n    proto.constructor\n        .createProperty(name, options);\n};\n/**\n * A property decorator which creates a LitElement property which reflects a\n * corresponding attribute value. A [[`PropertyDeclaration`]] may optionally be\n * supplied to configure property features.\n *\n * This decorator should only be used for public fields. Private or protected\n * fields should use the [[`internalProperty`]] decorator.\n *\n * @example\n * ```ts\n * class MyElement {\n *   @property({ type: Boolean })\n *   clicked = false;\n * }\n * ```\n * @category Decorator\n * @ExportDecoratedItems\n */\nexport function property(options) {\n    // tslint:disable-next-line:no-any decorator\n    return (protoOrDescriptor, name) => (name !== undefined) ?\n        legacyProperty(options, protoOrDescriptor, name) :\n        standardProperty(options, protoOrDescriptor);\n}\n/**\n * Declares a private or protected property that still triggers updates to the\n * element when it changes.\n *\n * Properties declared this way must not be used from HTML or HTML templating\n * systems, they're solely for properties internal to the element. These\n * properties may be renamed by optimization tools like closure compiler.\n * @category Decorator\n */\nexport function internalProperty(options) {\n    return property({ attribute: false, hasChanged: options === null || options === void 0 ? void 0 : options.hasChanged });\n}\n/**\n * A property decorator that converts a class property into a getter that\n * executes a querySelector on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n * @param cache An optional boolean which when true performs the DOM query only\n * once and caches the result.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * @example\n *\n * ```ts\n * class MyElement {\n *   @query('#first')\n *   first;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function query(selector, cache) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelector(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        if (cache) {\n            const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n            descriptor.get = function () {\n                if (this[key] === undefined) {\n                    (this[key] =\n                        this.renderRoot.querySelector(selector));\n                }\n                return this[key];\n            };\n        }\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\n// Note, in the future, we may extend this decorator to support the use case\n// where the queried element may need to do work to become ready to interact\n// with (e.g. load some implementation code). If so, we might elect to\n// add a second argument defining a function that can be run to make the\n// queried element loaded/updated/ready.\n/**\n * A property decorator that converts a class property into a getter that\n * returns a promise that resolves to the result of a querySelector on the\n * element's renderRoot done after the element's `updateComplete` promise\n * resolves. When the queried property may change with element state, this\n * decorator can be used instead of requiring users to await the\n * `updateComplete` before accessing the property.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See: https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelector\n *\n * @example\n * ```ts\n * class MyElement {\n *   @queryAsync('#first')\n *   first;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n *\n * // external usage\n * async doSomethingWithFirst() {\n *  (await aMyElement.first).doSomething();\n * }\n * ```\n * @category Decorator\n */\nexport function queryAsync(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            async get() {\n                await this.updateComplete;\n                return this.renderRoot.querySelector(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\n/**\n * A property decorator that converts a class property into a getter\n * that executes a querySelectorAll on the element's renderRoot.\n *\n * @param selector A DOMString containing one or more selectors to match.\n *\n * See:\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll\n *\n * @example\n * ```ts\n * class MyElement {\n *   @queryAll('div')\n *   divs;\n *\n *   render() {\n *     return html`\n *       <div id=\"first\"></div>\n *       <div id=\"second\"></div>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function queryAll(selector) {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                return this.renderRoot.querySelectorAll(selector);\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\nconst legacyQuery = (descriptor, proto, name) => {\n    Object.defineProperty(proto, name, descriptor);\n};\nconst standardQuery = (descriptor, element) => ({\n    kind: 'method',\n    placement: 'prototype',\n    key: element.key,\n    descriptor,\n});\nconst standardEventOptions = (options, element) => {\n    return Object.assign(Object.assign({}, element), { finisher(clazz) {\n            Object.assign(clazz.prototype[element.key], options);\n        } });\n};\nconst legacyEventOptions = \n// tslint:disable-next-line:no-any legacy decorator\n(options, proto, name) => {\n    Object.assign(proto[name], options);\n};\n/**\n * Adds event listener options to a method used as an event listener in a\n * lit-html template.\n *\n * @param options An object that specifies event listener options as accepted by\n * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.\n *\n * Current browsers support the `capture`, `passive`, and `once` options. See:\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters\n *\n * @example\n * ```ts\n * class MyElement {\n *   clicked = false;\n *\n *   render() {\n *     return html`\n *       <div @click=${this._onClick}`>\n *         <button></button>\n *       </div>\n *     `;\n *   }\n *\n *   @eventOptions({capture: true})\n *   _onClick(e) {\n *     this.clicked = true;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function eventOptions(options) {\n    // Return value typed as any to prevent TypeScript from complaining that\n    // standard decorator function signature does not match TypeScript decorator\n    // signature\n    // TODO(kschaaf): unclear why it was only failing on this decorator and not\n    // the others\n    return ((protoOrDescriptor, name) => (name !== undefined) ?\n        legacyEventOptions(options, protoOrDescriptor, name) :\n        standardEventOptions(options, protoOrDescriptor));\n}\n// x-browser support for matches\n// tslint:disable-next-line:no-any\nconst ElementProto = Element.prototype;\nconst legacyMatches = ElementProto.msMatchesSelector || ElementProto.webkitMatchesSelector;\n/**\n * A property decorator that converts a class property into a getter that\n * returns the `assignedNodes` of the given named `slot`. Note, the type of\n * this property should be annotated as `NodeListOf<HTMLElement>`.\n *\n * @param slotName A string name of the slot.\n * @param flatten A boolean which when true flattens the assigned nodes,\n * meaning any assigned nodes that are slot elements are replaced with their\n * assigned nodes.\n * @param selector A string which filters the results to elements that match\n * the given css selector.\n *\n * * @example\n * ```ts\n * class MyElement {\n *   @queryAssignedNodes('list', true, '.item')\n *   listItems;\n *\n *   render() {\n *     return html`\n *       <slot name=\"list\"></slot>\n *     `;\n *   }\n * }\n * ```\n * @category Decorator\n */\nexport function queryAssignedNodes(slotName = '', flatten = false, selector = '') {\n    return (protoOrDescriptor, \n    // tslint:disable-next-line:no-any decorator\n    name) => {\n        const descriptor = {\n            get() {\n                const slotSelector = `slot${slotName ? `[name=${slotName}]` : ':not([name])'}`;\n                const slot = this.renderRoot.querySelector(slotSelector);\n                let nodes = slot && slot.assignedNodes({ flatten });\n                if (nodes && selector) {\n                    nodes = nodes.filter((node) => node.nodeType === Node.ELEMENT_NODE &&\n                        node.matches ?\n                        node.matches(selector) :\n                        legacyMatches.call(node, selector));\n                }\n                return nodes;\n            },\n            enumerable: true,\n            configurable: true,\n        };\n        return (name !== undefined) ?\n            legacyQuery(descriptor, protoOrDescriptor, name) :\n            standardQuery(descriptor, protoOrDescriptor);\n    };\n}\n//# sourceMappingURL=decorators.js.map"]},"metadata":{},"sourceType":"module"}