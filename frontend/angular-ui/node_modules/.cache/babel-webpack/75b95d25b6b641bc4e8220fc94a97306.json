{"ast":null,"code":"import _slicedToArray from \"C:/Users/hp/OneDrive/Desktop/19portal/CNS-Portal/frontend/angular-ui/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\n/*\r\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\r\n * This software is released under MIT license.\r\n * The full license information can be found in LICENSE in the root directory of this project.\r\n */\nimport { existsIn } from '@cds/core/internal';\nimport has from 'ramda/es/has.js';\nimport { renderIcon } from '../icon.renderer.js';\nexport function addIcons(shapes, registry) {\n  shapes.forEach(function (s) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    addIcon(s, registry);\n  });\n}\nexport function hasIcon(shapeName, registry) {\n  return has(shapeName, registry);\n}\nexport function getIcon(shapeName, registry) {\n  return registry[shapeName] ? registry[shapeName] : registry.unknown;\n}\n\nfunction addIconToRegistry(shape, registry) {\n  var _shape = _slicedToArray(shape, 2),\n      shapeName = _shape[0],\n      template = _shape[1];\n\n  registry[shapeName] = renderIcon(template);\n}\n\nexport function addIcon(shape, registry) {\n  var _shape2 = _slicedToArray(shape, 1),\n      shapeName = _shape2[0];\n\n  if (!hasIcon(shapeName, registry)) {\n    addIconToRegistry(shape, registry);\n  }\n}\nexport function setIconAlias(shapeName, aliasName, registry) {\n  if (existsIn([shapeName], registry)) {\n    Object.defineProperty(registry, aliasName, {\n      get: function get() {\n        return registry[shapeName];\n      },\n      enumerable: true,\n      configurable: true\n    });\n  }\n}\nexport function setIconAliases(iconAlias, registry) {\n  if (registry[iconAlias[0]]) {\n    iconAlias[1].forEach(function (a) {\n      setIconAlias(iconAlias[0], a, registry);\n    });\n  }\n}\nexport function legacyAlias(aliases, registry) {\n  for (var shapeNameKey in aliases) {\n    // eslint-disable-next-line no-prototype-builtins\n    if (aliases.hasOwnProperty(shapeNameKey)) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (registry.hasOwnProperty(shapeNameKey)) {\n        setIconAliases([shapeNameKey, aliases[shapeNameKey]], registry);\n      } else {\n        throw new Error(\"An icon \\\"\".concat(shapeNameKey, \"\\\" you are trying to set aliases to doesn't exist in Clarity Icons.\"));\n      }\n    }\n  }\n} //# sourceMappingURL=icon.service-helpers.js.map","map":{"version":3,"sources":["C:/Users/hp/OneDrive/Desktop/19portal/CNS-Portal/frontend/angular-ui/node_modules/@cds/core/icon/utils/icon.service-helpers.js"],"names":["existsIn","has","renderIcon","addIcons","shapes","registry","forEach","s","addIcon","hasIcon","shapeName","getIcon","unknown","addIconToRegistry","shape","template","setIconAlias","aliasName","Object","defineProperty","get","enumerable","configurable","setIconAliases","iconAlias","a","legacyAlias","aliases","shapeNameKey","hasOwnProperty","Error"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,QAAT,QAAyB,oBAAzB;AACA,OAAOC,GAAP,MAAgB,iBAAhB;AACA,SAASC,UAAT,QAA2B,qBAA3B;AACA,OAAO,SAASC,QAAT,CAAkBC,MAAlB,EAA0BC,QAA1B,EAAoC;AACvCD,EAAAA,MAAM,CAACE,OAAP,CAAe,UAAAC,CAAC,EAAI;AAChB;AACAC,IAAAA,OAAO,CAACD,CAAD,EAAIF,QAAJ,CAAP;AACH,GAHD;AAIH;AACD,OAAO,SAASI,OAAT,CAAiBC,SAAjB,EAA4BL,QAA5B,EAAsC;AACzC,SAAOJ,GAAG,CAACS,SAAD,EAAYL,QAAZ,CAAV;AACH;AACD,OAAO,SAASM,OAAT,CAAiBD,SAAjB,EAA4BL,QAA5B,EAAsC;AACzC,SAAOA,QAAQ,CAACK,SAAD,CAAR,GAAsBL,QAAQ,CAACK,SAAD,CAA9B,GAA4CL,QAAQ,CAACO,OAA5D;AACH;;AACD,SAASC,iBAAT,CAA2BC,KAA3B,EAAkCT,QAAlC,EAA4C;AACxC,8BAA8BS,KAA9B;AAAA,MAAOJ,SAAP;AAAA,MAAkBK,QAAlB;;AACAV,EAAAA,QAAQ,CAACK,SAAD,CAAR,GAAsBR,UAAU,CAACa,QAAD,CAAhC;AACH;;AACD,OAAO,SAASP,OAAT,CAAiBM,KAAjB,EAAwBT,QAAxB,EAAkC;AACrC,+BAAoBS,KAApB;AAAA,MAAOJ,SAAP;;AACA,MAAI,CAACD,OAAO,CAACC,SAAD,EAAYL,QAAZ,CAAZ,EAAmC;AAC/BQ,IAAAA,iBAAiB,CAACC,KAAD,EAAQT,QAAR,CAAjB;AACH;AACJ;AACD,OAAO,SAASW,YAAT,CAAsBN,SAAtB,EAAiCO,SAAjC,EAA4CZ,QAA5C,EAAsD;AACzD,MAAIL,QAAQ,CAAC,CAACU,SAAD,CAAD,EAAcL,QAAd,CAAZ,EAAqC;AACjCa,IAAAA,MAAM,CAACC,cAAP,CAAsBd,QAAtB,EAAgCY,SAAhC,EAA2C;AACvCG,MAAAA,GAAG,EAAE,eAAM;AACP,eAAOf,QAAQ,CAACK,SAAD,CAAf;AACH,OAHsC;AAIvCW,MAAAA,UAAU,EAAE,IAJ2B;AAKvCC,MAAAA,YAAY,EAAE;AALyB,KAA3C;AAOH;AACJ;AACD,OAAO,SAASC,cAAT,CAAwBC,SAAxB,EAAmCnB,QAAnC,EAA6C;AAChD,MAAIA,QAAQ,CAACmB,SAAS,CAAC,CAAD,CAAV,CAAZ,EAA4B;AACxBA,IAAAA,SAAS,CAAC,CAAD,CAAT,CAAalB,OAAb,CAAqB,UAAAmB,CAAC,EAAI;AACtBT,MAAAA,YAAY,CAACQ,SAAS,CAAC,CAAD,CAAV,EAAeC,CAAf,EAAkBpB,QAAlB,CAAZ;AACH,KAFD;AAGH;AACJ;AACD,OAAO,SAASqB,WAAT,CAAqBC,OAArB,EAA8BtB,QAA9B,EAAwC;AAC3C,OAAK,IAAMuB,YAAX,IAA2BD,OAA3B,EAAoC;AAChC;AACA,QAAIA,OAAO,CAACE,cAAR,CAAuBD,YAAvB,CAAJ,EAA0C;AACtC;AACA,UAAIvB,QAAQ,CAACwB,cAAT,CAAwBD,YAAxB,CAAJ,EAA2C;AACvCL,QAAAA,cAAc,CAAC,CAACK,YAAD,EAAeD,OAAO,CAACC,YAAD,CAAtB,CAAD,EAAwCvB,QAAxC,CAAd;AACH,OAFD,MAGK;AACD,cAAM,IAAIyB,KAAJ,qBAAsBF,YAAtB,yEAAN;AACH;AACJ;AACJ;AACJ,C,CACD","sourcesContent":["/*\r\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\r\n * This software is released under MIT license.\r\n * The full license information can be found in LICENSE in the root directory of this project.\r\n */\r\nimport { existsIn } from '@cds/core/internal';\r\nimport has from 'ramda/es/has.js';\r\nimport { renderIcon } from '../icon.renderer.js';\r\nexport function addIcons(shapes, registry) {\r\n    shapes.forEach(s => {\r\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\r\n        addIcon(s, registry);\r\n    });\r\n}\r\nexport function hasIcon(shapeName, registry) {\r\n    return has(shapeName, registry);\r\n}\r\nexport function getIcon(shapeName, registry) {\r\n    return registry[shapeName] ? registry[shapeName] : registry.unknown;\r\n}\r\nfunction addIconToRegistry(shape, registry) {\r\n    const [shapeName, template] = shape;\r\n    registry[shapeName] = renderIcon(template);\r\n}\r\nexport function addIcon(shape, registry) {\r\n    const [shapeName] = shape;\r\n    if (!hasIcon(shapeName, registry)) {\r\n        addIconToRegistry(shape, registry);\r\n    }\r\n}\r\nexport function setIconAlias(shapeName, aliasName, registry) {\r\n    if (existsIn([shapeName], registry)) {\r\n        Object.defineProperty(registry, aliasName, {\r\n            get: () => {\r\n                return registry[shapeName];\r\n            },\r\n            enumerable: true,\r\n            configurable: true,\r\n        });\r\n    }\r\n}\r\nexport function setIconAliases(iconAlias, registry) {\r\n    if (registry[iconAlias[0]]) {\r\n        iconAlias[1].forEach(a => {\r\n            setIconAlias(iconAlias[0], a, registry);\r\n        });\r\n    }\r\n}\r\nexport function legacyAlias(aliases, registry) {\r\n    for (const shapeNameKey in aliases) {\r\n        // eslint-disable-next-line no-prototype-builtins\r\n        if (aliases.hasOwnProperty(shapeNameKey)) {\r\n            // eslint-disable-next-line no-prototype-builtins\r\n            if (registry.hasOwnProperty(shapeNameKey)) {\r\n                setIconAliases([shapeNameKey, aliases[shapeNameKey]], registry);\r\n            }\r\n            else {\r\n                throw new Error(`An icon \"${shapeNameKey}\" you are trying to set aliases to doesn't exist in Clarity Icons.`);\r\n            }\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=icon.service-helpers.js.map"]},"metadata":{},"sourceType":"module"}