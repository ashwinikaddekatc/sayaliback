{"ast":null,"code":"import _slicedToArray from \"C:/Users/HP/Desktop/CNS-Portal-ashwini15523/frontend/angular-ui/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:/Users/HP/Desktop/CNS-Portal-ashwini15523/frontend/angular-ui/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/HP/Desktop/CNS-Portal-ashwini15523/frontend/angular-ui/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { ɵɵdefineInjectable, ɵɵinject, PLATFORM_ID, Injectable, Inject, InjectionToken } from '@angular/core';\nimport { isPlatformBrowser, DOCUMENT } from '@angular/common'; // This service is based on the `ng2-cookies` package which sadly is not a service and does\n\nimport * as ɵngcc0 from '@angular/core';\n\nvar CookieService = /*#__PURE__*/function () {\n  function CookieService( // The type `Document` may not be used here. Although a fix is on its way,\n  // we will go with `any` for now to support Angular 2.4.x projects.\n  // Issue: https://github.com/angular/angular/issues/12631\n  // Fix: https://github.com/angular/angular/pull/14894\n  document, // Get the `PLATFORM_ID` so we can check if we're in a browser.\n  platformId) {\n    _classCallCheck(this, CookieService);\n\n    this.document = document;\n    this.platformId = platformId;\n    this.documentIsAccessible = isPlatformBrowser(this.platformId);\n  }\n  /**\r\n   * @param name Cookie name\r\n   * @returns boolean - whether cookie with specified name exists\r\n   */\n\n\n  _createClass(CookieService, [{\n    key: \"check\",\n    value: function check(name) {\n      if (!this.documentIsAccessible) {\n        return false;\n      }\n\n      name = encodeURIComponent(name);\n      var regExp = this.getCookieRegExp(name);\n      var exists = regExp.test(this.document.cookie);\n      return exists;\n    }\n    /**\r\n     * @param name Cookie name\r\n     * @returns property value\r\n     */\n\n  }, {\n    key: \"get\",\n    value: function get(name) {\n      if (this.documentIsAccessible && this.check(name)) {\n        name = encodeURIComponent(name);\n        var regExp = this.getCookieRegExp(name);\n        var result = regExp.exec(this.document.cookie);\n        return this.safeDecodeURIComponent(result[1]);\n      } else {\n        return '';\n      }\n    }\n    /**\r\n     * @returns all the cookies in json\r\n     */\n\n  }, {\n    key: \"getAll\",\n    value: function getAll() {\n      var _this = this;\n\n      if (!this.documentIsAccessible) {\n        return {};\n      }\n\n      var cookies = {};\n      var document = this.document;\n\n      if (document.cookie && document.cookie !== '') {\n        document.cookie.split(';').forEach(function (currentCookie) {\n          var _currentCookie$split = currentCookie.split('='),\n              _currentCookie$split2 = _slicedToArray(_currentCookie$split, 2),\n              cookieName = _currentCookie$split2[0],\n              cookieValue = _currentCookie$split2[1];\n\n          cookies[_this.safeDecodeURIComponent(cookieName.replace(/^ /, ''))] = _this.safeDecodeURIComponent(cookieValue);\n        });\n      }\n\n      return cookies;\n    }\n  }, {\n    key: \"set\",\n    value: function set(name, value, expiresOrOptions, path, domain, secure, sameSite) {\n      if (!this.documentIsAccessible) {\n        return;\n      }\n\n      if (typeof expiresOrOptions === 'number' || expiresOrOptions instanceof Date || path || domain || secure || sameSite) {\n        var optionsBody = {\n          expires: expiresOrOptions,\n          path: path,\n          domain: domain,\n          secure: secure,\n          sameSite: sameSite ? sameSite : 'Lax'\n        };\n        this.set(name, value, optionsBody);\n        return;\n      }\n\n      var cookieString = encodeURIComponent(name) + '=' + encodeURIComponent(value) + ';';\n      var options = expiresOrOptions ? expiresOrOptions : {};\n\n      if (options.expires) {\n        if (typeof options.expires === 'number') {\n          var dateExpires = new Date(new Date().getTime() + options.expires * 1000 * 60 * 60 * 24);\n          cookieString += 'expires=' + dateExpires.toUTCString() + ';';\n        } else {\n          cookieString += 'expires=' + options.expires.toUTCString() + ';';\n        }\n      }\n\n      if (options.path) {\n        cookieString += 'path=' + options.path + ';';\n      }\n\n      if (options.domain) {\n        cookieString += 'domain=' + options.domain + ';';\n      }\n\n      if (options.secure === false && options.sameSite === 'None') {\n        options.secure = true;\n        console.warn(\"[ngx-cookie-service] Cookie \".concat(name, \" was forced with secure flag because sameSite=None.\") + \"More details : https://github.com/stevermeister/ngx-cookie-service/issues/86#issuecomment-597720130\");\n      }\n\n      if (options.secure) {\n        cookieString += 'secure;';\n      }\n\n      if (!options.sameSite) {\n        options.sameSite = 'Lax';\n      }\n\n      cookieString += 'sameSite=' + options.sameSite + ';';\n      this.document.cookie = cookieString;\n    }\n    /**\r\n     * @param name   Cookie name\r\n     * @param path   Cookie path\r\n     * @param domain Cookie domain\r\n     */\n\n  }, {\n    key: \"delete\",\n    value: function _delete(name, path, domain, secure) {\n      var sameSite = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'Lax';\n\n      if (!this.documentIsAccessible) {\n        return;\n      }\n\n      var expiresDate = new Date('Thu, 01 Jan 1970 00:00:01 GMT');\n      this.set(name, '', {\n        expires: expiresDate,\n        path: path,\n        domain: domain,\n        secure: secure,\n        sameSite: sameSite\n      });\n    }\n    /**\r\n     * @param path   Cookie path\r\n     * @param domain Cookie domain\r\n     */\n\n  }, {\n    key: \"deleteAll\",\n    value: function deleteAll(path, domain, secure) {\n      var sameSite = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'Lax';\n\n      if (!this.documentIsAccessible) {\n        return;\n      }\n\n      var cookies = this.getAll();\n\n      for (var cookieName in cookies) {\n        if (cookies.hasOwnProperty(cookieName)) {\n          this.delete(cookieName, path, domain, secure, sameSite);\n        }\n      }\n    }\n    /**\r\n     * @param name Cookie name\r\n     * @returns property RegExp\r\n     */\n\n  }, {\n    key: \"getCookieRegExp\",\n    value: function getCookieRegExp(name) {\n      var escapedName = name.replace(/([\\[\\]\\{\\}\\(\\)\\|\\=\\;\\+\\?\\,\\.\\*\\^\\$])/gi, '\\\\$1');\n      return new RegExp('(?:^' + escapedName + '|;\\\\s*' + escapedName + ')=(.*?)(?:;|$)', 'g');\n    }\n  }, {\n    key: \"safeDecodeURIComponent\",\n    value: function safeDecodeURIComponent(encodedURIComponent) {\n      try {\n        return decodeURIComponent(encodedURIComponent);\n      } catch (_a) {\n        // probably it is not uri encoded. return as is\n        return encodedURIComponent;\n      }\n    }\n  }]);\n\n  return CookieService;\n}();\n\nCookieService.ɵfac = function CookieService_Factory(t) {\n  return new (t || CookieService)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID));\n};\n\nCookieService.ɵprov = ɵɵdefineInjectable({\n  factory: function CookieService_Factory() {\n    return new CookieService(ɵɵinject(DOCUMENT), ɵɵinject(PLATFORM_ID));\n  },\n  token: CookieService,\n  providedIn: \"root\"\n});\n\nCookieService.ctorParameters = function () {\n  return [{\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [DOCUMENT]\n    }]\n  }, {\n    type: InjectionToken,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CookieService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: ɵngcc0.InjectionToken,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, null);\n})();\n/*\r\n * Public API Surface of ngx-cookie-service\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { CookieService }; //# sourceMappingURL=ngx-cookie-service.js.map","map":{"version":3,"sources":["C:/Users/HP/Desktop/CNS-Portal-ashwini15523/frontend/angular-ui/node_modules/ngx-cookie-service/fesm2015/ngx-cookie-service.js"],"names":["ɵɵdefineInjectable","ɵɵinject","PLATFORM_ID","Injectable","Inject","InjectionToken","isPlatformBrowser","DOCUMENT","ɵngcc0","CookieService","document","platformId","documentIsAccessible","name","encodeURIComponent","regExp","getCookieRegExp","exists","test","cookie","check","result","exec","safeDecodeURIComponent","cookies","split","forEach","currentCookie","cookieName","cookieValue","replace","value","expiresOrOptions","path","domain","secure","sameSite","Date","optionsBody","expires","set","cookieString","options","dateExpires","getTime","toUTCString","console","warn","expiresDate","getAll","hasOwnProperty","delete","escapedName","RegExp","encodedURIComponent","decodeURIComponent","_a","ɵfac","CookieService_Factory","t","ɵprov","factory","token","providedIn","ctorParameters","type","undefined","decorators","args","ngDevMode","ɵsetClassMetadata"],"mappings":"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","sourcesContent":["import { ɵɵdefineInjectable, ɵɵinject, PLATFORM_ID, Injectable, Inject, InjectionToken } from '@angular/core';\r\nimport { isPlatformBrowser, DOCUMENT } from '@angular/common';\r\n\r\n// This service is based on the `ng2-cookies` package which sadly is not a service and does\r\nimport * as ɵngcc0 from '@angular/core';\r\nclass CookieService {\r\n    constructor(\r\n    // The type `Document` may not be used here. Although a fix is on its way,\r\n    // we will go with `any` for now to support Angular 2.4.x projects.\r\n    // Issue: https://github.com/angular/angular/issues/12631\r\n    // Fix: https://github.com/angular/angular/pull/14894\r\n    document, \r\n    // Get the `PLATFORM_ID` so we can check if we're in a browser.\r\n    platformId) {\r\n        this.document = document;\r\n        this.platformId = platformId;\r\n        this.documentIsAccessible = isPlatformBrowser(this.platformId);\r\n    }\r\n    /**\r\n     * @param name Cookie name\r\n     * @returns boolean - whether cookie with specified name exists\r\n     */\r\n    check(name) {\r\n        if (!this.documentIsAccessible) {\r\n            return false;\r\n        }\r\n        name = encodeURIComponent(name);\r\n        const regExp = this.getCookieRegExp(name);\r\n        const exists = regExp.test(this.document.cookie);\r\n        return exists;\r\n    }\r\n    /**\r\n     * @param name Cookie name\r\n     * @returns property value\r\n     */\r\n    get(name) {\r\n        if (this.documentIsAccessible && this.check(name)) {\r\n            name = encodeURIComponent(name);\r\n            const regExp = this.getCookieRegExp(name);\r\n            const result = regExp.exec(this.document.cookie);\r\n            return this.safeDecodeURIComponent(result[1]);\r\n        }\r\n        else {\r\n            return '';\r\n        }\r\n    }\r\n    /**\r\n     * @returns all the cookies in json\r\n     */\r\n    getAll() {\r\n        if (!this.documentIsAccessible) {\r\n            return {};\r\n        }\r\n        const cookies = {};\r\n        const document = this.document;\r\n        if (document.cookie && document.cookie !== '') {\r\n            document.cookie.split(';').forEach((currentCookie) => {\r\n                const [cookieName, cookieValue] = currentCookie.split('=');\r\n                cookies[this.safeDecodeURIComponent(cookieName.replace(/^ /, ''))] = this.safeDecodeURIComponent(cookieValue);\r\n            });\r\n        }\r\n        return cookies;\r\n    }\r\n    set(name, value, expiresOrOptions, path, domain, secure, sameSite) {\r\n        if (!this.documentIsAccessible) {\r\n            return;\r\n        }\r\n        if (typeof expiresOrOptions === 'number' || expiresOrOptions instanceof Date || path || domain || secure || sameSite) {\r\n            const optionsBody = {\r\n                expires: expiresOrOptions,\r\n                path,\r\n                domain,\r\n                secure,\r\n                sameSite: sameSite ? sameSite : 'Lax',\r\n            };\r\n            this.set(name, value, optionsBody);\r\n            return;\r\n        }\r\n        let cookieString = encodeURIComponent(name) + '=' + encodeURIComponent(value) + ';';\r\n        const options = expiresOrOptions ? expiresOrOptions : {};\r\n        if (options.expires) {\r\n            if (typeof options.expires === 'number') {\r\n                const dateExpires = new Date(new Date().getTime() + options.expires * 1000 * 60 * 60 * 24);\r\n                cookieString += 'expires=' + dateExpires.toUTCString() + ';';\r\n            }\r\n            else {\r\n                cookieString += 'expires=' + options.expires.toUTCString() + ';';\r\n            }\r\n        }\r\n        if (options.path) {\r\n            cookieString += 'path=' + options.path + ';';\r\n        }\r\n        if (options.domain) {\r\n            cookieString += 'domain=' + options.domain + ';';\r\n        }\r\n        if (options.secure === false && options.sameSite === 'None') {\r\n            options.secure = true;\r\n            console.warn(`[ngx-cookie-service] Cookie ${name} was forced with secure flag because sameSite=None.` +\r\n                `More details : https://github.com/stevermeister/ngx-cookie-service/issues/86#issuecomment-597720130`);\r\n        }\r\n        if (options.secure) {\r\n            cookieString += 'secure;';\r\n        }\r\n        if (!options.sameSite) {\r\n            options.sameSite = 'Lax';\r\n        }\r\n        cookieString += 'sameSite=' + options.sameSite + ';';\r\n        this.document.cookie = cookieString;\r\n    }\r\n    /**\r\n     * @param name   Cookie name\r\n     * @param path   Cookie path\r\n     * @param domain Cookie domain\r\n     */\r\n    delete(name, path, domain, secure, sameSite = 'Lax') {\r\n        if (!this.documentIsAccessible) {\r\n            return;\r\n        }\r\n        const expiresDate = new Date('Thu, 01 Jan 1970 00:00:01 GMT');\r\n        this.set(name, '', { expires: expiresDate, path, domain, secure, sameSite });\r\n    }\r\n    /**\r\n     * @param path   Cookie path\r\n     * @param domain Cookie domain\r\n     */\r\n    deleteAll(path, domain, secure, sameSite = 'Lax') {\r\n        if (!this.documentIsAccessible) {\r\n            return;\r\n        }\r\n        const cookies = this.getAll();\r\n        for (const cookieName in cookies) {\r\n            if (cookies.hasOwnProperty(cookieName)) {\r\n                this.delete(cookieName, path, domain, secure, sameSite);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * @param name Cookie name\r\n     * @returns property RegExp\r\n     */\r\n    getCookieRegExp(name) {\r\n        const escapedName = name.replace(/([\\[\\]\\{\\}\\(\\)\\|\\=\\;\\+\\?\\,\\.\\*\\^\\$])/gi, '\\\\$1');\r\n        return new RegExp('(?:^' + escapedName + '|;\\\\s*' + escapedName + ')=(.*?)(?:;|$)', 'g');\r\n    }\r\n    safeDecodeURIComponent(encodedURIComponent) {\r\n        try {\r\n            return decodeURIComponent(encodedURIComponent);\r\n        }\r\n        catch (_a) {\r\n            // probably it is not uri encoded. return as is\r\n            return encodedURIComponent;\r\n        }\r\n    }\r\n}\r\nCookieService.ɵfac = function CookieService_Factory(t) { return new (t || CookieService)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(PLATFORM_ID)); };\r\nCookieService.ɵprov = ɵɵdefineInjectable({ factory: function CookieService_Factory() { return new CookieService(ɵɵinject(DOCUMENT), ɵɵinject(PLATFORM_ID)); }, token: CookieService, providedIn: \"root\" });\r\nCookieService.ctorParameters = () => [\r\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\r\n    { type: InjectionToken, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CookieService, [{\r\n        type: Injectable,\r\n        args: [{\r\n                providedIn: 'root'\r\n            }]\r\n    }], function () { return [{ type: undefined, decorators: [{\r\n                type: Inject,\r\n                args: [DOCUMENT]\r\n            }] }, { type: ɵngcc0.InjectionToken, decorators: [{\r\n                type: Inject,\r\n                args: [PLATFORM_ID]\r\n            }] }]; }, null); })();\r\n\r\n/*\r\n * Public API Surface of ngx-cookie-service\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { CookieService };\r\n\r\n//# sourceMappingURL=ngx-cookie-service.js.map"]},"metadata":{},"sourceType":"module"}