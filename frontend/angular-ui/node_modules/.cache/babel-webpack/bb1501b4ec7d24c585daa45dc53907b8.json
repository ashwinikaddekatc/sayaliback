{"ast":null,"code":"import _curry1 from \"./internal/_curry1.js\";\nimport curryN from \"./curryN.js\";\n/**\r\n * Returns a new function much like the supplied one, except that the first two\r\n * arguments' order is reversed.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category Function\r\n * @sig ((a, b, c, ...) -> z) -> (b -> a -> c -> ... -> z)\r\n * @param {Function} fn The function to invoke with its first two parameters reversed.\r\n * @return {*} The result of invoking `fn` with its first two parameters' order reversed.\r\n * @example\r\n *\r\n *      const mergeThree = (a, b, c) => [].concat(a, b, c);\r\n *\r\n *      mergeThree(1, 2, 3); //=> [1, 2, 3]\r\n *\r\n *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]\r\n * @symb R.flip(f)(a, b, c) = f(b, a, c)\r\n */\n\nvar flip = /*#__PURE__*/_curry1(function flip(fn) {\n  return curryN(fn.length, function (a, b) {\n    var args = Array.prototype.slice.call(arguments, 0);\n    args[0] = b;\n    args[1] = a;\n    return fn.apply(this, args);\n  });\n});\n\nexport default flip;","map":{"version":3,"sources":["C:/Users/hp/OneDrive/Desktop/19portal/CNS-Portal/frontend/angular-ui/node_modules/ramda/es/flip.js"],"names":["_curry1","curryN","flip","fn","length","a","b","args","Array","prototype","slice","call","arguments","apply"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,IAAI,GACR,aACAF,OAAO,CAAC,SAASE,IAAT,CAAcC,EAAd,EAAkB;AACxB,SAAOF,MAAM,CAACE,EAAE,CAACC,MAAJ,EAAY,UAAUC,CAAV,EAAaC,CAAb,EAAgB;AACvC,QAAIC,IAAI,GAAGC,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BC,SAA3B,EAAsC,CAAtC,CAAX;AACAL,IAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUD,CAAV;AACAC,IAAAA,IAAI,CAAC,CAAD,CAAJ,GAAUF,CAAV;AACA,WAAOF,EAAE,CAACU,KAAH,CAAS,IAAT,EAAeN,IAAf,CAAP;AACD,GALY,CAAb;AAMD,CAPM,CAFP;;AAWA,eAAeL,IAAf","sourcesContent":["import _curry1 from \"./internal/_curry1.js\";\r\nimport curryN from \"./curryN.js\";\r\n/**\r\n * Returns a new function much like the supplied one, except that the first two\r\n * arguments' order is reversed.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category Function\r\n * @sig ((a, b, c, ...) -> z) -> (b -> a -> c -> ... -> z)\r\n * @param {Function} fn The function to invoke with its first two parameters reversed.\r\n * @return {*} The result of invoking `fn` with its first two parameters' order reversed.\r\n * @example\r\n *\r\n *      const mergeThree = (a, b, c) => [].concat(a, b, c);\r\n *\r\n *      mergeThree(1, 2, 3); //=> [1, 2, 3]\r\n *\r\n *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]\r\n * @symb R.flip(f)(a, b, c) = f(b, a, c)\r\n */\r\n\r\nvar flip =\r\n/*#__PURE__*/\r\n_curry1(function flip(fn) {\r\n  return curryN(fn.length, function (a, b) {\r\n    var args = Array.prototype.slice.call(arguments, 0);\r\n    args[0] = b;\r\n    args[1] = a;\r\n    return fn.apply(this, args);\r\n  });\r\n});\r\n\r\nexport default flip;"]},"metadata":{},"sourceType":"module"}