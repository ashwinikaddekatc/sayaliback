{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/HP/Desktop/CNS-Portal-ashwini15523/frontend/angular-ui/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"C:/Users/HP/Desktop/CNS-Portal-ashwini15523/frontend/angular-ui/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"C:/Users/HP/Desktop/CNS-Portal-ashwini15523/frontend/angular-ui/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/*\r\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\r\n * This software is released under MIT license.\r\n * The full license information can be found in LICENSE in the root directory of this project.\r\n */\nimport { AnimationStatus, CLARITY_MOTION_ENTER_LEAVE_PROPERTY, CLARITY_MOTION_FALLBACK_DURATION_IN_MS, CLARITY_MOTION_FALLBACK_EASING, CLARITY_MOTION_REVERSE_ANIMATION_LABEL, CLARITY_MOTION_REVERSE_ANIMATION_SUFFIX } from './interfaces.js';\nimport { LogService } from '../services/log.service.js';\nimport { ClarityMotion } from './motion.service.js';\nimport clone from 'ramda/es/clone.js';\nimport { getCssPropertyValue, isCssPropertyName } from '../utils/css.js';\nimport { isPrefixedBy, isSuffixedBy, getNumericValueFromCssSecondsStyleValue, removePrefix } from '../utils/string.js';\nimport { queryChildFromLightOrShadowDom } from '../utils/dom.js';\nimport { allPropertiesPass, getMillisecondsFromSeconds } from '../utils/identity.js';\n/**\r\n * runPropertyAnimations() is a utility function called by the @animate(). It is a single point of entry\r\n * to execute the property-driven animations found in components like the accordion and overlay.\r\n *\r\n * Other utilities here are exported to break up the unit tests covering the animation/motion\r\n * library. While they could be called or used in isolation, it is not recommended for most use cases.\r\n *\r\n * runPropertyAnimations returns a boolean so that we know if it ran successfully or not. This is\r\n * mostly to make testing the function easier.\r\n *\r\n * @internal\r\n */\n\nexport function runPropertyAnimations(_x, _x2) {\n  return _runPropertyAnimations.apply(this, arguments);\n} // --- CONTROL FLOW UTILS ---\n\nfunction _runPropertyAnimations() {\n  _runPropertyAnimations = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(props, hostEl) {\n    var propertyAnimations, animationsRan;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (hostEl._animations) {\n              _context.next = 3;\n              break;\n            }\n\n            LogService.warn(\"\".concat(hostEl.tagName.toLocaleLowerCase(), \" is trying to animate but no animations are defined.\"));\n            return _context.abrupt(\"return\", false);\n\n          case 3:\n            // this runs through animations for each property sequentially\n            // animations passed into getPropertyAnimations are the Property-Driven Animations\n            // passed into the @animate decorator\n            // { hidden: { true: 'cds-modal-enter-reverse', false: 'enter' }, status: { error: 'cds-component-shake' } }\n            // getPropertyAnimations transforms the @animate decorator config into an array of\n            // tuples so they are easier to work with.\n            // ['hidden', { true: 'cds-modal-enter-reverse', false: 'enter' }], ['status', { error: 'cds-component-shake' }]\n            // * inactive animations are filtered out\n            propertyAnimations = getPropertyAnimations(hostEl._animations, props);\n            _context.next = 6;\n            return Promise.all(propertyAnimations.map(function (propNameAnimationTuple) {\n              var _propNameAnimationTup = _slicedToArray(propNameAnimationTuple, 2),\n                  propname = _propNameAnimationTup[0],\n                  propertyAnimationsByValue = _propNameAnimationTup[1];\n\n              if (props.get(propname) === hostEl[propname]) {\n                // a weird/unlikely state where an update is sent but the property value didn't actually change\n                return false;\n              } // gets animations to run based on the property's value\n\n\n              var animatedPropertyValueAsString = propertyAnimationsByValue[hostEl[propname].toString()];\n              var cdsMotionValue = hostEl.cdsMotion; // looping through each tuple value in order, getAnimationConfigForPropertyValue()\n              // returns a tuple with the animation name from Clarity Motion and the TargetedAnimation\n              // config (also returned from the Clarity Motion service)\n              // ['enter-reverse', [ { target: '.private-host', animation: [ { opacity: 0 }, { opacity: 1 } ], options: { duration: 300 }}]\n\n              var _getAnimationConfigFo = getAnimationConfigForPropertyValue(animatedPropertyValueAsString, getInlineOverride(cdsMotionValue, propname, hostEl[propname].toString())),\n                  _getAnimationConfigFo2 = _slicedToArray(_getAnimationConfigFo, 2),\n                  motionName = _getAnimationConfigFo2[0],\n                  returnedMotion = _getAnimationConfigFo2[1];\n\n              var motionForMyValue = clone(returnedMotion); // have to jump through this hoop to keep typescript happy\n              // jumps out if there are no animation routines\n\n              if (motionForMyValue.length < 1) {\n                return false;\n              }\n\n              motionForMyValue = setAnimationConfigOptions(motionName, motionForMyValue, hostEl); // loops through animation config and runs them; assigns the promises to an array we can Promise.all() at the end\n\n              var animations = getAnimationPromiseInstructions(animatedPropertyValueAsString, motionForMyValue, hostEl);\n              return Promise.all(animations).then(function () {\n                resolveAnimationEndStatus(animatedPropertyValueAsString, hostEl);\n                return true;\n              });\n            })).then(function (result) {\n              return result.indexOf(true) > -1;\n            }).catch(function () {\n              return false;\n            });\n\n          case 6:\n            animationsRan = _context.sent;\n            return _context.abrupt(\"return\", animationsRan);\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _runPropertyAnimations.apply(this, arguments);\n}\n\nexport function setAnimationStartStatus(animatedPropertyValueAsString, hostEl) {\n  // accesses and manipulates the private animation status attr;\n  if (hostEl.getAttribute('_cds-animation-status') !== AnimationStatus.active) {\n    hostEl.setAttribute('_cds-animation-status', AnimationStatus.active); // this is here so we only emit the start event once, right when the whole animation starts...\n\n    hostEl.cdsMotionChange.emit(\"\".concat(animatedPropertyValueAsString, \" animation \").concat(AnimationStatus.start));\n  }\n}\nexport function resolveAnimationEndStatus(animatedPropertyValueAsString, hostEl) {\n  // sets super secret animation attr back to 'ready'\n  hostEl.setAttribute('_cds-animation-status', AnimationStatus.ready); // A\n  // emits the name of the animation and that it ended\n\n  hostEl.cdsMotionChange.emit(\"\".concat(animatedPropertyValueAsString, \" animation \").concat(AnimationStatus.end)); // A\n}\nexport function setAnimationConfigOptions(motionName, motionForMyValue, hostEl) {\n  var cdsMotionValue = hostEl.cdsMotion;\n  var animationsAreTurnedOff = !cdsMotionValue || cdsMotionValue === 'off'; // the following set of functions – reverseAnimationConfig(), zeroOutAnimationConfig(),\n  // setAnimationDuration(), setAnimationEasing() – modify the \"options\" portion of the animation routine\n  // in the tuple above that is returned from getAnimationConfigForPropertyValue\n\n  if (animationIsReversed(motionName)) {\n    motionForMyValue = reverseAnimationConfig(motionForMyValue);\n  }\n\n  if (animationsAreTurnedOff) {\n    // cdsMotion is turned off, so zero out the duration\n    motionForMyValue = zeroOutAnimationConfig(motionForMyValue);\n  } else {\n    // sets duration and easing based on CSS properties, passed values, or a global fallback\n    motionForMyValue = setAnimationDuration(motionForMyValue, hostEl);\n    motionForMyValue = setAnimationEasing(motionForMyValue, hostEl);\n  }\n\n  return motionForMyValue;\n}\nexport function getAnimationPromiseInstructions(animatedPropertyValueAsString, motionConfigs, hostEl) {\n  return motionConfigs.filter(function (config) {\n    return !config.onlyIf || allPropertiesPass(hostEl, config.onlyIf);\n  }).map(function (config) {\n    setAnimationStartStatus(animatedPropertyValueAsString, hostEl);\n    return new Promise(function (resolve) {\n      var animationPlayer = getAnimationTarget(hostEl, config.target).animate(getAnimationKeyframesOrPropertyIndexedFrames(config.animation, hostEl), config.options || {});\n\n      var listener = function listener() {\n        resolve('animation finished');\n        animationPlayer.removeEventListener('finish', listener);\n      };\n\n      animationPlayer.addEventListener('finish', listener);\n    });\n  });\n}\nexport function getAnimationTarget(hostEl, targetSelector) {\n  return queryChildFromLightOrShadowDom(hostEl, targetSelector) || hostEl;\n}\nexport function getAnimationKeyframesOrPropertyIndexedFrames(animationConfig, hostEl) {\n  return !Array.isArray(animationConfig) ? animationConfig : sizeDimensionKeyframes(animationConfig, hostEl);\n} // --- REVERSING UTILS ---\n// string -> boolean\n\nexport function animationIsReversed(nameOfAnimation) {\n  return isSuffixedBy(nameOfAnimation, CLARITY_MOTION_REVERSE_ANIMATION_SUFFIX);\n} // { target: '.my-selector', animation: [<keyframes>], options: { duration: 500 }} ->\n// { target: '.my-selector', animation: [<keyframes>], options: { duration: 500, direction: 'reverse' }}\n\nexport function reverseAnimationConfig(config) {\n  return config.map(function (anim) {\n    if (anim.options) {\n      anim.options.direction = CLARITY_MOTION_REVERSE_ANIMATION_LABEL;\n    } else {\n      anim.options = {\n        direction: CLARITY_MOTION_REVERSE_ANIMATION_LABEL\n      };\n    }\n\n    return anim;\n  });\n} // 'my-animation' -> 'my-animation-reverse'\n\nexport function reverseAnimation(animationName) {\n  return [animationName, '-', CLARITY_MOTION_REVERSE_ANIMATION_LABEL].join('');\n} // --- ANIMATION CONFIG RETRIEVAL ---\n// returns an animation name from a stringified @animate decorator config passed into the\n// cds-motion attr. looks it up by property first and value second. returns empty string\n// if no animation name matches the property and property value.\n\nexport function getInlineOverride(cdsMotionValue, propName, propValue) {\n  if (!cdsMotionValue || !propName || typeof propValue === 'undefined') {\n    return '';\n  }\n\n  if (cdsMotionValue === 'on' || cdsMotionValue === 'off') {\n    return '';\n  }\n\n  var inlineOverride;\n\n  try {\n    inlineOverride = JSON.parse(cdsMotionValue);\n  } catch (e) {\n    return '';\n  }\n\n  var overrideValue = inlineOverride[propName] && inlineOverride[propName][propValue];\n  return overrideValue ? overrideValue : '';\n} // 'i-am-reverse' -> 'i-am'\n\nexport function extractAnimationNameIfReversed(name) {\n  return animationIsReversed(name) ? name.slice(0, -1 * CLARITY_MOTION_REVERSE_ANIMATION_SUFFIX.length) : name;\n} // if the name retrieved from the cds-motion config is present in Clarity Motion, it is returned\n\nexport function getAnimationFromOverrideOrDecorator(decoratorValue, overrideValue) {\n  if (!overrideValue) {\n    return decoratorValue;\n  }\n\n  return ClarityMotion.has(extractAnimationNameIfReversed(overrideValue)) ? overrideValue : decoratorValue;\n} // ('animation-name') -> ['animation-name', [ { target: '.an-element', animation: [<keyframes>], options: { ... }}]];\n// ('animation-name', 'name-retrieved-from-cds-motion-config') ->\n// ['name-retrieved-from-cds-motion-config', [ { target: ..., animation: [<keyframes>], options: { ... }}]];\n\nexport function getAnimationConfigForPropertyValue(nameOfAnimationFromObject, cdsMotionOverride) {\n  var nameOfAnimation = getAnimationFromOverrideOrDecorator(nameOfAnimationFromObject, cdsMotionOverride);\n  return [nameOfAnimation, clone(ClarityMotion.get(extractAnimationNameIfReversed(nameOfAnimation)))];\n} // --- SETTING ANIMATION CONFIG VALUES ---\n\nexport function setAnimationDuration(config, hostEl) {\n  return setAnimationProperty('duration', hostEl, config, CLARITY_MOTION_FALLBACK_DURATION_IN_MS, function (val) {\n    return getMillisecondsFromSeconds(getNumericValueFromCssSecondsStyleValue(val));\n  });\n}\nexport function setAnimationEasing(config, hostEl) {\n  return setAnimationProperty('easing', hostEl, config, CLARITY_MOTION_FALLBACK_EASING);\n}\nexport function zeroOutAnimationConfig(config) {\n  return config.map(function (anim) {\n    if (anim.options) {\n      anim.options.duration = 0;\n      anim.options.easing = CLARITY_MOTION_FALLBACK_EASING;\n    } else {\n      anim.options = {\n        duration: 0,\n        easing: CLARITY_MOTION_FALLBACK_EASING\n      };\n    }\n\n    return anim;\n  });\n}\nexport function setAnimationProperty(propertyName, hostEl, config, staticFallback, valueConverter) {\n  return config.map(function (anim) {\n    if (anim.options) {\n      if (!anim.options[propertyName]) {\n        anim.options[propertyName] = staticFallback;\n      } else if (isCssPropertyName(anim.options[propertyName])) {\n        var myConfigOption = anim.options[propertyName];\n        var valFromProperty = getCssPropertyValue(myConfigOption, hostEl);\n\n        if (!valFromProperty) {\n          valFromProperty = staticFallback;\n        } else if (valueConverter) {\n          valFromProperty = valueConverter(valFromProperty);\n        }\n\n        anim.options[propertyName] = valFromProperty;\n      } // else fallthrough not required because option is already set to intended value\n\n    } else {\n      var newConfigOptions = {};\n      newConfigOptions[propertyName] = staticFallback;\n      anim.options = newConfigOptions;\n    }\n\n    return anim;\n  });\n} // -- TRANSFORM PROPERTY-DRIVEN ANIMATION OBJECTS TO ANIMATION CONFIG OBJECTS ---\n\nexport function sizeDimensionKeyframes(animationKeyframes, hostEl) {\n  if (!Array.isArray(animationKeyframes)) {\n    return animationKeyframes;\n  }\n\n  return animationKeyframes.map(function (kf) {\n    var _a, _b, _c, _d;\n\n    if ((kf === null || kf === void 0 ? void 0 : kf.hasOwnProperty('height')) && isPrefixedBy(((_a = kf === null || kf === void 0 ? void 0 : kf.height) === null || _a === void 0 ? void 0 : _a.toString()) || '', 'from:')) {\n      var selector = removePrefix(((_b = kf === null || kf === void 0 ? void 0 : kf.height) === null || _b === void 0 ? void 0 : _b.toString()) || '', 'from:');\n      var measureTarget = queryChildFromLightOrShadowDom(hostEl, selector) || null;\n      kf.height = !measureTarget ? 'auto' : measureTarget.getBoundingClientRect().height + 'px';\n    }\n\n    if ((kf === null || kf === void 0 ? void 0 : kf.hasOwnProperty('width')) && isPrefixedBy(((_c = kf === null || kf === void 0 ? void 0 : kf.width) === null || _c === void 0 ? void 0 : _c.toString()) || '', 'from:')) {\n      var _selector = removePrefix(((_d = kf === null || kf === void 0 ? void 0 : kf.width) === null || _d === void 0 ? void 0 : _d.toString()) || '', 'from:');\n\n      var _measureTarget = queryChildFromLightOrShadowDom(hostEl, _selector) || null;\n\n      kf.width = !_measureTarget ? 'auto' : _measureTarget.getBoundingClientRect().width + 'px';\n    }\n\n    return kf;\n  });\n}\nexport function filterAnimationsByUpdatedProperties(animations, updatingProps) {\n  if (animations === null || animations === undefined || animations === {}) {\n    return null;\n  }\n\n  var objectIsEmpty = true;\n  var returnObject = {};\n  Object.getOwnPropertyNames(animations).forEach(function (prop) {\n    if (updatingProps.has(prop)) {\n      returnObject[prop] = clone(animations[prop]);\n      objectIsEmpty = false;\n    }\n  });\n  return objectIsEmpty ? null : returnObject;\n}\nexport function flattenAndSortAnimations(hiddenAndNotAnimationTuple, isHiding) {\n  if (hiddenAndNotAnimationTuple === null || hiddenAndNotAnimationTuple === undefined) {\n    return [];\n  }\n\n  var _hiddenAndNotAnimatio = _slicedToArray(hiddenAndNotAnimationTuple, 2),\n      hiddenAnimations = _hiddenAndNotAnimatio[0],\n      otherAnimations = _hiddenAndNotAnimatio[1];\n\n  if (hiddenAnimations.length > 0) {\n    if (isHiding) {\n      // hiding hostEl\n      return [].concat(otherAnimations, hiddenAnimations);\n    } else {\n      // showing hostEl\n      return [].concat(hiddenAnimations, otherAnimations);\n    }\n  } else {\n    return otherAnimations;\n  }\n}\nexport function getHidingAndNonHidingPropertyAnimations(animations) {\n  var hiddenAnimations = [];\n  var otherAnimations = [];\n  Object.getOwnPropertyNames(animations || {}).forEach(function (prop) {\n    var animationTuple = [prop, clone(animations[prop])];\n\n    if (prop === CLARITY_MOTION_ENTER_LEAVE_PROPERTY) {\n      hiddenAnimations.push(animationTuple);\n    } else {\n      otherAnimations.push(animationTuple);\n    }\n  });\n  return [hiddenAnimations, otherAnimations];\n}\nexport function getPropertyAnimations(animations, updatingProps) {\n  var activeAnimations = filterAnimationsByUpdatedProperties(animations || {}, updatingProps);\n\n  if (activeAnimations === null) {\n    return [];\n  }\n\n  var hidingAndOtherAnimationsAsTuple = getHidingAndNonHidingPropertyAnimations(activeAnimations);\n  var isHiding = updatingProps.get(CLARITY_MOTION_ENTER_LEAVE_PROPERTY);\n  return flattenAndSortAnimations(hidingAndOtherAnimationsAsTuple, isHiding);\n} //# sourceMappingURL=utils.js.map","map":{"version":3,"sources":["C:/Users/HP/Desktop/CNS-Portal-ashwini15523/frontend/angular-ui/node_modules/@cds/core/internal/motion/utils.js"],"names":["AnimationStatus","CLARITY_MOTION_ENTER_LEAVE_PROPERTY","CLARITY_MOTION_FALLBACK_DURATION_IN_MS","CLARITY_MOTION_FALLBACK_EASING","CLARITY_MOTION_REVERSE_ANIMATION_LABEL","CLARITY_MOTION_REVERSE_ANIMATION_SUFFIX","LogService","ClarityMotion","clone","getCssPropertyValue","isCssPropertyName","isPrefixedBy","isSuffixedBy","getNumericValueFromCssSecondsStyleValue","removePrefix","queryChildFromLightOrShadowDom","allPropertiesPass","getMillisecondsFromSeconds","runPropertyAnimations","props","hostEl","_animations","warn","tagName","toLocaleLowerCase","propertyAnimations","getPropertyAnimations","Promise","all","map","propNameAnimationTuple","propname","propertyAnimationsByValue","get","animatedPropertyValueAsString","toString","cdsMotionValue","cdsMotion","getAnimationConfigForPropertyValue","getInlineOverride","motionName","returnedMotion","motionForMyValue","length","setAnimationConfigOptions","animations","getAnimationPromiseInstructions","then","resolveAnimationEndStatus","result","indexOf","catch","animationsRan","setAnimationStartStatus","getAttribute","active","setAttribute","cdsMotionChange","emit","start","ready","end","animationsAreTurnedOff","animationIsReversed","reverseAnimationConfig","zeroOutAnimationConfig","setAnimationDuration","setAnimationEasing","motionConfigs","filter","config","onlyIf","resolve","animationPlayer","getAnimationTarget","target","animate","getAnimationKeyframesOrPropertyIndexedFrames","animation","options","listener","removeEventListener","addEventListener","targetSelector","animationConfig","Array","isArray","sizeDimensionKeyframes","nameOfAnimation","anim","direction","reverseAnimation","animationName","join","propName","propValue","inlineOverride","JSON","parse","e","overrideValue","extractAnimationNameIfReversed","name","slice","getAnimationFromOverrideOrDecorator","decoratorValue","has","nameOfAnimationFromObject","cdsMotionOverride","setAnimationProperty","val","duration","easing","propertyName","staticFallback","valueConverter","myConfigOption","valFromProperty","newConfigOptions","animationKeyframes","kf","_a","_b","_c","_d","hasOwnProperty","height","selector","measureTarget","getBoundingClientRect","width","filterAnimationsByUpdatedProperties","updatingProps","undefined","objectIsEmpty","returnObject","Object","getOwnPropertyNames","forEach","prop","flattenAndSortAnimations","hiddenAndNotAnimationTuple","isHiding","hiddenAnimations","otherAnimations","concat","getHidingAndNonHidingPropertyAnimations","animationTuple","push","activeAnimations","hidingAndOtherAnimationsAsTuple"],"mappings":"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","sourcesContent":["/*\r\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\r\n * This software is released under MIT license.\r\n * The full license information can be found in LICENSE in the root directory of this project.\r\n */\r\nimport { AnimationStatus, CLARITY_MOTION_ENTER_LEAVE_PROPERTY, CLARITY_MOTION_FALLBACK_DURATION_IN_MS, CLARITY_MOTION_FALLBACK_EASING, CLARITY_MOTION_REVERSE_ANIMATION_LABEL, CLARITY_MOTION_REVERSE_ANIMATION_SUFFIX, } from './interfaces.js';\r\nimport { LogService } from '../services/log.service.js';\r\nimport { ClarityMotion } from './motion.service.js';\r\nimport clone from 'ramda/es/clone.js';\r\nimport { getCssPropertyValue, isCssPropertyName } from '../utils/css.js';\r\nimport { isPrefixedBy, isSuffixedBy, getNumericValueFromCssSecondsStyleValue, removePrefix } from '../utils/string.js';\r\nimport { queryChildFromLightOrShadowDom } from '../utils/dom.js';\r\nimport { allPropertiesPass, getMillisecondsFromSeconds } from '../utils/identity.js';\r\n/**\r\n * runPropertyAnimations() is a utility function called by the @animate(). It is a single point of entry\r\n * to execute the property-driven animations found in components like the accordion and overlay.\r\n *\r\n * Other utilities here are exported to break up the unit tests covering the animation/motion\r\n * library. While they could be called or used in isolation, it is not recommended for most use cases.\r\n *\r\n * runPropertyAnimations returns a boolean so that we know if it ran successfully or not. This is\r\n * mostly to make testing the function easier.\r\n *\r\n * @internal\r\n */\r\nexport async function runPropertyAnimations(props, hostEl) {\r\n    if (!hostEl._animations) {\r\n        LogService.warn(`${hostEl.tagName.toLocaleLowerCase()} is trying to animate but no animations are defined.`);\r\n        return false;\r\n    }\r\n    // this runs through animations for each property sequentially\r\n    // animations passed into getPropertyAnimations are the Property-Driven Animations\r\n    // passed into the @animate decorator\r\n    // { hidden: { true: 'cds-modal-enter-reverse', false: 'enter' }, status: { error: 'cds-component-shake' } }\r\n    // getPropertyAnimations transforms the @animate decorator config into an array of\r\n    // tuples so they are easier to work with.\r\n    // ['hidden', { true: 'cds-modal-enter-reverse', false: 'enter' }], ['status', { error: 'cds-component-shake' }]\r\n    // * inactive animations are filtered out\r\n    const propertyAnimations = getPropertyAnimations(hostEl._animations, props);\r\n    const animationsRan = await Promise.all(propertyAnimations.map((propNameAnimationTuple) => {\r\n        const [propname, propertyAnimationsByValue] = propNameAnimationTuple;\r\n        if (props.get(propname) === hostEl[propname]) {\r\n            // a weird/unlikely state where an update is sent but the property value didn't actually change\r\n            return false;\r\n        }\r\n        // gets animations to run based on the property's value\r\n        const animatedPropertyValueAsString = propertyAnimationsByValue[hostEl[propname].toString()];\r\n        const cdsMotionValue = hostEl.cdsMotion;\r\n        // looping through each tuple value in order, getAnimationConfigForPropertyValue()\r\n        // returns a tuple with the animation name from Clarity Motion and the TargetedAnimation\r\n        // config (also returned from the Clarity Motion service)\r\n        // ['enter-reverse', [ { target: '.private-host', animation: [ { opacity: 0 }, { opacity: 1 } ], options: { duration: 300 }}]\r\n        const [motionName, returnedMotion] = getAnimationConfigForPropertyValue(animatedPropertyValueAsString, getInlineOverride(cdsMotionValue, propname, hostEl[propname].toString()));\r\n        let motionForMyValue = clone(returnedMotion); // have to jump through this hoop to keep typescript happy\r\n        // jumps out if there are no animation routines\r\n        if (motionForMyValue.length < 1) {\r\n            return false;\r\n        }\r\n        motionForMyValue = setAnimationConfigOptions(motionName, motionForMyValue, hostEl);\r\n        // loops through animation config and runs them; assigns the promises to an array we can Promise.all() at the end\r\n        const animations = getAnimationPromiseInstructions(animatedPropertyValueAsString, motionForMyValue, hostEl);\r\n        return Promise.all(animations).then(() => {\r\n            resolveAnimationEndStatus(animatedPropertyValueAsString, hostEl);\r\n            return true;\r\n        });\r\n    }))\r\n        .then(result => {\r\n        return result.indexOf(true) > -1;\r\n    })\r\n        .catch(() => {\r\n        return false;\r\n    });\r\n    return animationsRan;\r\n}\r\n// --- CONTROL FLOW UTILS ---\r\nexport function setAnimationStartStatus(animatedPropertyValueAsString, hostEl) {\r\n    // accesses and manipulates the private animation status attr;\r\n    if (hostEl.getAttribute('_cds-animation-status') !== AnimationStatus.active) {\r\n        hostEl.setAttribute('_cds-animation-status', AnimationStatus.active);\r\n        // this is here so we only emit the start event once, right when the whole animation starts...\r\n        hostEl.cdsMotionChange.emit(`${animatedPropertyValueAsString} animation ${AnimationStatus.start}`);\r\n    }\r\n}\r\nexport function resolveAnimationEndStatus(animatedPropertyValueAsString, hostEl) {\r\n    // sets super secret animation attr back to 'ready'\r\n    hostEl.setAttribute('_cds-animation-status', AnimationStatus.ready); // A\r\n    // emits the name of the animation and that it ended\r\n    hostEl.cdsMotionChange.emit(`${animatedPropertyValueAsString} animation ${AnimationStatus.end}`); // A\r\n}\r\nexport function setAnimationConfigOptions(motionName, motionForMyValue, hostEl) {\r\n    const cdsMotionValue = hostEl.cdsMotion;\r\n    const animationsAreTurnedOff = !cdsMotionValue || cdsMotionValue === 'off';\r\n    // the following set of functions – reverseAnimationConfig(), zeroOutAnimationConfig(),\r\n    // setAnimationDuration(), setAnimationEasing() – modify the \"options\" portion of the animation routine\r\n    // in the tuple above that is returned from getAnimationConfigForPropertyValue\r\n    if (animationIsReversed(motionName)) {\r\n        motionForMyValue = reverseAnimationConfig(motionForMyValue);\r\n    }\r\n    if (animationsAreTurnedOff) {\r\n        // cdsMotion is turned off, so zero out the duration\r\n        motionForMyValue = zeroOutAnimationConfig(motionForMyValue);\r\n    }\r\n    else {\r\n        // sets duration and easing based on CSS properties, passed values, or a global fallback\r\n        motionForMyValue = setAnimationDuration(motionForMyValue, hostEl);\r\n        motionForMyValue = setAnimationEasing(motionForMyValue, hostEl);\r\n    }\r\n    return motionForMyValue;\r\n}\r\nexport function getAnimationPromiseInstructions(animatedPropertyValueAsString, motionConfigs, hostEl) {\r\n    return motionConfigs\r\n        .filter(config => !config.onlyIf || allPropertiesPass(hostEl, config.onlyIf))\r\n        .map(config => {\r\n        setAnimationStartStatus(animatedPropertyValueAsString, hostEl);\r\n        return new Promise(resolve => {\r\n            const animationPlayer = getAnimationTarget(hostEl, config.target).animate(getAnimationKeyframesOrPropertyIndexedFrames(config.animation, hostEl), config.options || {});\r\n            const listener = () => {\r\n                resolve('animation finished');\r\n                animationPlayer.removeEventListener('finish', listener);\r\n            };\r\n            animationPlayer.addEventListener('finish', listener);\r\n        });\r\n    });\r\n}\r\nexport function getAnimationTarget(hostEl, targetSelector) {\r\n    return queryChildFromLightOrShadowDom(hostEl, targetSelector) || hostEl;\r\n}\r\nexport function getAnimationKeyframesOrPropertyIndexedFrames(animationConfig, hostEl) {\r\n    return !Array.isArray(animationConfig) ? animationConfig : sizeDimensionKeyframes(animationConfig, hostEl);\r\n}\r\n// --- REVERSING UTILS ---\r\n// string -> boolean\r\nexport function animationIsReversed(nameOfAnimation) {\r\n    return isSuffixedBy(nameOfAnimation, CLARITY_MOTION_REVERSE_ANIMATION_SUFFIX);\r\n}\r\n// { target: '.my-selector', animation: [<keyframes>], options: { duration: 500 }} ->\r\n// { target: '.my-selector', animation: [<keyframes>], options: { duration: 500, direction: 'reverse' }}\r\nexport function reverseAnimationConfig(config) {\r\n    return config.map((anim) => {\r\n        if (anim.options) {\r\n            anim.options.direction = CLARITY_MOTION_REVERSE_ANIMATION_LABEL;\r\n        }\r\n        else {\r\n            anim.options = { direction: CLARITY_MOTION_REVERSE_ANIMATION_LABEL };\r\n        }\r\n        return anim;\r\n    });\r\n}\r\n// 'my-animation' -> 'my-animation-reverse'\r\nexport function reverseAnimation(animationName) {\r\n    return [animationName, '-', CLARITY_MOTION_REVERSE_ANIMATION_LABEL].join('');\r\n}\r\n// --- ANIMATION CONFIG RETRIEVAL ---\r\n// returns an animation name from a stringified @animate decorator config passed into the\r\n// cds-motion attr. looks it up by property first and value second. returns empty string\r\n// if no animation name matches the property and property value.\r\nexport function getInlineOverride(cdsMotionValue, propName, propValue) {\r\n    if (!cdsMotionValue || !propName || typeof propValue === 'undefined') {\r\n        return '';\r\n    }\r\n    if (cdsMotionValue === 'on' || cdsMotionValue === 'off') {\r\n        return '';\r\n    }\r\n    let inlineOverride;\r\n    try {\r\n        inlineOverride = JSON.parse(cdsMotionValue);\r\n    }\r\n    catch (e) {\r\n        return '';\r\n    }\r\n    const overrideValue = inlineOverride[propName] && inlineOverride[propName][propValue];\r\n    return overrideValue ? overrideValue : '';\r\n}\r\n// 'i-am-reverse' -> 'i-am'\r\nexport function extractAnimationNameIfReversed(name) {\r\n    return animationIsReversed(name) ? name.slice(0, -1 * CLARITY_MOTION_REVERSE_ANIMATION_SUFFIX.length) : name;\r\n}\r\n// if the name retrieved from the cds-motion config is present in Clarity Motion, it is returned\r\nexport function getAnimationFromOverrideOrDecorator(decoratorValue, overrideValue) {\r\n    if (!overrideValue) {\r\n        return decoratorValue;\r\n    }\r\n    return ClarityMotion.has(extractAnimationNameIfReversed(overrideValue)) ? overrideValue : decoratorValue;\r\n}\r\n// ('animation-name') -> ['animation-name', [ { target: '.an-element', animation: [<keyframes>], options: { ... }}]];\r\n// ('animation-name', 'name-retrieved-from-cds-motion-config') ->\r\n// ['name-retrieved-from-cds-motion-config', [ { target: ..., animation: [<keyframes>], options: { ... }}]];\r\nexport function getAnimationConfigForPropertyValue(nameOfAnimationFromObject, cdsMotionOverride) {\r\n    const nameOfAnimation = getAnimationFromOverrideOrDecorator(nameOfAnimationFromObject, cdsMotionOverride);\r\n    return [nameOfAnimation, clone(ClarityMotion.get(extractAnimationNameIfReversed(nameOfAnimation)))];\r\n}\r\n// --- SETTING ANIMATION CONFIG VALUES ---\r\nexport function setAnimationDuration(config, hostEl) {\r\n    return setAnimationProperty('duration', hostEl, config, CLARITY_MOTION_FALLBACK_DURATION_IN_MS, (val) => {\r\n        return getMillisecondsFromSeconds(getNumericValueFromCssSecondsStyleValue(val));\r\n    });\r\n}\r\nexport function setAnimationEasing(config, hostEl) {\r\n    return setAnimationProperty('easing', hostEl, config, CLARITY_MOTION_FALLBACK_EASING);\r\n}\r\nexport function zeroOutAnimationConfig(config) {\r\n    return config.map(anim => {\r\n        if (anim.options) {\r\n            anim.options.duration = 0;\r\n            anim.options.easing = CLARITY_MOTION_FALLBACK_EASING;\r\n        }\r\n        else {\r\n            anim.options = { duration: 0, easing: CLARITY_MOTION_FALLBACK_EASING };\r\n        }\r\n        return anim;\r\n    });\r\n}\r\nexport function setAnimationProperty(propertyName, hostEl, config, staticFallback, valueConverter) {\r\n    return config.map((anim) => {\r\n        if (anim.options) {\r\n            if (!anim.options[propertyName]) {\r\n                anim.options[propertyName] = staticFallback;\r\n            }\r\n            else if (isCssPropertyName(anim.options[propertyName])) {\r\n                const myConfigOption = anim.options[propertyName];\r\n                let valFromProperty = getCssPropertyValue(myConfigOption, hostEl);\r\n                if (!valFromProperty) {\r\n                    valFromProperty = staticFallback;\r\n                }\r\n                else if (valueConverter) {\r\n                    valFromProperty = valueConverter(valFromProperty);\r\n                }\r\n                anim.options[propertyName] = valFromProperty;\r\n            }\r\n            // else fallthrough not required because option is already set to intended value\r\n        }\r\n        else {\r\n            const newConfigOptions = {};\r\n            newConfigOptions[propertyName] = staticFallback;\r\n            anim.options = newConfigOptions;\r\n        }\r\n        return anim;\r\n    });\r\n}\r\n// -- TRANSFORM PROPERTY-DRIVEN ANIMATION OBJECTS TO ANIMATION CONFIG OBJECTS ---\r\nexport function sizeDimensionKeyframes(animationKeyframes, hostEl) {\r\n    if (!Array.isArray(animationKeyframes)) {\r\n        return animationKeyframes;\r\n    }\r\n    return animationKeyframes.map((kf) => {\r\n        var _a, _b, _c, _d;\r\n        if ((kf === null || kf === void 0 ? void 0 : kf.hasOwnProperty('height')) && isPrefixedBy(((_a = kf === null || kf === void 0 ? void 0 : kf.height) === null || _a === void 0 ? void 0 : _a.toString()) || '', 'from:')) {\r\n            const selector = removePrefix(((_b = kf === null || kf === void 0 ? void 0 : kf.height) === null || _b === void 0 ? void 0 : _b.toString()) || '', 'from:');\r\n            const measureTarget = queryChildFromLightOrShadowDom(hostEl, selector) || null;\r\n            kf.height = !measureTarget ? 'auto' : measureTarget.getBoundingClientRect().height + 'px';\r\n        }\r\n        if ((kf === null || kf === void 0 ? void 0 : kf.hasOwnProperty('width')) && isPrefixedBy(((_c = kf === null || kf === void 0 ? void 0 : kf.width) === null || _c === void 0 ? void 0 : _c.toString()) || '', 'from:')) {\r\n            const selector = removePrefix(((_d = kf === null || kf === void 0 ? void 0 : kf.width) === null || _d === void 0 ? void 0 : _d.toString()) || '', 'from:');\r\n            const measureTarget = queryChildFromLightOrShadowDom(hostEl, selector) || null;\r\n            kf.width = !measureTarget ? 'auto' : measureTarget.getBoundingClientRect().width + 'px';\r\n        }\r\n        return kf;\r\n    });\r\n}\r\nexport function filterAnimationsByUpdatedProperties(animations, updatingProps) {\r\n    if (animations === null || animations === undefined || animations === {}) {\r\n        return null;\r\n    }\r\n    let objectIsEmpty = true;\r\n    const returnObject = {};\r\n    Object.getOwnPropertyNames(animations).forEach((prop) => {\r\n        if (updatingProps.has(prop)) {\r\n            returnObject[prop] = clone(animations[prop]);\r\n            objectIsEmpty = false;\r\n        }\r\n    });\r\n    return objectIsEmpty ? null : returnObject;\r\n}\r\nexport function flattenAndSortAnimations(hiddenAndNotAnimationTuple, isHiding) {\r\n    if (hiddenAndNotAnimationTuple === null || hiddenAndNotAnimationTuple === undefined) {\r\n        return [];\r\n    }\r\n    const [hiddenAnimations, otherAnimations] = hiddenAndNotAnimationTuple;\r\n    if (hiddenAnimations.length > 0) {\r\n        if (isHiding) {\r\n            // hiding hostEl\r\n            return [].concat(otherAnimations, hiddenAnimations);\r\n        }\r\n        else {\r\n            // showing hostEl\r\n            return [].concat(hiddenAnimations, otherAnimations);\r\n        }\r\n    }\r\n    else {\r\n        return otherAnimations;\r\n    }\r\n}\r\nexport function getHidingAndNonHidingPropertyAnimations(animations) {\r\n    const hiddenAnimations = [];\r\n    const otherAnimations = [];\r\n    Object.getOwnPropertyNames(animations || {}).forEach((prop) => {\r\n        const animationTuple = [prop, clone(animations[prop])];\r\n        if (prop === CLARITY_MOTION_ENTER_LEAVE_PROPERTY) {\r\n            hiddenAnimations.push(animationTuple);\r\n        }\r\n        else {\r\n            otherAnimations.push(animationTuple);\r\n        }\r\n    });\r\n    return [hiddenAnimations, otherAnimations];\r\n}\r\nexport function getPropertyAnimations(animations, updatingProps) {\r\n    const activeAnimations = filterAnimationsByUpdatedProperties(animations || {}, updatingProps);\r\n    if (activeAnimations === null) {\r\n        return [];\r\n    }\r\n    const hidingAndOtherAnimationsAsTuple = getHidingAndNonHidingPropertyAnimations(activeAnimations);\r\n    const isHiding = updatingProps.get(CLARITY_MOTION_ENTER_LEAVE_PROPERTY);\r\n    return flattenAndSortAnimations(hidingAndOtherAnimationsAsTuple, isHiding);\r\n}\r\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"module"}