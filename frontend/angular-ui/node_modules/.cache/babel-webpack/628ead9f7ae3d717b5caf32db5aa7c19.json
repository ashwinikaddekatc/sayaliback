{"ast":null,"code":"import _classCallCheck from \"C:/Users/HP/Desktop/CNS-Portal-ashwini15523/frontend/angular-ui/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, PLATFORM_ID, NgModule } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n// Whether the current platform supports the V8 Break Iterator. The V8 check\n// is necessary to detect all Blink based browsers.\n\nimport * as ɵngcc0 from '@angular/core';\nvar hasV8BreakIterator; // We need a try/catch around the reference to `Intl`, because accessing it in some cases can\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\n// the consumer is providing a polyfilled `Map`. See:\n// https://github.com/Microsoft/ChakraCore/issues/3189\n// https://github.com/angular/components/issues/15687\n\ntry {\n  hasV8BreakIterator = typeof Intl !== 'undefined' && Intl.v8BreakIterator;\n} catch (_a) {\n  hasV8BreakIterator = false;\n}\n/**\r\n * Service to detect the current platform by comparing the userAgent strings and\r\n * checking browser-specific global properties.\r\n */\n\n\nvar Platform = function Platform(_platformId) {\n  _classCallCheck(this, Platform);\n\n  this._platformId = _platformId; // We want to use the Angular platform check because if the Document is shimmed\n  // without the navigator, the following checks will fail. This is preferred because\n  // sometimes the Document may be shimmed without the user's knowledge or intention\n\n  /** Whether the Angular application is being rendered in the browser. */\n\n  this.isBrowser = this._platformId ? isPlatformBrowser(this._platformId) : typeof document === 'object' && !!document;\n  /** Whether the current browser is Microsoft Edge. */\n\n  this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);\n  /** Whether the current rendering engine is Microsoft Trident. */\n\n  this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent); // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\n\n  /** Whether the current rendering engine is Blink. */\n\n  this.BLINK = this.isBrowser && !!(window.chrome || hasV8BreakIterator) && typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT; // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\n  // ensure that Webkit runs standalone and is not used as another engine's base.\n\n  /** Whether the current rendering engine is WebKit. */\n\n  this.WEBKIT = this.isBrowser && /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\n  /** Whether the current platform is Apple iOS. */\n\n  this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !('MSStream' in window); // It's difficult to detect the plain Gecko engine, because most of the browsers identify\n  // them self as Gecko-like browsers and modify the userAgent's according to that.\n  // Since we only cover one explicit Firefox case, we can simply check for Firefox\n  // instead of having an unstable check for Gecko.\n\n  /** Whether the current browser is Firefox. */\n\n  this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\n  /** Whether the current platform is Android. */\n  // Trident on mobile adds the android platform to the userAgent to trick detections.\n\n  this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT; // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\n  // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\n  // Safari browser should also use Webkit as its layout engine.\n\n  /** Whether the current browser is Safari. */\n\n  this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\n};\n\nPlatform.ɵfac = function Platform_Factory(t) {\n  return new (t || Platform)(ɵngcc0.ɵɵinject(PLATFORM_ID));\n};\n\nPlatform.ɵprov = i0.ɵɵdefineInjectable({\n  factory: function Platform_Factory() {\n    return new Platform(i0.ɵɵinject(i0.PLATFORM_ID));\n  },\n  token: Platform,\n  providedIn: \"root\"\n});\n\nPlatform.ctorParameters = function () {\n  return [{\n    type: Object,\n    decorators: [{\n      type: Inject,\n      args: [PLATFORM_ID]\n    }]\n  }];\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Platform, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: Object,\n      decorators: [{\n        type: Inject,\n        args: [PLATFORM_ID]\n      }]\n    }];\n  }, null);\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nvar PlatformModule = function PlatformModule() {\n  _classCallCheck(this, PlatformModule);\n};\n\nPlatformModule.ɵfac = function PlatformModule_Factory(t) {\n  return new (t || PlatformModule)();\n};\n\nPlatformModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: PlatformModule\n});\nPlatformModule.ɵinj = ɵngcc0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PlatformModule, [{\n    type: NgModule,\n    args: [{}]\n  }], null, null);\n})();\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/** Cached result Set of input types support by the current browser. */\n\n\nvar supportedInputTypes;\n/** Types of `<input>` that *might* be supported. */\n\nvar candidateInputTypes = [// `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\n// first changing it to something else:\n// The specified value \"\" does not conform to the required format.\n// The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\n'color', 'button', 'checkbox', 'date', 'datetime-local', 'email', 'file', 'hidden', 'image', 'month', 'number', 'password', 'radio', 'range', 'reset', 'search', 'submit', 'tel', 'text', 'time', 'url', 'week'];\n/** @returns The input types supported by this browser. */\n\nfunction getSupportedInputTypes() {\n  // Result is cached.\n  if (supportedInputTypes) {\n    return supportedInputTypes;\n  } // We can't check if an input type is not supported until we're on the browser, so say that\n  // everything is supported when not on the browser. We don't use `Platform` here since it's\n  // just a helper function and can't inject it.\n\n\n  if (typeof document !== 'object' || !document) {\n    supportedInputTypes = new Set(candidateInputTypes);\n    return supportedInputTypes;\n  }\n\n  var featureTestInput = document.createElement('input');\n  supportedInputTypes = new Set(candidateInputTypes.filter(function (value) {\n    featureTestInput.setAttribute('type', value);\n    return featureTestInput.type === value;\n  }));\n  return supportedInputTypes;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/** Cached result of whether the user's browser supports passive event listeners. */\n\n\nvar supportsPassiveEvents;\n/**\r\n * Checks whether the user's browser supports passive event listeners.\r\n * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\r\n */\n\nfunction supportsPassiveEventListeners() {\n  if (supportsPassiveEvents == null && typeof window !== 'undefined') {\n    try {\n      window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\n        get: function get() {\n          return supportsPassiveEvents = true;\n        }\n      }));\n    } finally {\n      supportsPassiveEvents = supportsPassiveEvents || false;\n    }\n  }\n\n  return supportsPassiveEvents;\n}\n/**\r\n * Normalizes an `AddEventListener` object to something that can be passed\r\n * to `addEventListener` on any browser, no matter whether it supports the\r\n * `options` parameter.\r\n * @param options Object to be normalized.\r\n */\n\n\nfunction normalizePassiveListenerOptions(options) {\n  return supportsPassiveEventListeners() ? options : !!options.capture;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/** Cached result of the way the browser handles the horizontal scroll axis in RTL mode. */\n\n\nvar rtlScrollAxisType;\n/** Cached result of the check that indicates whether the browser supports scroll behaviors. */\n\nvar scrollBehaviorSupported;\n/** Check whether the browser supports scroll behaviors. */\n\nfunction supportsScrollBehavior() {\n  if (scrollBehaviorSupported == null) {\n    // If we're not in the browser, it can't be supported. Also check for `Element`, because\n    // some projects stub out the global `document` during SSR which can throw us off.\n    if (typeof document !== 'object' || !document || typeof Element !== 'function' || !Element) {\n      scrollBehaviorSupported = false;\n      return scrollBehaviorSupported;\n    } // If the element can have a `scrollBehavior` style, we can be sure that it's supported.\n\n\n    if ('scrollBehavior' in document.documentElement.style) {\n      scrollBehaviorSupported = true;\n    } else {\n      // At this point we have 3 possibilities: `scrollTo` isn't supported at all, it's\n      // supported but it doesn't handle scroll behavior, or it has been polyfilled.\n      var scrollToFunction = Element.prototype.scrollTo;\n\n      if (scrollToFunction) {\n        // We can detect if the function has been polyfilled by calling `toString` on it. Native\n        // functions are obfuscated using `[native code]`, whereas if it was overwritten we'd get\n        // the actual function source. Via https://davidwalsh.name/detect-native-function. Consider\n        // polyfilled functions as supporting scroll behavior.\n        scrollBehaviorSupported = !/\\{\\s*\\[native code\\]\\s*\\}/.test(scrollToFunction.toString());\n      } else {\n        scrollBehaviorSupported = false;\n      }\n    }\n  }\n\n  return scrollBehaviorSupported;\n}\n/**\r\n * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,\r\n * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.\r\n */\n\n\nfunction getRtlScrollAxisType() {\n  // We can't check unless we're on the browser. Just assume 'normal' if we're not.\n  if (typeof document !== 'object' || !document) {\n    return 0\n    /* NORMAL */\n    ;\n  }\n\n  if (rtlScrollAxisType == null) {\n    // Create a 1px wide scrolling container and a 2px wide content element.\n    var scrollContainer = document.createElement('div');\n    var containerStyle = scrollContainer.style;\n    scrollContainer.dir = 'rtl';\n    containerStyle.width = '1px';\n    containerStyle.overflow = 'auto';\n    containerStyle.visibility = 'hidden';\n    containerStyle.pointerEvents = 'none';\n    containerStyle.position = 'absolute';\n    var content = document.createElement('div');\n    var contentStyle = content.style;\n    contentStyle.width = '2px';\n    contentStyle.height = '1px';\n    scrollContainer.appendChild(content);\n    document.body.appendChild(scrollContainer);\n    rtlScrollAxisType = 0\n    /* NORMAL */\n    ; // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL\n    // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're\n    // dealing with one of the other two types of browsers.\n\n    if (scrollContainer.scrollLeft === 0) {\n      // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an\n      // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by\n      // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will\n      // return 0 when we read it again.\n      scrollContainer.scrollLeft = 1;\n      rtlScrollAxisType = scrollContainer.scrollLeft === 0 ? 1\n      /* NEGATED */\n      : 2\n      /* INVERTED */\n      ;\n    }\n\n    scrollContainer.parentNode.removeChild(scrollContainer);\n  }\n\n  return rtlScrollAxisType;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nvar shadowDomIsSupported;\n/** Checks whether the user's browser support Shadow DOM. */\n\nfunction _supportsShadowDom() {\n  if (shadowDomIsSupported == null) {\n    var head = typeof document !== 'undefined' ? document.head : null;\n    shadowDomIsSupported = !!(head && (head.createShadowRoot || head.attachShadow));\n  }\n\n  return shadowDomIsSupported;\n}\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\n\n\nfunction _getShadowRoot(element) {\n  if (_supportsShadowDom()) {\n    var rootNode = element.getRootNode ? element.getRootNode() : null; // Note that this should be caught by `_supportsShadowDom`, but some\n    // teams have been able to hit this code path on unsupported browsers.\n\n    if (typeof ShadowRoot !== 'undefined' && ShadowRoot && rootNode instanceof ShadowRoot) {\n      return rootNode;\n    }\n  }\n\n  return null;\n}\n/**\r\n * Gets the currently-focused element on the page while\r\n * also piercing through Shadow DOM boundaries.\r\n */\n\n\nfunction _getFocusedElementPierceShadowDom() {\n  var activeElement = typeof document !== 'undefined' && document ? document.activeElement : null;\n\n  while (activeElement && activeElement.shadowRoot) {\n    var newActiveElement = activeElement.shadowRoot.activeElement;\n\n    if (newActiveElement === activeElement) {\n      break;\n    } else {\n      activeElement = newActiveElement;\n    }\n  }\n\n  return activeElement;\n}\n/** Gets the target of an event while accounting for Shadow DOM. */\n\n\nfunction _getEventTarget(event) {\n  // If an event is bound outside the Shadow DOM, the `event.target` will\n  // point to the shadow root so we have to use `composedPath` instead.\n  return event.composedPath ? event.composedPath()[0] : event.target;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n\nvar testGlobals = typeof window !== 'undefined' ? window : {};\n/** Gets whether the code is currently running in a test environment. */\n\nfunction _isTestEnvironment() {\n  return typeof testGlobals.__karma__ !== 'undefined' && !!testGlobals.__karma__ || typeof testGlobals.jasmine !== 'undefined' && !!testGlobals.jasmine || typeof testGlobals.jest !== 'undefined' && !!testGlobals.jest || typeof testGlobals.Mocha !== 'undefined' && !!testGlobals.Mocha;\n}\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { Platform, PlatformModule, _getEventTarget, _getFocusedElementPierceShadowDom, _getShadowRoot, _isTestEnvironment, _supportsShadowDom, getRtlScrollAxisType, getSupportedInputTypes, normalizePassiveListenerOptions, supportsPassiveEventListeners, supportsScrollBehavior }; //# sourceMappingURL=platform.js.map","map":{"version":3,"sources":["C:/Users/HP/Desktop/CNS-Portal-ashwini15523/frontend/angular-ui/node_modules/@angular/cdk/fesm2015/platform.js"],"names":["i0","Injectable","Inject","PLATFORM_ID","NgModule","isPlatformBrowser","ɵngcc0","hasV8BreakIterator","Intl","v8BreakIterator","_a","Platform","_platformId","isBrowser","document","EDGE","test","navigator","userAgent","TRIDENT","BLINK","window","chrome","CSS","WEBKIT","IOS","FIREFOX","ANDROID","SAFARI","ɵfac","Platform_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","factory","token","providedIn","ctorParameters","type","Object","decorators","args","ngDevMode","ɵsetClassMetadata","PlatformModule","PlatformModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","supportedInputTypes","candidateInputTypes","getSupportedInputTypes","Set","featureTestInput","createElement","filter","value","setAttribute","supportsPassiveEvents","supportsPassiveEventListeners","addEventListener","defineProperty","get","normalizePassiveListenerOptions","options","capture","rtlScrollAxisType","scrollBehaviorSupported","supportsScrollBehavior","Element","documentElement","style","scrollToFunction","prototype","scrollTo","toString","getRtlScrollAxisType","scrollContainer","containerStyle","dir","width","overflow","visibility","pointerEvents","position","content","contentStyle","height","appendChild","body","scrollLeft","parentNode","removeChild","shadowDomIsSupported","_supportsShadowDom","head","createShadowRoot","attachShadow","_getShadowRoot","element","rootNode","getRootNode","ShadowRoot","_getFocusedElementPierceShadowDom","activeElement","shadowRoot","newActiveElement","_getEventTarget","event","composedPath","target","testGlobals","_isTestEnvironment","__karma__","jasmine","jest","Mocha"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\r\nimport { Injectable, Inject, PLATFORM_ID, NgModule } from '@angular/core';\r\nimport { isPlatformBrowser } from '@angular/common';\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n// Whether the current platform supports the V8 Break Iterator. The V8 check\r\n// is necessary to detect all Blink based browsers.\r\nimport * as ɵngcc0 from '@angular/core';\r\nlet hasV8BreakIterator;\r\n// We need a try/catch around the reference to `Intl`, because accessing it in some cases can\r\n// cause IE to throw. These cases are tied to particular versions of Windows and can happen if\r\n// the consumer is providing a polyfilled `Map`. See:\r\n// https://github.com/Microsoft/ChakraCore/issues/3189\r\n// https://github.com/angular/components/issues/15687\r\ntry {\r\n    hasV8BreakIterator = (typeof Intl !== 'undefined' && Intl.v8BreakIterator);\r\n}\r\ncatch (_a) {\r\n    hasV8BreakIterator = false;\r\n}\r\n/**\r\n * Service to detect the current platform by comparing the userAgent strings and\r\n * checking browser-specific global properties.\r\n */\r\nclass Platform {\r\n    constructor(_platformId) {\r\n        this._platformId = _platformId;\r\n        // We want to use the Angular platform check because if the Document is shimmed\r\n        // without the navigator, the following checks will fail. This is preferred because\r\n        // sometimes the Document may be shimmed without the user's knowledge or intention\r\n        /** Whether the Angular application is being rendered in the browser. */\r\n        this.isBrowser = this._platformId ?\r\n            isPlatformBrowser(this._platformId) : typeof document === 'object' && !!document;\r\n        /** Whether the current browser is Microsoft Edge. */\r\n        this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);\r\n        /** Whether the current rendering engine is Microsoft Trident. */\r\n        this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);\r\n        // EdgeHTML and Trident mock Blink specific things and need to be excluded from this check.\r\n        /** Whether the current rendering engine is Blink. */\r\n        this.BLINK = this.isBrowser && (!!(window.chrome || hasV8BreakIterator) &&\r\n            typeof CSS !== 'undefined' && !this.EDGE && !this.TRIDENT);\r\n        // Webkit is part of the userAgent in EdgeHTML, Blink and Trident. Therefore we need to\r\n        // ensure that Webkit runs standalone and is not used as another engine's base.\r\n        /** Whether the current rendering engine is WebKit. */\r\n        this.WEBKIT = this.isBrowser &&\r\n            /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;\r\n        /** Whether the current platform is Apple iOS. */\r\n        this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) &&\r\n            !('MSStream' in window);\r\n        // It's difficult to detect the plain Gecko engine, because most of the browsers identify\r\n        // them self as Gecko-like browsers and modify the userAgent's according to that.\r\n        // Since we only cover one explicit Firefox case, we can simply check for Firefox\r\n        // instead of having an unstable check for Gecko.\r\n        /** Whether the current browser is Firefox. */\r\n        this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);\r\n        /** Whether the current platform is Android. */\r\n        // Trident on mobile adds the android platform to the userAgent to trick detections.\r\n        this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;\r\n        // Safari browsers will include the Safari keyword in their userAgent. Some browsers may fake\r\n        // this and just place the Safari keyword in the userAgent. To be more safe about Safari every\r\n        // Safari browser should also use Webkit as its layout engine.\r\n        /** Whether the current browser is Safari. */\r\n        this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;\r\n    }\r\n}\r\nPlatform.ɵfac = function Platform_Factory(t) { return new (t || Platform)(ɵngcc0.ɵɵinject(PLATFORM_ID)); };\r\nPlatform.ɵprov = i0.ɵɵdefineInjectable({ factory: function Platform_Factory() { return new Platform(i0.ɵɵinject(i0.PLATFORM_ID)); }, token: Platform, providedIn: \"root\" });\r\nPlatform.ctorParameters = () => [\r\n    { type: Object, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }\r\n];\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(Platform, [{\r\n        type: Injectable,\r\n        args: [{ providedIn: 'root' }]\r\n    }], function () { return [{ type: Object, decorators: [{\r\n                type: Inject,\r\n                args: [PLATFORM_ID]\r\n            }] }]; }, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nclass PlatformModule {\r\n}\r\nPlatformModule.ɵfac = function PlatformModule_Factory(t) { return new (t || PlatformModule)(); };\r\nPlatformModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: PlatformModule });\r\nPlatformModule.ɵinj = ɵngcc0.ɵɵdefineInjector({});\r\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(PlatformModule, [{\r\n        type: NgModule,\r\n        args: [{}]\r\n    }], null, null); })();\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Cached result Set of input types support by the current browser. */\r\nlet supportedInputTypes;\r\n/** Types of `<input>` that *might* be supported. */\r\nconst candidateInputTypes = [\r\n    // `color` must come first. Chrome 56 shows a warning if we change the type to `color` after\r\n    // first changing it to something else:\r\n    // The specified value \"\" does not conform to the required format.\r\n    // The format is \"#rrggbb\" where rr, gg, bb are two-digit hexadecimal numbers.\r\n    'color',\r\n    'button',\r\n    'checkbox',\r\n    'date',\r\n    'datetime-local',\r\n    'email',\r\n    'file',\r\n    'hidden',\r\n    'image',\r\n    'month',\r\n    'number',\r\n    'password',\r\n    'radio',\r\n    'range',\r\n    'reset',\r\n    'search',\r\n    'submit',\r\n    'tel',\r\n    'text',\r\n    'time',\r\n    'url',\r\n    'week',\r\n];\r\n/** @returns The input types supported by this browser. */\r\nfunction getSupportedInputTypes() {\r\n    // Result is cached.\r\n    if (supportedInputTypes) {\r\n        return supportedInputTypes;\r\n    }\r\n    // We can't check if an input type is not supported until we're on the browser, so say that\r\n    // everything is supported when not on the browser. We don't use `Platform` here since it's\r\n    // just a helper function and can't inject it.\r\n    if (typeof document !== 'object' || !document) {\r\n        supportedInputTypes = new Set(candidateInputTypes);\r\n        return supportedInputTypes;\r\n    }\r\n    let featureTestInput = document.createElement('input');\r\n    supportedInputTypes = new Set(candidateInputTypes.filter(value => {\r\n        featureTestInput.setAttribute('type', value);\r\n        return featureTestInput.type === value;\r\n    }));\r\n    return supportedInputTypes;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Cached result of whether the user's browser supports passive event listeners. */\r\nlet supportsPassiveEvents;\r\n/**\r\n * Checks whether the user's browser supports passive event listeners.\r\n * See: https://github.com/WICG/EventListenerOptions/blob/gh-pages/explainer.md\r\n */\r\nfunction supportsPassiveEventListeners() {\r\n    if (supportsPassiveEvents == null && typeof window !== 'undefined') {\r\n        try {\r\n            window.addEventListener('test', null, Object.defineProperty({}, 'passive', {\r\n                get: () => supportsPassiveEvents = true\r\n            }));\r\n        }\r\n        finally {\r\n            supportsPassiveEvents = supportsPassiveEvents || false;\r\n        }\r\n    }\r\n    return supportsPassiveEvents;\r\n}\r\n/**\r\n * Normalizes an `AddEventListener` object to something that can be passed\r\n * to `addEventListener` on any browser, no matter whether it supports the\r\n * `options` parameter.\r\n * @param options Object to be normalized.\r\n */\r\nfunction normalizePassiveListenerOptions(options) {\r\n    return supportsPassiveEventListeners() ? options : !!options.capture;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n/** Cached result of the way the browser handles the horizontal scroll axis in RTL mode. */\r\nlet rtlScrollAxisType;\r\n/** Cached result of the check that indicates whether the browser supports scroll behaviors. */\r\nlet scrollBehaviorSupported;\r\n/** Check whether the browser supports scroll behaviors. */\r\nfunction supportsScrollBehavior() {\r\n    if (scrollBehaviorSupported == null) {\r\n        // If we're not in the browser, it can't be supported. Also check for `Element`, because\r\n        // some projects stub out the global `document` during SSR which can throw us off.\r\n        if (typeof document !== 'object' || !document || typeof Element !== 'function' || !Element) {\r\n            scrollBehaviorSupported = false;\r\n            return scrollBehaviorSupported;\r\n        }\r\n        // If the element can have a `scrollBehavior` style, we can be sure that it's supported.\r\n        if ('scrollBehavior' in document.documentElement.style) {\r\n            scrollBehaviorSupported = true;\r\n        }\r\n        else {\r\n            // At this point we have 3 possibilities: `scrollTo` isn't supported at all, it's\r\n            // supported but it doesn't handle scroll behavior, or it has been polyfilled.\r\n            const scrollToFunction = Element.prototype.scrollTo;\r\n            if (scrollToFunction) {\r\n                // We can detect if the function has been polyfilled by calling `toString` on it. Native\r\n                // functions are obfuscated using `[native code]`, whereas if it was overwritten we'd get\r\n                // the actual function source. Via https://davidwalsh.name/detect-native-function. Consider\r\n                // polyfilled functions as supporting scroll behavior.\r\n                scrollBehaviorSupported = !/\\{\\s*\\[native code\\]\\s*\\}/.test(scrollToFunction.toString());\r\n            }\r\n            else {\r\n                scrollBehaviorSupported = false;\r\n            }\r\n        }\r\n    }\r\n    return scrollBehaviorSupported;\r\n}\r\n/**\r\n * Checks the type of RTL scroll axis used by this browser. As of time of writing, Chrome is NORMAL,\r\n * Firefox & Safari are NEGATED, and IE & Edge are INVERTED.\r\n */\r\nfunction getRtlScrollAxisType() {\r\n    // We can't check unless we're on the browser. Just assume 'normal' if we're not.\r\n    if (typeof document !== 'object' || !document) {\r\n        return 0 /* NORMAL */;\r\n    }\r\n    if (rtlScrollAxisType == null) {\r\n        // Create a 1px wide scrolling container and a 2px wide content element.\r\n        const scrollContainer = document.createElement('div');\r\n        const containerStyle = scrollContainer.style;\r\n        scrollContainer.dir = 'rtl';\r\n        containerStyle.width = '1px';\r\n        containerStyle.overflow = 'auto';\r\n        containerStyle.visibility = 'hidden';\r\n        containerStyle.pointerEvents = 'none';\r\n        containerStyle.position = 'absolute';\r\n        const content = document.createElement('div');\r\n        const contentStyle = content.style;\r\n        contentStyle.width = '2px';\r\n        contentStyle.height = '1px';\r\n        scrollContainer.appendChild(content);\r\n        document.body.appendChild(scrollContainer);\r\n        rtlScrollAxisType = 0 /* NORMAL */;\r\n        // The viewport starts scrolled all the way to the right in RTL mode. If we are in a NORMAL\r\n        // browser this would mean that the scrollLeft should be 1. If it's zero instead we know we're\r\n        // dealing with one of the other two types of browsers.\r\n        if (scrollContainer.scrollLeft === 0) {\r\n            // In a NEGATED browser the scrollLeft is always somewhere in [-maxScrollAmount, 0]. For an\r\n            // INVERTED browser it is always somewhere in [0, maxScrollAmount]. We can determine which by\r\n            // setting to the scrollLeft to 1. This is past the max for a NEGATED browser, so it will\r\n            // return 0 when we read it again.\r\n            scrollContainer.scrollLeft = 1;\r\n            rtlScrollAxisType =\r\n                scrollContainer.scrollLeft === 0 ? 1 /* NEGATED */ : 2 /* INVERTED */;\r\n        }\r\n        scrollContainer.parentNode.removeChild(scrollContainer);\r\n    }\r\n    return rtlScrollAxisType;\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nlet shadowDomIsSupported;\r\n/** Checks whether the user's browser support Shadow DOM. */\r\nfunction _supportsShadowDom() {\r\n    if (shadowDomIsSupported == null) {\r\n        const head = typeof document !== 'undefined' ? document.head : null;\r\n        shadowDomIsSupported = !!(head && (head.createShadowRoot || head.attachShadow));\r\n    }\r\n    return shadowDomIsSupported;\r\n}\r\n/** Gets the shadow root of an element, if supported and the element is inside the Shadow DOM. */\r\nfunction _getShadowRoot(element) {\r\n    if (_supportsShadowDom()) {\r\n        const rootNode = element.getRootNode ? element.getRootNode() : null;\r\n        // Note that this should be caught by `_supportsShadowDom`, but some\r\n        // teams have been able to hit this code path on unsupported browsers.\r\n        if (typeof ShadowRoot !== 'undefined' && ShadowRoot && rootNode instanceof ShadowRoot) {\r\n            return rootNode;\r\n        }\r\n    }\r\n    return null;\r\n}\r\n/**\r\n * Gets the currently-focused element on the page while\r\n * also piercing through Shadow DOM boundaries.\r\n */\r\nfunction _getFocusedElementPierceShadowDom() {\r\n    let activeElement = typeof document !== 'undefined' && document ?\r\n        document.activeElement : null;\r\n    while (activeElement && activeElement.shadowRoot) {\r\n        const newActiveElement = activeElement.shadowRoot.activeElement;\r\n        if (newActiveElement === activeElement) {\r\n            break;\r\n        }\r\n        else {\r\n            activeElement = newActiveElement;\r\n        }\r\n    }\r\n    return activeElement;\r\n}\r\n/** Gets the target of an event while accounting for Shadow DOM. */\r\nfunction _getEventTarget(event) {\r\n    // If an event is bound outside the Shadow DOM, the `event.target` will\r\n    // point to the shadow root so we have to use `composedPath` instead.\r\n    return (event.composedPath ? event.composedPath()[0] : event.target);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\nconst testGlobals = (typeof window !== 'undefined' ? window : {});\r\n/** Gets whether the code is currently running in a test environment. */\r\nfunction _isTestEnvironment() {\r\n    return (typeof testGlobals.__karma__ !== 'undefined' && !!testGlobals.__karma__) ||\r\n        (typeof testGlobals.jasmine !== 'undefined' && !!testGlobals.jasmine) ||\r\n        (typeof testGlobals.jest !== 'undefined' && !!testGlobals.jest) ||\r\n        (typeof testGlobals.Mocha !== 'undefined' && !!testGlobals.Mocha);\r\n}\r\n\r\n/**\r\n * @license\r\n * Copyright Google LLC All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an MIT-style license that can be\r\n * found in the LICENSE file at https://angular.io/license\r\n */\r\n\r\n/**\r\n * Generated bundle index. Do not edit.\r\n */\r\n\r\nexport { Platform, PlatformModule, _getEventTarget, _getFocusedElementPierceShadowDom, _getShadowRoot, _isTestEnvironment, _supportsShadowDom, getRtlScrollAxisType, getSupportedInputTypes, normalizePassiveListenerOptions, supportsPassiveEventListeners, supportsScrollBehavior };\r\n\r\n//# sourceMappingURL=platform.js.map"]},"metadata":{},"sourceType":"module"}