{"ast":null,"code":"import _classCallCheck from \"C:/Users/HP/Desktop/new cns-portal/CNS-Portal/frontend/angular-ui/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/HP/Desktop/new cns-portal/CNS-Portal/frontend/angular-ui/node_modules/@babel/runtime/helpers/esm/createClass\";\n\n/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { EventSubject } from '@cds/core/internal';\nimport { unknownIcon } from './shapes/unknown.js';\nimport { addIcons as _addIcons, setIconAliases } from './utils/icon.service-helpers.js';\nvar iconUpdates = new EventSubject();\nvar registry = {\n  unknown: unknownIcon[1]\n};\nvar iconRegistry = new Proxy(registry, {\n  set: function set(target, key, value) {\n    iconUpdates.emit(key);\n    target[key] = value;\n    return true;\n  }\n});\n/**\n * ClarityIcons is a static class that gives users the ability to interact with\n * the icon registry. This includes capabilities to add, retrieve, or alias icons\n * in the registry.\n *\n * @privateRemarks\n *\n * The icon registry is private to the module. There is no way to access it directly\n * outside of the module.\n *\n */\n// @dynamic\n\nexport var ClarityIcons = /*#__PURE__*/function () {\n  function ClarityIcons() {\n    _classCallCheck(this, ClarityIcons);\n  }\n\n  _createClass(ClarityIcons, null, [{\n    key: \"registry\",\n    get:\n    /**\n     * Returns a readonly reference of the icon registry.\n     */\n    function get() {\n      return iconRegistry;\n    }\n  }, {\n    key: \"addIcons\",\n    value: function addIcons() {\n      for (var _len = arguments.length, shapes = new Array(_len), _key = 0; _key < _len; _key++) {\n        shapes[_key] = arguments[_key];\n      }\n\n      _addIcons(shapes, iconRegistry);\n    }\n    /**\n     * @description\n     * Use `addIcons` instead of `addAliases`\n     *\n     * This method is a backwords compatibility function to the old API\n     *\n     * The team will revisit this method for possible deprecation.\n     */\n\n  }, {\n    key: \"addAliases\",\n    value: function addAliases() {\n      for (var _len2 = arguments.length, aliases = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        aliases[_key2] = arguments[_key2];\n      }\n\n      aliases.forEach(function (alias) {\n        return setIconAliases(alias, iconRegistry);\n      });\n    }\n  }, {\n    key: \"getIconNameFromShape\",\n    value: function getIconNameFromShape(iconShape) {\n      return iconShape[0];\n    }\n  }]);\n\n  return ClarityIcons;\n}();\n/**\n * Subscribe to receive updates when icons are added or updated\n */\n\nClarityIcons.iconUpdates = iconUpdates.toEventObservable(); //# sourceMappingURL=icon.service.js.map","map":{"version":3,"sources":["C:/Users/HP/Desktop/new cns-portal/CNS-Portal/frontend/angular-ui/node_modules/@cds/core/icon/icon.service.js"],"names":["EventSubject","unknownIcon","addIcons","setIconAliases","iconUpdates","registry","unknown","iconRegistry","Proxy","set","target","key","value","emit","ClarityIcons","shapes","aliases","forEach","alias","iconShape","toEventObservable"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,QAA6B,oBAA7B;AACA,SAASC,WAAT,QAA4B,qBAA5B;AACA,SAASC,QAAQ,IAARA,SAAT,EAAmBC,cAAnB,QAAyC,iCAAzC;AACA,IAAMC,WAAW,GAAG,IAAIJ,YAAJ,EAApB;AACA,IAAMK,QAAQ,GAAG;AAAEC,EAAAA,OAAO,EAAEL,WAAW,CAAC,CAAD;AAAtB,CAAjB;AACA,IAAMM,YAAY,GAAG,IAAIC,KAAJ,CAAUH,QAAV,EAAoB;AACrCI,EAAAA,GAAG,EAAE,aAACC,MAAD,EAASC,GAAT,EAAcC,KAAd,EAAwB;AACzBR,IAAAA,WAAW,CAACS,IAAZ,CAAiBF,GAAjB;AACAD,IAAAA,MAAM,CAACC,GAAD,CAAN,GAAcC,KAAd;AACA,WAAO,IAAP;AACH;AALoC,CAApB,CAArB;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,WAAaE,YAAb;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AACI;AACJ;AACA;AACI,mBAAsB;AAClB,aAAOP,YAAP;AACH;AANL;AAAA;AAAA,WAOI,oBAA2B;AAAA,wCAARQ,MAAQ;AAARA,QAAAA,MAAQ;AAAA;;AACvBb,MAAAA,SAAQ,CAACa,MAAD,EAASR,YAAT,CAAR;AACH;AACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;AAjBA;AAAA;AAAA,WAkBI,sBAA8B;AAAA,yCAATS,OAAS;AAATA,QAAAA,OAAS;AAAA;;AAC1BA,MAAAA,OAAO,CAACC,OAAR,CAAgB,UAAAC,KAAK;AAAA,eAAIf,cAAc,CAACe,KAAD,EAAQX,YAAR,CAAlB;AAAA,OAArB;AACH;AApBL;AAAA;AAAA,WAqBI,8BAA4BY,SAA5B,EAAuC;AACnC,aAAOA,SAAS,CAAC,CAAD,CAAhB;AACH;AAvBL;;AAAA;AAAA;AAyBA;AACA;AACA;;AACAL,YAAY,CAACV,WAAb,GAA2BA,WAAW,CAACgB,iBAAZ,EAA3B,C,CACA","sourcesContent":["/*\n * Copyright (c) 2016-2020 VMware, Inc. All Rights Reserved.\n * This software is released under MIT license.\n * The full license information can be found in LICENSE in the root directory of this project.\n */\nimport { EventSubject } from '@cds/core/internal';\nimport { unknownIcon } from './shapes/unknown.js';\nimport { addIcons, setIconAliases } from './utils/icon.service-helpers.js';\nconst iconUpdates = new EventSubject();\nconst registry = { unknown: unknownIcon[1] };\nconst iconRegistry = new Proxy(registry, {\n    set: (target, key, value) => {\n        iconUpdates.emit(key);\n        target[key] = value;\n        return true;\n    },\n});\n/**\n * ClarityIcons is a static class that gives users the ability to interact with\n * the icon registry. This includes capabilities to add, retrieve, or alias icons\n * in the registry.\n *\n * @privateRemarks\n *\n * The icon registry is private to the module. There is no way to access it directly\n * outside of the module.\n *\n */\n// @dynamic\nexport class ClarityIcons {\n    /**\n     * Returns a readonly reference of the icon registry.\n     */\n    static get registry() {\n        return iconRegistry;\n    }\n    static addIcons(...shapes) {\n        addIcons(shapes, iconRegistry);\n    }\n    /**\n     * @description\n     * Use `addIcons` instead of `addAliases`\n     *\n     * This method is a backwords compatibility function to the old API\n     *\n     * The team will revisit this method for possible deprecation.\n     */\n    static addAliases(...aliases) {\n        aliases.forEach(alias => setIconAliases(alias, iconRegistry));\n    }\n    static getIconNameFromShape(iconShape) {\n        return iconShape[0];\n    }\n}\n/**\n * Subscribe to receive updates when icons are added or updated\n */\nClarityIcons.iconUpdates = iconUpdates.toEventObservable();\n//# sourceMappingURL=icon.service.js.map"]},"metadata":{},"sourceType":"module"}