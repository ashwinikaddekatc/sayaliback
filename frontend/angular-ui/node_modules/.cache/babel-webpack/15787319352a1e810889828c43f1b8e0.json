{"ast":null,"code":"import _classCallCheck from \"C:/Users/HP/Desktop/new cns-portal/CNS-Portal/frontend/angular-ui/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:/Users/HP/Desktop/new cns-portal/CNS-Portal/frontend/angular-ui/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { EventEmitter, Component, forwardRef, ChangeDetectionStrategy, KeyValueDiffers, NgZone, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport * as ɵngcc0 from '@angular/core';\nvar _c0 = [\"ref\"];\n\nfunction normalizeLineEndings(str) {\n  if (!str) {\n    return str;\n  }\n\n  return str.replace(/\\r\\n|\\r/g, '\\n');\n}\n\nvar CodemirrorComponent = /*#__PURE__*/function () {\n  function CodemirrorComponent(_differs, _ngZone) {\n    _classCallCheck(this, CodemirrorComponent);\n\n    this._differs = _differs;\n    this._ngZone = _ngZone;\n    /* class applied to the created textarea */\n\n    this.className = '';\n    /* name applied to the created textarea */\n\n    this.name = 'codemirror';\n    /* autofocus setting applied to the created textarea */\n\n    this.autoFocus = false;\n    /* preserve previous scroll position after updating value */\n\n    this.preserveScrollPosition = false;\n    /* called when the text cursor is moved */\n\n    this.cursorActivity = new EventEmitter();\n    /* called when the editor is focused or loses focus */\n\n    this.focusChange = new EventEmitter();\n    /* called when the editor is scrolled */\n    // tslint:disable-next-line:no-output-native\n\n    this.scroll = new EventEmitter();\n    /* called when file(s) are dropped */\n    // tslint:disable-next-line:no-output-native\n\n    this.drop = new EventEmitter();\n    this.value = '';\n    this.disabled = false;\n    this.isFocused = false;\n    /** Implemented as part of ControlValueAccessor. */\n\n    this.onChange = function (_) {};\n    /** Implemented as part of ControlValueAccessor. */\n\n\n    this.onTouched = function () {};\n  }\n  /**\n   * set options for codemirror\n   * @link http://codemirror.net/doc/manual.html#config\n   */\n\n\n  _createClass(CodemirrorComponent, [{\n    key: \"options\",\n    set: function set(value) {\n      this._options = value;\n\n      if (!this._differ && value) {\n        this._differ = this._differs.find(value).create();\n      }\n    }\n  }, {\n    key: \"codeMirrorGlobal\",\n    get: function get() {\n      if (this._codeMirror) {\n        return this._codeMirror;\n      }\n\n      this._codeMirror = typeof CodeMirror !== 'undefined' ? CodeMirror : require('codemirror');\n      return this._codeMirror;\n    }\n  }, {\n    key: \"ngAfterViewInit\",\n    value: function ngAfterViewInit() {\n      var _this = this;\n\n      if (!this.ref) {\n        return;\n      } // in order to allow for universal rendering, we import Codemirror runtime with `require` to prevent node errors\n\n\n      this._ngZone.runOutsideAngular(function () {\n        _this.codeMirror = _this.codeMirrorGlobal.fromTextArea(_this.ref.nativeElement, _this._options);\n\n        _this.codeMirror.on('cursorActivity', function (cm) {\n          return _this._ngZone.run(function () {\n            return _this.cursorActive(cm);\n          });\n        });\n\n        _this.codeMirror.on('scroll', _this.scrollChanged.bind(_this));\n\n        _this.codeMirror.on('blur', function () {\n          return _this._ngZone.run(function () {\n            return _this.focusChanged(false);\n          });\n        });\n\n        _this.codeMirror.on('focus', function () {\n          return _this._ngZone.run(function () {\n            return _this.focusChanged(true);\n          });\n        });\n\n        _this.codeMirror.on('change', function (cm, change) {\n          return _this._ngZone.run(function () {\n            return _this.codemirrorValueChanged(cm, change);\n          });\n        });\n\n        _this.codeMirror.on('drop', function (cm, e) {\n          _this._ngZone.run(function () {\n            return _this.dropFiles(cm, e);\n          });\n        });\n\n        _this.codeMirror.setValue(_this.value);\n      });\n    }\n  }, {\n    key: \"ngDoCheck\",\n    value: function ngDoCheck() {\n      var _this2 = this;\n\n      if (!this._differ) {\n        return;\n      } // check options have not changed\n\n\n      var changes = this._differ.diff(this._options);\n\n      if (changes) {\n        changes.forEachChangedItem(function (option) {\n          return _this2.setOptionIfChanged(option.key, option.currentValue);\n        });\n        changes.forEachAddedItem(function (option) {\n          return _this2.setOptionIfChanged(option.key, option.currentValue);\n        });\n        changes.forEachRemovedItem(function (option) {\n          return _this2.setOptionIfChanged(option.key, option.currentValue);\n        });\n      }\n    }\n  }, {\n    key: \"ngOnDestroy\",\n    value: function ngOnDestroy() {\n      // is there a lighter-weight way to remove the cm instance?\n      if (this.codeMirror) {\n        this.codeMirror.toTextArea();\n      }\n    }\n  }, {\n    key: \"codemirrorValueChanged\",\n    value: function codemirrorValueChanged(cm, change) {\n      if (change.origin !== 'setValue') {\n        this.value = cm.getValue();\n        this.onChange(this.value);\n      }\n    }\n  }, {\n    key: \"setOptionIfChanged\",\n    value: function setOptionIfChanged(optionName, newValue) {\n      if (!this.codeMirror) {\n        return;\n      } // cast to any to handle strictly typed option names\n      // could possibly import settings strings available in the future\n\n\n      this.codeMirror.setOption(optionName, newValue);\n    }\n  }, {\n    key: \"focusChanged\",\n    value: function focusChanged(focused) {\n      this.onTouched();\n      this.isFocused = focused;\n      this.focusChange.emit(focused);\n    }\n  }, {\n    key: \"scrollChanged\",\n    value: function scrollChanged(cm) {\n      this.scroll.emit(cm.getScrollInfo());\n    }\n  }, {\n    key: \"cursorActive\",\n    value: function cursorActive(cm) {\n      this.cursorActivity.emit(cm);\n    }\n  }, {\n    key: \"dropFiles\",\n    value: function dropFiles(cm, e) {\n      this.drop.emit([cm, e]);\n    }\n    /** Implemented as part of ControlValueAccessor. */\n\n  }, {\n    key: \"writeValue\",\n    value: function writeValue(value) {\n      if (value === null || value === undefined) {\n        return;\n      }\n\n      if (!this.codeMirror) {\n        this.value = value;\n        return;\n      }\n\n      var cur = this.codeMirror.getValue();\n\n      if (value !== cur && normalizeLineEndings(cur) !== normalizeLineEndings(value)) {\n        this.value = value;\n\n        if (this.preserveScrollPosition) {\n          var prevScrollPosition = this.codeMirror.getScrollInfo();\n          this.codeMirror.setValue(this.value);\n          this.codeMirror.scrollTo(prevScrollPosition.left, prevScrollPosition.top);\n        } else {\n          this.codeMirror.setValue(this.value);\n        }\n      }\n    }\n    /** Implemented as part of ControlValueAccessor. */\n\n  }, {\n    key: \"registerOnChange\",\n    value: function registerOnChange(fn) {\n      this.onChange = fn;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n\n  }, {\n    key: \"registerOnTouched\",\n    value: function registerOnTouched(fn) {\n      this.onTouched = fn;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n\n  }, {\n    key: \"setDisabledState\",\n    value: function setDisabledState(isDisabled) {\n      this.disabled = isDisabled;\n      this.setOptionIfChanged('readOnly', this.disabled);\n    }\n  }]);\n\n  return CodemirrorComponent;\n}();\n\nCodemirrorComponent.ɵfac = function CodemirrorComponent_Factory(t) {\n  return new (t || CodemirrorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.KeyValueDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone));\n};\n\nCodemirrorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({\n  type: CodemirrorComponent,\n  selectors: [[\"ngx-codemirror\"]],\n  viewQuery: function CodemirrorComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵviewQuery(_c0, 3);\n    }\n\n    if (rf & 2) {\n      var _t;\n\n      ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ref = _t.first);\n    }\n  },\n  inputs: {\n    className: \"className\",\n    name: \"name\",\n    autoFocus: \"autoFocus\",\n    preserveScrollPosition: \"preserveScrollPosition\",\n    options: \"options\"\n  },\n  outputs: {\n    cursorActivity: \"cursorActivity\",\n    focusChange: \"focusChange\",\n    scroll: \"scroll\",\n    drop: \"drop\"\n  },\n  features: [ɵngcc0.ɵɵProvidersFeature([{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(function () {\n      return CodemirrorComponent;\n    }),\n    multi: true\n  }])],\n  decls: 3,\n  vars: 7,\n  consts: [[\"autocomplete\", \"off\", 3, \"name\", \"autofocus\"], [\"ref\", \"\"]],\n  template: function CodemirrorComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      ɵngcc0.ɵɵelementStart(0, \"textarea\", 0, 1);\n      ɵngcc0.ɵɵtext(2, \"    \");\n      ɵngcc0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      ɵngcc0.ɵɵclassMapInterpolate1(\"ngx-codemirror \", ctx.className, \"\");\n      ɵngcc0.ɵɵclassProp(\"ngx-codemirror--focused\", ctx.isFocused);\n      ɵngcc0.ɵɵproperty(\"name\", ctx.name)(\"autofocus\", ctx.autoFocus);\n    }\n  },\n  encapsulation: 2,\n  changeDetection: 0\n});\n\nCodemirrorComponent.ctorParameters = function () {\n  return [{\n    type: KeyValueDiffers\n  }, {\n    type: NgZone\n  }];\n};\n\nCodemirrorComponent.propDecorators = {\n  className: [{\n    type: Input\n  }],\n  name: [{\n    type: Input\n  }],\n  autoFocus: [{\n    type: Input\n  }],\n  options: [{\n    type: Input\n  }],\n  preserveScrollPosition: [{\n    type: Input\n  }],\n  cursorActivity: [{\n    type: Output\n  }],\n  focusChange: [{\n    type: Output\n  }],\n  scroll: [{\n    type: Output\n  }],\n  drop: [{\n    type: Output\n  }],\n  ref: [{\n    type: ViewChild,\n    args: ['ref', {\n      static: true\n    }]\n  }]\n};\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CodemirrorComponent, [{\n    type: Component,\n    args: [{\n      selector: 'ngx-codemirror',\n      template: \"\\n    <textarea\\n      [name]=\\\"name\\\"\\n      class=\\\"ngx-codemirror {{ className }}\\\"\\n      [class.ngx-codemirror--focused]=\\\"isFocused\\\"\\n      autocomplete=\\\"off\\\"\\n      [autofocus]=\\\"autoFocus\\\"\\n      #ref\\n    >\\n    </textarea>\\n  \",\n      providers: [{\n        provide: NG_VALUE_ACCESSOR,\n        useExisting: forwardRef(function () {\n          return CodemirrorComponent;\n        }),\n        multi: true\n      }],\n      preserveWhitespaces: false,\n      changeDetection: ChangeDetectionStrategy.OnPush\n    }]\n  }], function () {\n    return [{\n      type: ɵngcc0.KeyValueDiffers\n    }, {\n      type: ɵngcc0.NgZone\n    }];\n  }, {\n    className: [{\n      type: Input\n    }],\n    name: [{\n      type: Input\n    }],\n    autoFocus: [{\n      type: Input\n    }],\n    preserveScrollPosition: [{\n      type: Input\n    }],\n    cursorActivity: [{\n      type: Output\n    }],\n    focusChange: [{\n      type: Output\n    }],\n    scroll: [{\n      type: Output\n    }],\n    drop: [{\n      type: Output\n    }],\n    options: [{\n      type: Input\n    }],\n    ref: [{\n      type: ViewChild,\n      args: ['ref', {\n        static: true\n      }]\n    }]\n  });\n})();\n\nvar CodemirrorModule = function CodemirrorModule() {\n  _classCallCheck(this, CodemirrorModule);\n};\n\nCodemirrorModule.ɵfac = function CodemirrorModule_Factory(t) {\n  return new (t || CodemirrorModule)();\n};\n\nCodemirrorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({\n  type: CodemirrorModule\n});\nCodemirrorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CodemirrorModule, {\n    declarations: [CodemirrorComponent],\n    exports: [CodemirrorComponent]\n  });\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CodemirrorModule, [{\n    type: NgModule,\n    args: [{\n      exports: [CodemirrorComponent],\n      declarations: [CodemirrorComponent]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { CodemirrorComponent, CodemirrorModule }; //# sourceMappingURL=ctrl-ngx-codemirror.js.map","map":{"version":3,"sources":["C:/Users/HP/Desktop/new cns-portal/CNS-Portal/frontend/angular-ui/node_modules/@ctrl/ngx-codemirror/fesm2015/ctrl-ngx-codemirror.js"],"names":["EventEmitter","Component","forwardRef","ChangeDetectionStrategy","KeyValueDiffers","NgZone","Input","Output","ViewChild","NgModule","NG_VALUE_ACCESSOR","ɵngcc0","_c0","normalizeLineEndings","str","replace","CodemirrorComponent","_differs","_ngZone","className","name","autoFocus","preserveScrollPosition","cursorActivity","focusChange","scroll","drop","value","disabled","isFocused","onChange","_","onTouched","_options","_differ","find","create","_codeMirror","CodeMirror","require","ref","runOutsideAngular","codeMirror","codeMirrorGlobal","fromTextArea","nativeElement","on","cm","run","cursorActive","scrollChanged","bind","focusChanged","change","codemirrorValueChanged","e","dropFiles","setValue","changes","diff","forEachChangedItem","option","setOptionIfChanged","key","currentValue","forEachAddedItem","forEachRemovedItem","toTextArea","origin","getValue","optionName","newValue","setOption","focused","emit","getScrollInfo","undefined","cur","prevScrollPosition","scrollTo","left","top","fn","isDisabled","ɵfac","CodemirrorComponent_Factory","t","ɵɵdirectiveInject","ɵcmp","ɵɵdefineComponent","type","selectors","viewQuery","CodemirrorComponent_Query","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","inputs","options","outputs","features","ɵɵProvidersFeature","provide","useExisting","multi","decls","vars","consts","template","CodemirrorComponent_Template","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵclassMapInterpolate1","ɵɵclassProp","ɵɵproperty","encapsulation","changeDetection","ctorParameters","propDecorators","args","static","ngDevMode","ɵsetClassMetadata","selector","providers","preserveWhitespaces","OnPush","CodemirrorModule","CodemirrorModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","ngJitMode","ɵɵsetNgModuleScope","declarations","exports"],"mappings":"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","sourcesContent":["import { EventEmitter, Component, forwardRef, ChangeDetectionStrategy, KeyValueDiffers, NgZone, Input, Output, ViewChild, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\n\nimport * as ɵngcc0 from '@angular/core';\n\nconst _c0 = [\"ref\"];\nfunction normalizeLineEndings(str) {\n    if (!str) {\n        return str;\n    }\n    return str.replace(/\\r\\n|\\r/g, '\\n');\n}\nclass CodemirrorComponent {\n    constructor(_differs, _ngZone) {\n        this._differs = _differs;\n        this._ngZone = _ngZone;\n        /* class applied to the created textarea */\n        this.className = '';\n        /* name applied to the created textarea */\n        this.name = 'codemirror';\n        /* autofocus setting applied to the created textarea */\n        this.autoFocus = false;\n        /* preserve previous scroll position after updating value */\n        this.preserveScrollPosition = false;\n        /* called when the text cursor is moved */\n        this.cursorActivity = new EventEmitter();\n        /* called when the editor is focused or loses focus */\n        this.focusChange = new EventEmitter();\n        /* called when the editor is scrolled */\n        // tslint:disable-next-line:no-output-native\n        this.scroll = new EventEmitter();\n        /* called when file(s) are dropped */\n        // tslint:disable-next-line:no-output-native\n        this.drop = new EventEmitter();\n        this.value = '';\n        this.disabled = false;\n        this.isFocused = false;\n        /** Implemented as part of ControlValueAccessor. */\n        this.onChange = (_) => { };\n        /** Implemented as part of ControlValueAccessor. */\n        this.onTouched = () => { };\n    }\n    /**\n     * set options for codemirror\n     * @link http://codemirror.net/doc/manual.html#config\n     */\n    set options(value) {\n        this._options = value;\n        if (!this._differ && value) {\n            this._differ = this._differs.find(value).create();\n        }\n    }\n    get codeMirrorGlobal() {\n        if (this._codeMirror) {\n            return this._codeMirror;\n        }\n        this._codeMirror = typeof CodeMirror !== 'undefined' ? CodeMirror : require('codemirror');\n        return this._codeMirror;\n    }\n    ngAfterViewInit() {\n        if (!this.ref) {\n            return;\n        }\n        // in order to allow for universal rendering, we import Codemirror runtime with `require` to prevent node errors\n        this._ngZone.runOutsideAngular(() => {\n            this.codeMirror = this.codeMirrorGlobal.fromTextArea(this.ref.nativeElement, this._options);\n            this.codeMirror.on('cursorActivity', cm => this._ngZone.run(() => this.cursorActive(cm)));\n            this.codeMirror.on('scroll', this.scrollChanged.bind(this));\n            this.codeMirror.on('blur', () => this._ngZone.run(() => this.focusChanged(false)));\n            this.codeMirror.on('focus', () => this._ngZone.run(() => this.focusChanged(true)));\n            this.codeMirror.on('change', (cm, change) => this._ngZone.run(() => this.codemirrorValueChanged(cm, change)));\n            this.codeMirror.on('drop', (cm, e) => {\n                this._ngZone.run(() => this.dropFiles(cm, e));\n            });\n            this.codeMirror.setValue(this.value);\n        });\n    }\n    ngDoCheck() {\n        if (!this._differ) {\n            return;\n        }\n        // check options have not changed\n        const changes = this._differ.diff(this._options);\n        if (changes) {\n            changes.forEachChangedItem(option => this.setOptionIfChanged(option.key, option.currentValue));\n            changes.forEachAddedItem(option => this.setOptionIfChanged(option.key, option.currentValue));\n            changes.forEachRemovedItem(option => this.setOptionIfChanged(option.key, option.currentValue));\n        }\n    }\n    ngOnDestroy() {\n        // is there a lighter-weight way to remove the cm instance?\n        if (this.codeMirror) {\n            this.codeMirror.toTextArea();\n        }\n    }\n    codemirrorValueChanged(cm, change) {\n        if (change.origin !== 'setValue') {\n            this.value = cm.getValue();\n            this.onChange(this.value);\n        }\n    }\n    setOptionIfChanged(optionName, newValue) {\n        if (!this.codeMirror) {\n            return;\n        }\n        // cast to any to handle strictly typed option names\n        // could possibly import settings strings available in the future\n        this.codeMirror.setOption(optionName, newValue);\n    }\n    focusChanged(focused) {\n        this.onTouched();\n        this.isFocused = focused;\n        this.focusChange.emit(focused);\n    }\n    scrollChanged(cm) {\n        this.scroll.emit(cm.getScrollInfo());\n    }\n    cursorActive(cm) {\n        this.cursorActivity.emit(cm);\n    }\n    dropFiles(cm, e) {\n        this.drop.emit([cm, e]);\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    writeValue(value) {\n        if (value === null || value === undefined) {\n            return;\n        }\n        if (!this.codeMirror) {\n            this.value = value;\n            return;\n        }\n        const cur = this.codeMirror.getValue();\n        if (value !== cur &&\n            normalizeLineEndings(cur) !== normalizeLineEndings(value)) {\n            this.value = value;\n            if (this.preserveScrollPosition) {\n                const prevScrollPosition = this.codeMirror.getScrollInfo();\n                this.codeMirror.setValue(this.value);\n                this.codeMirror.scrollTo(prevScrollPosition.left, prevScrollPosition.top);\n            }\n            else {\n                this.codeMirror.setValue(this.value);\n            }\n        }\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    /** Implemented as part of ControlValueAccessor. */\n    setDisabledState(isDisabled) {\n        this.disabled = isDisabled;\n        this.setOptionIfChanged('readOnly', this.disabled);\n    }\n}\nCodemirrorComponent.ɵfac = function CodemirrorComponent_Factory(t) { return new (t || CodemirrorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.KeyValueDiffers), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone)); };\nCodemirrorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CodemirrorComponent, selectors: [[\"ngx-codemirror\"]], viewQuery: function CodemirrorComponent_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, 3);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.ref = _t.first);\n    } }, inputs: { className: \"className\", name: \"name\", autoFocus: \"autoFocus\", preserveScrollPosition: \"preserveScrollPosition\", options: \"options\" }, outputs: { cursorActivity: \"cursorActivity\", focusChange: \"focusChange\", scroll: \"scroll\", drop: \"drop\" }, features: [ɵngcc0.ɵɵProvidersFeature([\n            {\n                provide: NG_VALUE_ACCESSOR,\n                useExisting: forwardRef(() => CodemirrorComponent),\n                multi: true\n            },\n        ])], decls: 3, vars: 7, consts: [[\"autocomplete\", \"off\", 3, \"name\", \"autofocus\"], [\"ref\", \"\"]], template: function CodemirrorComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵelementStart(0, \"textarea\", 0, 1);\n        ɵngcc0.ɵɵtext(2, \"    \");\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵclassMapInterpolate1(\"ngx-codemirror \", ctx.className, \"\");\n        ɵngcc0.ɵɵclassProp(\"ngx-codemirror--focused\", ctx.isFocused);\n        ɵngcc0.ɵɵproperty(\"name\", ctx.name)(\"autofocus\", ctx.autoFocus);\n    } }, encapsulation: 2, changeDetection: 0 });\nCodemirrorComponent.ctorParameters = () => [\n    { type: KeyValueDiffers },\n    { type: NgZone }\n];\nCodemirrorComponent.propDecorators = {\n    className: [{ type: Input }],\n    name: [{ type: Input }],\n    autoFocus: [{ type: Input }],\n    options: [{ type: Input }],\n    preserveScrollPosition: [{ type: Input }],\n    cursorActivity: [{ type: Output }],\n    focusChange: [{ type: Output }],\n    scroll: [{ type: Output }],\n    drop: [{ type: Output }],\n    ref: [{ type: ViewChild, args: ['ref', { static: true },] }]\n};\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CodemirrorComponent, [{\n        type: Component,\n        args: [{\n                selector: 'ngx-codemirror',\n                template: `\n    <textarea\n      [name]=\"name\"\n      class=\"ngx-codemirror {{ className }}\"\n      [class.ngx-codemirror--focused]=\"isFocused\"\n      autocomplete=\"off\"\n      [autofocus]=\"autoFocus\"\n      #ref\n    >\n    </textarea>\n  `,\n                providers: [\n                    {\n                        provide: NG_VALUE_ACCESSOR,\n                        useExisting: forwardRef(() => CodemirrorComponent),\n                        multi: true\n                    },\n                ],\n                preserveWhitespaces: false,\n                changeDetection: ChangeDetectionStrategy.OnPush\n            }]\n    }], function () { return [{ type: ɵngcc0.KeyValueDiffers }, { type: ɵngcc0.NgZone }]; }, { className: [{\n            type: Input\n        }], name: [{\n            type: Input\n        }], autoFocus: [{\n            type: Input\n        }], preserveScrollPosition: [{\n            type: Input\n        }], cursorActivity: [{\n            type: Output\n        }], focusChange: [{\n            type: Output\n        }], scroll: [{\n            type: Output\n        }], drop: [{\n            type: Output\n        }], options: [{\n            type: Input\n        }], ref: [{\n            type: ViewChild,\n            args: ['ref', { static: true }]\n        }] }); })();\n\nclass CodemirrorModule {\n}\nCodemirrorModule.ɵfac = function CodemirrorModule_Factory(t) { return new (t || CodemirrorModule)(); };\nCodemirrorModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CodemirrorModule });\nCodemirrorModule.ɵinj = ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CodemirrorModule, { declarations: [CodemirrorComponent], exports: [CodemirrorComponent] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CodemirrorModule, [{\n        type: NgModule,\n        args: [{\n                exports: [CodemirrorComponent],\n                declarations: [CodemirrorComponent]\n            }]\n    }], null, null); })();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CodemirrorComponent, CodemirrorModule };\n\n//# sourceMappingURL=ctrl-ngx-codemirror.js.map"]},"metadata":{},"sourceType":"module"}