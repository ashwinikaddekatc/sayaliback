{"ast":null,"code":"/*\r\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\r\n * This software is released under MIT license.\r\n * The full license information can be found in LICENSE in the root directory of this project.\r\n */\nimport { isTshirtSize, pxToRem, updateElementStyles } from '@cds/core/internal';\nimport isNil from 'ramda/es/isNil.js';\nexport function getUpdateSizeStrategy(size) {\n  if (isNil(size) || size === '') {\n    return \"value-is-nil\"\n    /* NilSizeValue */\n    ;\n  }\n\n  if (isTshirtSize(size)) {\n    return \"value-is-string\"\n    /* ValidSizeString */\n    ;\n  }\n\n  if (!isNaN(parseInt(size, 10)) && size.match(/^[0-9 ]+$/)) {\n    return \"value-is-numeric\"\n    /* ValidNumericString */\n    ;\n  }\n\n  return \"bad-value\"\n  /* BadSizeValue */\n  ;\n}\nexport function updateIconSizeStyle(el, size) {\n  var updateStrategy = getUpdateSizeStrategy(size);\n  var val = '';\n\n  switch (updateStrategy) {\n    case \"value-is-numeric\"\n    /* ValidNumericString */\n    :\n      val = pxToRem(parseInt(size)); // set val in block to run expensive call only when needed\n\n      updateElementStyles(el, ['width', val], ['height', val]);\n      return;\n\n    case \"value-is-string\"\n    /* ValidSizeString */\n    :\n      updateElementStyles(el, ['width', ''], ['height', '']);\n      return;\n\n    case \"value-is-nil\"\n    /* NilSizeValue */\n    :\n      // nil values empty out all sizing\n      updateElementStyles(el, ['width', ''], ['height', '']);\n      return;\n\n    case \"bad-value\"\n    /* BadSizeValue */\n    :\n      // bad-value is ignored\n      return;\n\n    default:\n      return;\n  }\n} //# sourceMappingURL=icon.classnames.js.map","map":{"version":3,"sources":["C:/Users/HP/Desktop/CNS-Portal-ashwini15523/frontend/angular-ui/node_modules/@cds/core/icon/utils/icon.classnames.js"],"names":["isTshirtSize","pxToRem","updateElementStyles","isNil","getUpdateSizeStrategy","size","isNaN","parseInt","match","updateIconSizeStyle","el","updateStrategy","val"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,SAASA,YAAT,EAAuBC,OAAvB,EAAgCC,mBAAhC,QAA2D,oBAA3D;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAO,SAASC,qBAAT,CAA+BC,IAA/B,EAAqC;AACxC,MAAIF,KAAK,CAACE,IAAD,CAAL,IAAeA,IAAI,KAAK,EAA5B,EAAgC;AAC5B,WAAO;AAAe;AAAtB;AACH;;AACD,MAAIL,YAAY,CAACK,IAAD,CAAhB,EAAwB;AACpB,WAAO;AAAkB;AAAzB;AACH;;AACD,MAAI,CAACC,KAAK,CAACC,QAAQ,CAACF,IAAD,EAAO,EAAP,CAAT,CAAN,IAA8BA,IAAI,CAACG,KAAL,CAAW,WAAX,CAAlC,EAA2D;AACvD,WAAO;AAAmB;AAA1B;AACH;;AACD,SAAO;AAAY;AAAnB;AACH;AACD,OAAO,SAASC,mBAAT,CAA6BC,EAA7B,EAAiCL,IAAjC,EAAuC;AAC1C,MAAMM,cAAc,GAAGP,qBAAqB,CAACC,IAAD,CAA5C;AACA,MAAIO,GAAG,GAAG,EAAV;;AACA,UAAQD,cAAR;AACI,SAAK;AAAmB;AAAxB;AACIC,MAAAA,GAAG,GAAGX,OAAO,CAACM,QAAQ,CAACF,IAAD,CAAT,CAAb,CADJ,CACmC;;AAC/BH,MAAAA,mBAAmB,CAACQ,EAAD,EAAK,CAAC,OAAD,EAAUE,GAAV,CAAL,EAAqB,CAAC,QAAD,EAAWA,GAAX,CAArB,CAAnB;AACA;;AACJ,SAAK;AAAkB;AAAvB;AACIV,MAAAA,mBAAmB,CAACQ,EAAD,EAAK,CAAC,OAAD,EAAU,EAAV,CAAL,EAAoB,CAAC,QAAD,EAAW,EAAX,CAApB,CAAnB;AACA;;AACJ,SAAK;AAAe;AAApB;AAAwC;AACpCR,MAAAA,mBAAmB,CAACQ,EAAD,EAAK,CAAC,OAAD,EAAU,EAAV,CAAL,EAAoB,CAAC,QAAD,EAAW,EAAX,CAApB,CAAnB;AACA;;AACJ,SAAK;AAAY;AAAjB;AACI;AACA;;AACJ;AACI;AAfR;AAiBH,C,CACD","sourcesContent":["/*\r\n * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.\r\n * This software is released under MIT license.\r\n * The full license information can be found in LICENSE in the root directory of this project.\r\n */\r\nimport { isTshirtSize, pxToRem, updateElementStyles } from '@cds/core/internal';\r\nimport isNil from 'ramda/es/isNil.js';\r\nexport function getUpdateSizeStrategy(size) {\r\n    if (isNil(size) || size === '') {\r\n        return \"value-is-nil\" /* NilSizeValue */;\r\n    }\r\n    if (isTshirtSize(size)) {\r\n        return \"value-is-string\" /* ValidSizeString */;\r\n    }\r\n    if (!isNaN(parseInt(size, 10)) && size.match(/^[0-9 ]+$/)) {\r\n        return \"value-is-numeric\" /* ValidNumericString */;\r\n    }\r\n    return \"bad-value\" /* BadSizeValue */;\r\n}\r\nexport function updateIconSizeStyle(el, size) {\r\n    const updateStrategy = getUpdateSizeStrategy(size);\r\n    let val = '';\r\n    switch (updateStrategy) {\r\n        case \"value-is-numeric\" /* ValidNumericString */:\r\n            val = pxToRem(parseInt(size)); // set val in block to run expensive call only when needed\r\n            updateElementStyles(el, ['width', val], ['height', val]);\r\n            return;\r\n        case \"value-is-string\" /* ValidSizeString */:\r\n            updateElementStyles(el, ['width', ''], ['height', '']);\r\n            return;\r\n        case \"value-is-nil\" /* NilSizeValue */: // nil values empty out all sizing\r\n            updateElementStyles(el, ['width', ''], ['height', '']);\r\n            return;\r\n        case \"bad-value\" /* BadSizeValue */:\r\n            // bad-value is ignored\r\n            return;\r\n        default:\r\n            return;\r\n    }\r\n}\r\n//# sourceMappingURL=icon.classnames.js.map"]},"metadata":{},"sourceType":"module"}