{"ast":null,"code":"import _includes from \"./internal/_includes.js\";\nimport _curry2 from \"./internal/_curry2.js\";\nimport flip from \"./flip.js\";\nimport reject from \"./reject.js\";\n/**\r\n * Returns a new list without values in the first argument.\r\n * [`R.equals`](#equals) is used to determine equality.\r\n *\r\n * Acts as a transducer if a transformer is given in list position.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.19.0\r\n * @category List\r\n * @sig [a] -> [a] -> [a]\r\n * @param {Array} list1 The values to be removed from `list2`.\r\n * @param {Array} list2 The array to remove values from.\r\n * @return {Array} The new array without values in `list1`.\r\n * @see R.transduce, R.difference, R.remove\r\n * @example\r\n *\r\n *      R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]\r\n */\n\nvar without = /*#__PURE__*/_curry2(function (xs, list) {\n  return reject(flip(_includes)(xs), list);\n});\n\nexport default without;","map":{"version":3,"sources":["C:/Users/hp/OneDrive/Desktop/19portal/CNS-Portal/frontend/angular-ui/node_modules/ramda/es/without.js"],"names":["_includes","_curry2","flip","reject","without","xs","list"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,yBAAtB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,OAAO,GACX,aACAH,OAAO,CAAC,UAAUI,EAAV,EAAcC,IAAd,EAAoB;AAC1B,SAAOH,MAAM,CAACD,IAAI,CAACF,SAAD,CAAJ,CAAgBK,EAAhB,CAAD,EAAsBC,IAAtB,CAAb;AACD,CAFM,CAFP;;AAMA,eAAeF,OAAf","sourcesContent":["import _includes from \"./internal/_includes.js\";\r\nimport _curry2 from \"./internal/_curry2.js\";\r\nimport flip from \"./flip.js\";\r\nimport reject from \"./reject.js\";\r\n/**\r\n * Returns a new list without values in the first argument.\r\n * [`R.equals`](#equals) is used to determine equality.\r\n *\r\n * Acts as a transducer if a transformer is given in list position.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.19.0\r\n * @category List\r\n * @sig [a] -> [a] -> [a]\r\n * @param {Array} list1 The values to be removed from `list2`.\r\n * @param {Array} list2 The array to remove values from.\r\n * @return {Array} The new array without values in `list1`.\r\n * @see R.transduce, R.difference, R.remove\r\n * @example\r\n *\r\n *      R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]\r\n */\r\n\r\nvar without =\r\n/*#__PURE__*/\r\n_curry2(function (xs, list) {\r\n  return reject(flip(_includes)(xs), list);\r\n});\r\n\r\nexport default without;"]},"metadata":{},"sourceType":"module"}