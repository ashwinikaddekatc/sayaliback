/*
 * Copyright (c) 2016-2021 VMware, Inc. All Rights Reserved.
 * This software is released under MIT license.
 * The full license information can be found in LICENSE in the root directory of this project.
 */
import { __decorate } from "tslib";
import { baseStyles, CdsBaseButton, LogService, notProductionEnvironment, property, querySlot, } from '@cds/core/internal';
import { html, query } from 'lit-element';
import { styles } from './pagination-button.element.css.js';
export var CdsPaginationButtonAction;
(function (CdsPaginationButtonAction) {
    CdsPaginationButtonAction["First"] = "first";
    CdsPaginationButtonAction["Previous"] = "prev";
    CdsPaginationButtonAction["Next"] = "next";
    CdsPaginationButtonAction["Last"] = "last";
})(CdsPaginationButtonAction || (CdsPaginationButtonAction = {}));
/**
 * Web component pagination button to be used inside pagination.
 *
 * ```typescript
 * import '@cds/core/pagination/register.js';
 * ```
 *
 * ```html
 * <cds-pagination>
 *   <cds-pagination-button action="first" disabled></cds-pagination-button>
 *   <cds-pagination-button action="prev" disabled></cds-pagination-button>
 *   <span aria-label="current page">1 / 3</span>
 *   <cds-pagination-button action="next"></cds-pagination-button>
 *   <cds-pagination-button action="last"></cds-pagination-button>
 * </cds-pagination>
 * ```
 *
 * @element cds-pagination-button
 * @slot
 * @slot cds-icon
 * @cssprop --background
 * @cssprop --padding
 * @cssprop --border-color
 * @cssprop --border-width
 * @cssprop --border-radius
 * @cssprop --box-shadow
 * @cssprop --min-height
 * @cssprop --min-width
 */
export class CdsPaginationButton extends CdsBaseButton {
    connectedCallback() {
        super.connectedCallback();
        this.type = 'button';
    }
    get customContent() {
        return !this.action && !this.cdsIconDefault;
    }
    render() {
        return html `
      <div class="private-host" cds-layout="horizontal align:center ${this.customContent ? 'p-x:sm' : ''}">
        <slot name="cds-icon-slot">
          ${this.action === CdsPaginationButtonAction.Next
            ? html `<cds-icon shape="angle" direction="right"></cds-icon>`
            : ''}
          ${this.action === CdsPaginationButtonAction.Last
            ? html `<cds-icon shape="step-forward-2" direction="up"></cds-icon>`
            : ''}
          ${this.action === CdsPaginationButtonAction.Previous
            ? html `<cds-icon shape="angle" direction="left"></cds-icon>`
            : ''}
          ${this.action === CdsPaginationButtonAction.First
            ? html `<cds-icon shape="step-forward-2" direction="down"></cds-icon>`
            : ''}
        </slot>
        <slot></slot>
      </div>
    `;
    }
    static get styles() {
        return [baseStyles, styles];
    }
    firstUpdated(props) {
        super.firstUpdated(props);
        this.validateAriaLabel();
    }
    validateAriaLabel() {
        var _a;
        if (notProductionEnvironment() &&
            (this.cdsIcon || this.cdsIconDefault) &&
            !((_a = this.getAttribute('aria-label')) === null || _a === void 0 ? void 0 : _a.length)) {
            LogService.warn('An aria-label is missing', this);
        }
    }
}
__decorate([
    property({ type: String, reflect: true })
], CdsPaginationButton.prototype, "action", void 0);
__decorate([
    querySlot('cds-icon', { assign: 'cds-icon-slot' })
], CdsPaginationButton.prototype, "cdsIcon", void 0);
__decorate([
    query('cds-icon')
], CdsPaginationButton.prototype, "cdsIconDefault", void 0);
//# sourceMappingURL=pagination-button.element.js.map