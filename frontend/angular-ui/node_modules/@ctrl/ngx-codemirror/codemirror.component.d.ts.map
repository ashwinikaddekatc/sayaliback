{"version":3,"file":"codemirror.component.d.ts","sources":["codemirror.component.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterViewInit, DoCheck, ElementRef, EventEmitter, KeyValueDiffers, NgZone, OnDestroy } from '@angular/core';\nimport { ControlValueAccessor } from '@angular/forms';\nimport { Editor, EditorChangeLinkedList, EditorFromTextArea, ScrollInfo } from 'codemirror';\nexport declare class CodemirrorComponent implements AfterViewInit, OnDestroy, ControlValueAccessor, DoCheck {\n    private _differs;\n    private _ngZone;\n    className: string;\n    name: string;\n    autoFocus: boolean;\n    /**\n     * set options for codemirror\n     * @link http://codemirror.net/doc/manual.html#config\n     */\n    set options(value: {\n        [key: string]: any;\n    });\n    preserveScrollPosition: boolean;\n    cursorActivity: EventEmitter<Editor>;\n    focusChange: EventEmitter<boolean>;\n    scroll: EventEmitter<ScrollInfo>;\n    drop: EventEmitter<[Editor, DragEvent]>;\n    ref: ElementRef;\n    value: string;\n    disabled: boolean;\n    isFocused: boolean;\n    codeMirror?: EditorFromTextArea;\n    /**\n     * either global variable or required library\n     */\n    private _codeMirror;\n    private _differ?;\n    private _options;\n    constructor(_differs: KeyValueDiffers, _ngZone: NgZone);\n    get codeMirrorGlobal(): any;\n    ngAfterViewInit(): void;\n    ngDoCheck(): void;\n    ngOnDestroy(): void;\n    codemirrorValueChanged(cm: Editor, change: EditorChangeLinkedList): void;\n    setOptionIfChanged(optionName: string, newValue: any): void;\n    focusChanged(focused: boolean): void;\n    scrollChanged(cm: Editor): void;\n    cursorActive(cm: Editor): void;\n    dropFiles(cm: Editor, e: DragEvent): void;\n    /** Implemented as part of ControlValueAccessor. */\n    writeValue(value: string): void;\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnChange(fn: (value: string) => void): void;\n    /** Implemented as part of ControlValueAccessor. */\n    registerOnTouched(fn: () => void): void;\n    /** Implemented as part of ControlValueAccessor. */\n    setDisabledState(isDisabled: boolean): void;\n    /** Implemented as part of ControlValueAccessor. */\n    private onChange;\n    /** Implemented as part of ControlValueAccessor. */\n    private onTouched;\n}\n"]}