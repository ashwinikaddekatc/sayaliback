{"version":3,"file":"dnd-draggable.directive.d.ts","sources":["dnd-draggable.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, EventEmitter, Renderer2 } from \"@angular/core\";\nimport { DndDragImageOffsetFunction, DndEvent } from \"./dnd-utils\";\nimport { DndHandleDirective } from \"./dnd-handle.directive\";\nimport { EffectAllowed } from \"./dnd-types\";\nexport declare class DndDragImageRefDirective {\n    constructor(parent: DndDraggableDirective, elementRef: ElementRef);\n}\nexport declare class DndDraggableDirective {\n    private elementRef;\n    private renderer;\n    dndDraggable: any;\n    dndEffectAllowed: EffectAllowed;\n    dndType?: string;\n    dndDraggingClass: string;\n    dndDraggingSourceClass: string;\n    dndDraggableDisabledClass: string;\n    dndDragImageOffsetFunction: DndDragImageOffsetFunction;\n    readonly dndStart: EventEmitter<DragEvent>;\n    readonly dndEnd: EventEmitter<DragEvent>;\n    readonly dndMoved: EventEmitter<DragEvent>;\n    readonly dndCopied: EventEmitter<DragEvent>;\n    readonly dndLinked: EventEmitter<DragEvent>;\n    readonly dndCanceled: EventEmitter<DragEvent>;\n    draggable: boolean;\n    private dndHandle?;\n    private dndDragImageElementRef?;\n    private dragImage;\n    dndDisableIf: boolean;\n    constructor(elementRef: ElementRef, renderer: Renderer2);\n    onDragStart(event: DndEvent): boolean;\n    onDragEnd(event: DragEvent): void;\n    registerDragHandle(handle: DndHandleDirective | undefined): void;\n    registerDragImage(elementRef: ElementRef | undefined): void;\n    private determineDragImage();\n}\n"]}