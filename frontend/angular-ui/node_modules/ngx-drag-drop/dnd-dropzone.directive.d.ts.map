{"version":3,"file":"dnd-dropzone.directive.d.ts","sources":["dnd-dropzone.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { AfterViewInit, ElementRef, EventEmitter, Renderer2 } from \"@angular/core\";\nimport { DndEvent } from \"./dnd-utils\";\nimport { DropEffect, EffectAllowed } from \"./dnd-types\";\nexport interface DndDropEvent {\n    event: DragEvent;\n    dropEffect: DropEffect;\n    isExternal: boolean;\n    data?: any;\n    index?: number;\n    type?: any;\n}\nexport declare class DndPlaceholderRefDirective {\n    readonly elementRef: ElementRef;\n    constructor(elementRef: ElementRef);\n}\nexport declare class DndDropzoneDirective implements AfterViewInit {\n    private elementRef;\n    private renderer;\n    dndDropzone?: string[];\n    dndEffectAllowed: EffectAllowed;\n    dndAllowExternal: boolean;\n    dndHorizontal: boolean;\n    dndDragoverClass: string;\n    dndDropzoneDisabledClass: string;\n    readonly dndDragover: EventEmitter<DragEvent>;\n    readonly dndDrop: EventEmitter<DndDropEvent>;\n    private readonly dndPlaceholderRef?;\n    private placeholder;\n    private disabled;\n    dndDisableIf: boolean;\n    constructor(elementRef: ElementRef, renderer: Renderer2);\n    ngAfterViewInit(): void;\n    onDragEnter(event: DndEvent): void;\n    onDragOver(event: DragEvent): void;\n    onDrop(event: DragEvent): void;\n    onDragLeave(event: DndEvent): void;\n    private tryGetPlaceholder();\n    private isDropAllowed(type?);\n    private checkAndUpdatePlaceholderPosition(event);\n    private getPlaceholderIndex();\n    private cleanupDragoverState();\n}\n"]}