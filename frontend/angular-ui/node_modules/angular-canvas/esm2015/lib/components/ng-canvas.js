function getArrayDrawingComponents(set) {
    return Array.from(set.values()).filter((c) => c && !!c.draw);
}
export class NgCanvas {
    constructor(ngZone, config) {
        this.ngZone = ngZone;
        this.config = config;
        this.componentSet = new Set();
        this.componentsDrawings = [];
        this.element = document.createElement('canvas');
        this.element.style.position = 'absolute';
        this.context = this.element.getContext('2d');
        this._height = this.element.height;
        this._width = this.element.width;
        this.ngZone.runOutsideAngular(() => {
            window.requestAnimationFrame((time) => this.draw(time));
        });
    }
    get width() {
        return this._width;
    }
    get height() {
        return this._height;
    }
    set parent(element) {
        this._parentElement = element;
        this.subResizeEvent();
    }
    subResizeEvent() {
        this._parentElement &&
            this.resizeObserver &&
            this.resizeObserver.unobserve(this._parentElement);
        // @ts-ignore
        this.resizeObserver = new ResizeObserver(([entry]) => {
            const dpr = window.devicePixelRatio || 1;
            let width = entry.contentRect.width;
            let height = entry.contentRect.height;
            if (width && height) {
                width = parseInt(width, 10);
                height = parseInt(height, 10);
            }
            let resizeDetected = false;
            if (this._width !== width) {
                this._width = width;
                this.element.width = width * dpr;
                this.element.style.width = width + 'px';
                resizeDetected = true;
            }
            if (this._height !== height) {
                this._height = height;
                this.element.height = height * dpr;
                this.element.style.height = height + 'px';
                resizeDetected = true;
            }
            if (resizeDetected) {
                if (dpr !== 1) {
                    this.context.scale(dpr, dpr);
                }
                this.drawWithoutRequestAnimation();
            }
        });
        this.resizeObserver.observe(this._parentElement);
    }
    resetCanvasSize() {
        const dpr = window.devicePixelRatio || 1;
        this.element.width = this._width * dpr;
        this.element.style.width = this._width + 'px';
        this.element.height = this._height * dpr;
        this.element.style.height = this._height + 'px';
    }
    // tslint:disable-next-line:typedef
    get parent() {
        return this._parent;
    }
    // tslint:disable-next-line:typedef
    destroy() {
        this.resizeObserver &&
            this._parentElement &&
            this.resizeObserver.unobserve(this._parentElement);
        this.componentSet.clear();
        this.componentsDrawings = null;
        this.element && this.element.remove();
    }
    addClass(name) {
        this.element.setAttribute('class', name);
    }
    appendChild(newChild) {
        newChild.onInit && newChild.onInit(this.context);
        this.componentSet.add(newChild);
        this.componentsDrawings = getArrayDrawingComponents(this.componentSet);
        this.drawAll();
    }
    removeChild(oldChild) {
        oldChild.onDestroy && oldChild.onDestroy(this.context);
        this.componentSet.delete(oldChild);
        this.componentsDrawings = getArrayDrawingComponents(this.componentSet);
        this.drawAll();
    }
    insertBefore(newChild, refChild) {
        this.componentSet.add(newChild);
        this.componentsDrawings = getArrayDrawingComponents(this.componentSet);
        this.drawAll();
    }
    recalculateElementsDraw() {
        this.componentsDrawings = getArrayDrawingComponents(this.componentSet);
    }
    removeAttribute(name, namespace) {
        this.element.removeAttribute(name);
    }
    removeClass(name) {
        this.element.classList.remove(name);
    }
    removeStyle(style, flags) {
        // Not supported
    }
    setAttribute(name, value) {
        this.element.setAttribute(name, value);
    }
    setNgAttribute(name, value, namespace) {
        this.element.setAttribute(name, value);
    }
    setNgProperty(name, value) {
        // Not supported
    }
    setStyle(style, value, flags) {
        // Not supported
    }
    setValue(value) {
        // Not supported
    }
    drawAll(clear) {
        this.ngZone.runOutsideAngular(() => {
            this.requestId && window.cancelAnimationFrame(this.requestId);
            this.requestId = window.requestAnimationFrame((time) => {
                this.draw(time, clear);
                this.requestId = null;
            });
        });
    }
    drawWithoutRequestAnimation() {
        this.ngZone.runOutsideAngular(() => {
            this.draw(0, false);
            this.requestId = null;
        });
    }
    // @ts-ignore
    draw(time, clear = true) {
        const context = this.context;
        if (clear) {
            context.clearRect(0, 0, this.width, this.height);
        }
        let needDraw = false;
        const elementsCount = this.componentsDrawings && this.componentsDrawings.length;
        if (elementsCount) {
            for (let i = 0; i < elementsCount; i++) {
                this.componentsDrawings[i].draw(context, time);
                needDraw = needDraw || this.componentsDrawings[i].needDraw;
            }
            if (needDraw) {
                this.requestId && window.cancelAnimationFrame(this.requestId);
                this.requestId = window.requestAnimationFrame((time) => this.draw(time));
            }
        }
    }
}
NgCanvas.nodeName = 'canvas';
//# sourceMappingURL=data:application/json;base64,