import { Inject, Injectable, NgZone, RendererStyleFlags2, ViewEncapsulation, } from '@angular/core';
import { NgCanvas } from './components/ng-canvas';
import { EventManager, ɵDomSharedStylesHost as DomSharedStylesHost, } from '@angular/platform-browser';
import { DefaultDomRenderer2, EmulatedEncapsulationDomRenderer2, ShadowDomRenderer, } from './default-dom-renderer';
import { flattenStyles, NAMESPACE_URIS, shimContentAttribute, shimHostAttribute, } from './renderer-utils';
import { getMetadataArgsStorage } from './metadata/metadata-storage';
import { CanvasRenderConfig, } from './tokens/canvas-resize-obserer-enable-token';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/platform-browser';
export class CanvasDomRendererFactory {
    constructor(eventManager, sharedStylesHost, appId, ngZone, canvasConfig) {
        this.eventManager = eventManager;
        this.sharedStylesHost = sharedStylesHost;
        this.appId = appId;
        this.ngZone = ngZone;
        this.canvasConfig = canvasConfig;
        this.rendererByCompId = new Map();
        this.defaultRenderer = new DefaultDomRenderer2(eventManager);
    }
    end() { }
    createRenderer(element, type) {
        if (!element || !type) {
            return this.defaultRenderer;
        }
        // @ts-ignore
        if (type['type'] && type['type'].isCanvasComponent) {
            let renderer = this.rendererByCompId.get(type.id);
            if (!renderer) {
                renderer = new CanvasRenderer(this.eventManager, this.sharedStylesHost, type, this.appId, this.ngZone, this.canvasConfig);
                this.rendererByCompId.set(type.id, renderer);
            }
            renderer.applyToHost(element);
            return renderer;
        }
        switch (type.encapsulation) {
            case ViewEncapsulation.Emulated: {
                let renderer = this.rendererByCompId.get(type.id);
                if (!renderer) {
                    renderer = new EmulatedEncapsulationDomRenderer2(this.eventManager, this.sharedStylesHost, type, this.appId);
                    this.rendererByCompId.set(type.id, renderer);
                }
                renderer.applyToHost(element);
                return renderer;
            }
            case ViewEncapsulation.ShadowDom:
                return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);
            default: {
                if (!this.rendererByCompId.has(type.id)) {
                    const styles = flattenStyles(type.id, type.styles, []);
                    this.sharedStylesHost.addStyles(styles);
                    this.rendererByCompId.set(type.id, this.defaultRenderer);
                }
                return this.defaultRenderer;
            }
        }
    }
}
CanvasDomRendererFactory.ɵfac = function CanvasDomRendererFactory_Factory(t) { return new (t || CanvasDomRendererFactory)(ɵngcc0.ɵɵinject(ɵngcc1.EventManager), ɵngcc0.ɵɵinject(ɵngcc1.ɵDomSharedStylesHost), ɵngcc0.ɵɵinject(String), ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(CanvasRenderConfig)); };
CanvasDomRendererFactory.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: CanvasDomRendererFactory, factory: CanvasDomRendererFactory.ɵfac });
CanvasDomRendererFactory.ctorParameters = () => [
    { type: EventManager },
    { type: DomSharedStylesHost },
    { type: String },
    { type: NgZone },
    { type: undefined, decorators: [{ type: Inject, args: [CanvasRenderConfig,] }] }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(CanvasDomRendererFactory, [{
        type: Injectable
    }], function () { return [{ type: ɵngcc1.EventManager }, { type: ɵngcc1.ɵDomSharedStylesHost }, { type: String }, { type: ɵngcc0.NgZone }, { type: undefined, decorators: [{
                type: Inject,
                args: [CanvasRenderConfig]
            }] }]; }, null); })();
export class CanvasRenderer {
    constructor(eventManager, sharedStylesHost, component, appId, ngZone, config) {
        this.component = component;
        this.ngZone = ngZone;
        this.config = config;
        this.canvasElements = getMetadataArgsStorage().elements;
        const styles = flattenStyles(appId + '-' + component.id, component.styles, []);
        sharedStylesHost.addStyles(styles);
        this.contentAttr = shimContentAttribute(appId + '-' + component.id);
        this.hostAttr = shimHostAttribute(appId + '-' + component.id);
    }
    // tslint:disable-next-line:typedef
    applyToHost(element) {
        this.setAttribute(element, this.hostAttr, '');
    }
    createElement(name, namespace) {
        const Component = this.canvasElements.get(name);
        if (Component) {
            return new Component();
        }
        else if (name === 'canvas') {
            const canvas = new NgCanvas(this.ngZone, this.config);
            canvas.element.setAttribute(this.contentAttr, '');
            return canvas;
        }
        else {
            let element;
            if (namespace) {
                // In cases where Ivy (not ViewEngine) is giving us the actual namespace, the look up by key
                // will result in undefined, so we just return the namespace here.
                element = document.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);
            }
            else {
                element = document.createElement(name);
            }
            this.setAttribute(element, this.contentAttr, '');
            return element;
        }
    }
    createText(value) {
        return document.createTextNode(value);
    }
    selectRootElement(selectorOrNode, preserveContent) {
        const el = typeof selectorOrNode === 'string'
            ? document.querySelector(selectorOrNode)
            : selectorOrNode;
        if (!el) {
            throw new Error(`The selector "${selectorOrNode}" did not match any elements`);
        }
        if (!preserveContent) {
            el.textContent = '';
        }
        return el;
    }
    addClass(el, name) {
        if (el.classList) {
            el.classList.add(name);
        }
        else {
            el.addClass(name);
        }
    }
    removeClass(el, name) {
        if (el.classList) {
            el.classList.add(name);
        }
        else {
            el.removeClass(name);
        }
    }
    appendChild(parent, newChild) {
        // parent.appendChild(newChild);
        if (!newChild) {
            return;
        }
        newChild.parent = parent;
        if (newChild instanceof NgCanvas) {
            parent.appendChild(newChild.element);
        }
        else {
            parent.appendChild(newChild);
        }
    }
    removeChild(parent, oldChild) {
        // tslint:disable-next-line:no-unused-expression
        oldChild.destroy && oldChild.destroy();
        if (parent) {
            parent.removeChild(oldChild);
        }
        if (oldChild && oldChild.parent instanceof NgCanvas) {
            oldChild.parent.removeChild(oldChild);
        }
    }
    createComment(value) {
        return document.createComment(value);
    }
    destroy() { }
    insertBefore(parent, newChild, refChild) {
        if (parent && parent.insertBefore) {
            newChild.parent = parent;
            if (newChild instanceof NgCanvas) {
                parent.insertBefore(newChild.element, refChild);
            }
            else {
                parent.insertBefore(newChild, refChild);
            }
        }
    }
    listen(target, eventName, callback) {
        const callbackFunc = (e) => callback.call(target, e);
        if (target instanceof NgCanvas) {
            target = target.element;
        }
        target.addEventListener(eventName, callbackFunc);
        return () => target.removeEventListener(eventName, callbackFunc);
    }
    // tslint:disable-next-line:typedef
    nextSibling(node) {
        return {
            previous: node,
            next: node.nextSibling,
        };
    }
    parentNode(node) {
        return node.parent ? node.parent : node;
    }
    removeAttribute(el, name, namespace) {
        if (namespace) {
            // TODO(FW-811): Ivy may cause issues here because it's passing around
            // full URIs for namespaces, therefore this lookup will fail.
            const namespaceUri = NAMESPACE_URIS[namespace];
            if (namespaceUri) {
                el.removeAttributeNS(namespaceUri, name);
            }
            else {
                // TODO(FW-811): Since ivy is passing around full URIs for namespaces
                // this could result in properties like `http://www.w3.org/2000/svg:cx="123"`,
                // which is wrong.
                el.removeAttribute(`${namespace}:${name}`);
            }
        }
        else {
            el.removeAttribute(name);
        }
    }
    removeStyle(el, style, flags) {
        el.removeStyle(style, flags);
    }
    setAttribute(el, name, value, namespace) {
        if (namespace) {
            name = namespace + ':' + name;
            // TODO(FW-811): Ivy may cause issues here because it's passing around
            // full URIs for namespaces, therefore this lookup will fail.
            const namespaceUri = NAMESPACE_URIS[namespace];
            if (namespaceUri) {
                el.setAttributeNS(namespaceUri, name, value);
            }
            else {
                el.setAttribute(name, value);
            }
        }
        else {
            el.setAttribute(name, value);
        }
    }
    setProperty(el, name, value) {
        el.setNgProperty(name, value);
    }
    setStyle(el, style, value, flags) {
        if (el.style) {
            // tslint:disable-next-line:no-bitwise
            if (flags & RendererStyleFlags2.DashCase) {
                el.style.setProperty(
                // tslint:disable-next-line:no-bitwise
                style, value, flags & RendererStyleFlags2.Important ? 'important' : '');
            }
            else {
                el.style[style] = value;
            }
        }
        else {
            el.setStyle(style, value, flags);
        }
    }
    setValue(node, value) {
        if (node.setValue) {
            node.setValue(value);
        }
        else {
            node.nodeValue = value;
        }
    }
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,