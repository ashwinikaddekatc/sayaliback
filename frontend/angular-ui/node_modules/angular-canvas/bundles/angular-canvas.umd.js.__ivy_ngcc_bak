(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common'), require('@angular/platform-browser')) :
    typeof define === 'function' && define.amd ? define('angular-canvas', ['exports', '@angular/core', '@angular/common', '@angular/platform-browser'], factory) :
    (global = global || self, factory(global['angular-canvas'] = {}, global.ng.core, global.ng.common, global.ng.platformBrowser));
}(this, (function (exports, core, common, platformBrowser) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    ;
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, privateMap) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to get private field on non-instance");
        }
        return privateMap.get(receiver);
    }
    function __classPrivateFieldSet(receiver, privateMap, value) {
        if (!privateMap.has(receiver)) {
            throw new TypeError("attempted to set private field on non-instance");
        }
        privateMap.set(receiver, value);
        return value;
    }

    function getArrayDrawingComponents(set) {
        return Array.from(set.values()).filter(function (c) { return c && !!c.draw; });
    }
    var NgCanvas = /** @class */ (function () {
        function NgCanvas(ngZone, config) {
            var _this = this;
            this.ngZone = ngZone;
            this.config = config;
            this.componentSet = new Set();
            this.componentsDrawings = [];
            this.element = document.createElement('canvas');
            this.element.style.position = 'absolute';
            this.context = this.element.getContext('2d');
            this._height = this.element.height;
            this._width = this.element.width;
            this.ngZone.runOutsideAngular(function () {
                window.requestAnimationFrame(function (time) { return _this.draw(time); });
            });
        }
        Object.defineProperty(NgCanvas.prototype, "width", {
            get: function () {
                return this._width;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NgCanvas.prototype, "height", {
            get: function () {
                return this._height;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(NgCanvas.prototype, "parent", {
            // tslint:disable-next-line:typedef
            get: function () {
                return this._parent;
            },
            set: function (element) {
                this._parentElement = element;
                this.subResizeEvent();
            },
            enumerable: false,
            configurable: true
        });
        NgCanvas.prototype.subResizeEvent = function () {
            var _this = this;
            this._parentElement &&
                this.resizeObserver &&
                this.resizeObserver.unobserve(this._parentElement);
            // @ts-ignore
            this.resizeObserver = new ResizeObserver(function (_a) {
                var _b = __read(_a, 1), entry = _b[0];
                var dpr = window.devicePixelRatio || 1;
                var width = entry.contentRect.width;
                var height = entry.contentRect.height;
                if (width && height) {
                    width = parseInt(width, 10);
                    height = parseInt(height, 10);
                }
                var resizeDetected = false;
                if (_this._width !== width) {
                    _this._width = width;
                    _this.element.width = width * dpr;
                    _this.element.style.width = width + 'px';
                    resizeDetected = true;
                }
                if (_this._height !== height) {
                    _this._height = height;
                    _this.element.height = height * dpr;
                    _this.element.style.height = height + 'px';
                    resizeDetected = true;
                }
                if (resizeDetected) {
                    if (dpr !== 1) {
                        _this.context.scale(dpr, dpr);
                    }
                    _this.drawWithoutRequestAnimation();
                }
            });
            this.resizeObserver.observe(this._parentElement);
        };
        NgCanvas.prototype.resetCanvasSize = function () {
            var dpr = window.devicePixelRatio || 1;
            this.element.width = this._width * dpr;
            this.element.style.width = this._width + 'px';
            this.element.height = this._height * dpr;
            this.element.style.height = this._height + 'px';
        };
        // tslint:disable-next-line:typedef
        NgCanvas.prototype.destroy = function () {
            this.resizeObserver &&
                this._parentElement &&
                this.resizeObserver.unobserve(this._parentElement);
            this.componentSet.clear();
            this.componentsDrawings = null;
            this.element && this.element.remove();
        };
        NgCanvas.prototype.addClass = function (name) {
            this.element.setAttribute('class', name);
        };
        NgCanvas.prototype.appendChild = function (newChild) {
            newChild.onInit && newChild.onInit(this.context);
            this.componentSet.add(newChild);
            this.componentsDrawings = getArrayDrawingComponents(this.componentSet);
            this.drawAll();
        };
        NgCanvas.prototype.removeChild = function (oldChild) {
            oldChild.onDestroy && oldChild.onDestroy(this.context);
            this.componentSet.delete(oldChild);
            this.componentsDrawings = getArrayDrawingComponents(this.componentSet);
            this.drawAll();
        };
        NgCanvas.prototype.insertBefore = function (newChild, refChild) {
            this.componentSet.add(newChild);
            this.componentsDrawings = getArrayDrawingComponents(this.componentSet);
            this.drawAll();
        };
        NgCanvas.prototype.recalculateElementsDraw = function () {
            this.componentsDrawings = getArrayDrawingComponents(this.componentSet);
        };
        NgCanvas.prototype.removeAttribute = function (name, namespace) {
            this.element.removeAttribute(name);
        };
        NgCanvas.prototype.removeClass = function (name) {
            this.element.classList.remove(name);
        };
        NgCanvas.prototype.removeStyle = function (style, flags) {
            // Not supported
        };
        NgCanvas.prototype.setAttribute = function (name, value) {
            this.element.setAttribute(name, value);
        };
        NgCanvas.prototype.setNgAttribute = function (name, value, namespace) {
            this.element.setAttribute(name, value);
        };
        NgCanvas.prototype.setNgProperty = function (name, value) {
            // Not supported
        };
        NgCanvas.prototype.setStyle = function (style, value, flags) {
            // Not supported
        };
        NgCanvas.prototype.setValue = function (value) {
            // Not supported
        };
        NgCanvas.prototype.drawAll = function (clear) {
            var _this = this;
            this.ngZone.runOutsideAngular(function () {
                _this.requestId && window.cancelAnimationFrame(_this.requestId);
                _this.requestId = window.requestAnimationFrame(function (time) {
                    _this.draw(time, clear);
                    _this.requestId = null;
                });
            });
        };
        NgCanvas.prototype.drawWithoutRequestAnimation = function () {
            var _this = this;
            this.ngZone.runOutsideAngular(function () {
                _this.draw(0, false);
                _this.requestId = null;
            });
        };
        // @ts-ignore
        NgCanvas.prototype.draw = function (time, clear) {
            var _this = this;
            if (clear === void 0) { clear = true; }
            var context = this.context;
            if (clear) {
                context.clearRect(0, 0, this.width, this.height);
            }
            var needDraw = false;
            var elementsCount = this.componentsDrawings && this.componentsDrawings.length;
            if (elementsCount) {
                for (var i = 0; i < elementsCount; i++) {
                    this.componentsDrawings[i].draw(context, time);
                    needDraw = needDraw || this.componentsDrawings[i].needDraw;
                }
                if (needDraw) {
                    this.requestId && window.cancelAnimationFrame(this.requestId);
                    this.requestId = window.requestAnimationFrame(function (time) { return _this.draw(time); });
                }
            }
        };
        return NgCanvas;
    }());
    NgCanvas.nodeName = 'canvas';

    var NAMESPACE_URIS = {
        svg: 'http://www.w3.org/2000/svg',
        xhtml: 'http://www.w3.org/1999/xhtml',
        xlink: 'http://www.w3.org/1999/xlink',
        xml: 'http://www.w3.org/XML/1998/namespace',
        xmlns: 'http://www.w3.org/2000/xmlns/',
    };
    var COMPONENT_REGEX = /%COMP%/g;
    var COMPONENT_VARIABLE = '%COMP%';
    var HOST_ATTR = "_nghost-" + COMPONENT_VARIABLE;
    var CONTENT_ATTR = "_ngcontent-" + COMPONENT_VARIABLE;
    function shimContentAttribute(componentShortId) {
        return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);
    }
    function shimHostAttribute(componentShortId) {
        return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);
    }
    function flattenStyles(compId, styles, target) {
        // tslint:disable-next-line:prefer-for-of
        for (var i = 0; i < styles.length; i++) {
            var style = styles[i];
            if (Array.isArray(style)) {
                flattenStyles(compId, style, target);
            }
            else {
                style = style.replace(COMPONENT_REGEX, compId);
                target.push(style);
            }
        }
        return target;
    }

    var ngDevMode = window.ngDevMode;
    var NG_DEV_MODE = typeof ngDevMode === 'undefined' || !!ngDevMode;
    // tslint:disable-next-line:typedef
    function decoratePreventDefault(eventHandler) {
        // `DebugNode.triggerEventHandler` needs to know if the listener was created with
        // decoratePreventDefault or is a listener added outside the Angular context so it can handle the
        // two differently. In the first case, the special '__ngUnwrap__' token is passed to the unwrap
        // the listener (see below).
        return function (event) {
            // Ivy uses '__ngUnwrap__' as a special token that allows us to unwrap the function
            // so that it can be invoked programmatically by `DebugNode.triggerEventHandler`. The debug_node
            // can inspect the listener toString contents for the existence of this special token. Because
            // the token is a string literal, it is ensured to not be modified by compiled code.
            if (event === '__ngUnwrap__') {
                return eventHandler;
            }
            var allowDefaultBehavior = eventHandler(event);
            if (allowDefaultBehavior === false) {
                // TODO(tbosch): move preventDefault into event plugins...
                event.preventDefault();
                event.returnValue = false;
            }
            return undefined;
        };
    }
    var DefaultDomRenderer2 = /** @class */ (function () {
        function DefaultDomRenderer2(eventManager) {
            this.eventManager = eventManager;
            this.data = Object.create(null);
        }
        DefaultDomRenderer2.prototype.destroy = function () { };
        DefaultDomRenderer2.prototype.createElement = function (name, namespace) {
            if (namespace) {
                // In cases where Ivy (not ViewEngine) is giving us the actual namespace, the look up by key
                // will result in undefined, so we just return the namespace here.
                return document.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);
            }
            return document.createElement(name);
        };
        DefaultDomRenderer2.prototype.createComment = function (value) {
            return document.createComment(value);
        };
        DefaultDomRenderer2.prototype.createText = function (value) {
            return document.createTextNode(value);
        };
        DefaultDomRenderer2.prototype.appendChild = function (parent, newChild) {
            parent.appendChild(newChild);
        };
        DefaultDomRenderer2.prototype.insertBefore = function (parent, newChild, refChild) {
            if (parent) {
                parent.insertBefore(newChild, refChild);
            }
        };
        DefaultDomRenderer2.prototype.removeChild = function (parent, oldChild) {
            if (parent) {
                parent.removeChild(oldChild);
            }
        };
        DefaultDomRenderer2.prototype.selectRootElement = function (selectorOrNode, preserveContent) {
            var el = typeof selectorOrNode === 'string'
                ? document.querySelector(selectorOrNode)
                : selectorOrNode;
            if (!el) {
                throw new Error("The selector \"" + selectorOrNode + "\" did not match any elements");
            }
            if (!preserveContent) {
                el.textContent = '';
            }
            return el;
        };
        DefaultDomRenderer2.prototype.parentNode = function (node) {
            return node.parentNode;
        };
        DefaultDomRenderer2.prototype.nextSibling = function (node) {
            return node.nextSibling;
        };
        DefaultDomRenderer2.prototype.setAttribute = function (el, name, value, namespace) {
            if (namespace) {
                name = namespace + ':' + name;
                // TODO(FW-811): Ivy may cause issues here because it's passing around
                // full URIs for namespaces, therefore this lookup will fail.
                var namespaceUri = NAMESPACE_URIS[namespace];
                if (namespaceUri) {
                    el.setAttributeNS(namespaceUri, name, value);
                }
                else {
                    el.setAttribute(name, value);
                }
            }
            else {
                el.setAttribute(name, value);
            }
        };
        DefaultDomRenderer2.prototype.removeAttribute = function (el, name, namespace) {
            if (namespace) {
                // TODO(FW-811): Ivy may cause issues here because it's passing around
                // full URIs for namespaces, therefore this lookup will fail.
                var namespaceUri = NAMESPACE_URIS[namespace];
                if (namespaceUri) {
                    el.removeAttributeNS(namespaceUri, name);
                }
                else {
                    // TODO(FW-811): Since ivy is passing around full URIs for namespaces
                    // this could result in properties like `http://www.w3.org/2000/svg:cx="123"`,
                    // which is wrong.
                    el.removeAttribute(namespace + ":" + name);
                }
            }
            else {
                el.removeAttribute(name);
            }
        };
        DefaultDomRenderer2.prototype.addClass = function (el, name) {
            el.classList.add(name);
        };
        DefaultDomRenderer2.prototype.removeClass = function (el, name) {
            el.classList.remove(name);
        };
        DefaultDomRenderer2.prototype.setStyle = function (el, style, value, flags) {
            // tslint:disable-next-line:no-bitwise
            if (flags &
                (core.RendererStyleFlags2.DashCase | core.RendererStyleFlags2.Important)) {
                el.style.setProperty(style, value, flags & core.RendererStyleFlags2.Important ? 'important' : '');
            }
            else {
                el.style[style] = value;
            }
        };
        DefaultDomRenderer2.prototype.removeStyle = function (el, style, flags) {
            // tslint:disable-next-line:no-bitwise
            if (flags & core.RendererStyleFlags2.DashCase) {
                el.style.removeProperty(style);
            }
            else {
                // IE requires '' instead of null
                // see https://github.com/angular/angular/issues/7916
                el.style[style] = '';
            }
        };
        DefaultDomRenderer2.prototype.setProperty = function (el, name, value) {
            // tslint:disable-next-line:no-unused-expression
            NG_DEV_MODE && checkNoSyntheticProp(name, 'property');
            el[name] = value;
        };
        DefaultDomRenderer2.prototype.setValue = function (node, value) {
            node.nodeValue = value;
        };
        DefaultDomRenderer2.prototype.listen = function (target, event, callback) {
            // tslint:disable-next-line:no-unused-expression
            NG_DEV_MODE && checkNoSyntheticProp(event, 'listener');
            if (typeof target === 'string') {
                return (this.eventManager.addGlobalEventListener(target, event, decoratePreventDefault(callback)));
            }
            return (this.eventManager.addEventListener(target, event, decoratePreventDefault(callback)));
        };
        return DefaultDomRenderer2;
    }());
    var ɵ0 = function () { return '@'.charCodeAt(0); };
    var AT_CHARCODE = (ɵ0)();
    // tslint:disable-next-line:typedef
    function checkNoSyntheticProp(name, nameKind) {
        if (name.charCodeAt(0) === AT_CHARCODE) {
            throw new Error("Found the synthetic " + nameKind + " " + name + ". Please include either \"BrowserAnimationsModule\" or \"NoopAnimationsModule\" in your application.");
        }
    }
    var EmulatedEncapsulationDomRenderer2 = /** @class */ (function (_super) {
        __extends(EmulatedEncapsulationDomRenderer2, _super);
        function EmulatedEncapsulationDomRenderer2(eventManager, sharedStylesHost, component, appId) {
            var _this = _super.call(this, eventManager) || this;
            _this.component = component;
            var styles = flattenStyles(appId + '-' + component.id, component.styles, []);
            sharedStylesHost.addStyles(styles);
            _this.contentAttr = shimContentAttribute(appId + '-' + component.id);
            _this.hostAttr = shimHostAttribute(appId + '-' + component.id);
            return _this;
        }
        // tslint:disable-next-line:typedef
        EmulatedEncapsulationDomRenderer2.prototype.applyToHost = function (element) {
            _super.prototype.setAttribute.call(this, element, this.hostAttr, '');
        };
        EmulatedEncapsulationDomRenderer2.prototype.createElement = function (parent, name) {
            var el = _super.prototype.createElement.call(this, parent, name);
            _super.prototype.setAttribute.call(this, el, this.contentAttr, '');
            return el;
        };
        return EmulatedEncapsulationDomRenderer2;
    }(DefaultDomRenderer2));
    var ShadowDomRenderer = /** @class */ (function (_super) {
        __extends(ShadowDomRenderer, _super);
        function ShadowDomRenderer(eventManager, sharedStylesHost, hostEl, component) {
            var _this = _super.call(this, eventManager) || this;
            _this.sharedStylesHost = sharedStylesHost;
            _this.hostEl = hostEl;
            _this.component = component;
            if (component.encapsulation === core.ViewEncapsulation.ShadowDom) {
                _this.shadowRoot = hostEl.attachShadow({ mode: 'open' });
            }
            else {
                _this.shadowRoot = hostEl.createShadowRoot();
            }
            _this.sharedStylesHost.addHost(_this.shadowRoot);
            var styles = flattenStyles(component.id, component.styles, []);
            for (var i = 0; i < styles.length; i++) {
                var styleEl = document.createElement('style');
                styleEl.textContent = styles[i];
                _this.shadowRoot.appendChild(styleEl);
            }
            return _this;
        }
        ShadowDomRenderer.prototype.nodeOrShadowRoot = function (node) {
            return node === this.hostEl ? this.shadowRoot : node;
        };
        ShadowDomRenderer.prototype.destroy = function () {
            this.sharedStylesHost.removeHost(this.shadowRoot);
        };
        ShadowDomRenderer.prototype.appendChild = function (parent, newChild) {
            return _super.prototype.appendChild.call(this, this.nodeOrShadowRoot(parent), newChild);
        };
        ShadowDomRenderer.prototype.insertBefore = function (parent, newChild, refChild) {
            return _super.prototype.insertBefore.call(this, this.nodeOrShadowRoot(parent), newChild, refChild);
        };
        ShadowDomRenderer.prototype.removeChild = function (parent, oldChild) {
            return _super.prototype.removeChild.call(this, this.nodeOrShadowRoot(parent), oldChild);
        };
        ShadowDomRenderer.prototype.parentNode = function (node) {
            return this.nodeOrShadowRoot(_super.prototype.parentNode.call(this, this.nodeOrShadowRoot(node)));
        };
        return ShadowDomRenderer;
    }(DefaultDomRenderer2));

    function getMetadataArgsStorage() {
        if (!window.canvasRendererMetadataArgsStorage) {
            window.canvasRendererMetadataArgsStorage = new MetadataArgsStorage();
        }
        return window.canvasRendererMetadataArgsStorage;
    }
    var MetadataArgsStorage = /** @class */ (function () {
        function MetadataArgsStorage() {
            this.elements = new Map();
        }
        return MetadataArgsStorage;
    }());

    var DefaultCanvasRenderConfig = {
        property: true,
    };
    var CanvasRenderConfig = new core.InjectionToken('CanvasRenderConfig');

    var CanvasDomRendererFactory = /** @class */ (function () {
        function CanvasDomRendererFactory(eventManager, sharedStylesHost, appId, ngZone, canvasConfig) {
            this.eventManager = eventManager;
            this.sharedStylesHost = sharedStylesHost;
            this.appId = appId;
            this.ngZone = ngZone;
            this.canvasConfig = canvasConfig;
            this.rendererByCompId = new Map();
            this.defaultRenderer = new DefaultDomRenderer2(eventManager);
        }
        CanvasDomRendererFactory.prototype.end = function () { };
        CanvasDomRendererFactory.prototype.createRenderer = function (element, type) {
            if (!element || !type) {
                return this.defaultRenderer;
            }
            // @ts-ignore
            if (type['type'] && type['type'].isCanvasComponent) {
                var renderer = this.rendererByCompId.get(type.id);
                if (!renderer) {
                    renderer = new CanvasRenderer(this.eventManager, this.sharedStylesHost, type, this.appId, this.ngZone, this.canvasConfig);
                    this.rendererByCompId.set(type.id, renderer);
                }
                renderer.applyToHost(element);
                return renderer;
            }
            switch (type.encapsulation) {
                case core.ViewEncapsulation.Emulated: {
                    var renderer = this.rendererByCompId.get(type.id);
                    if (!renderer) {
                        renderer = new EmulatedEncapsulationDomRenderer2(this.eventManager, this.sharedStylesHost, type, this.appId);
                        this.rendererByCompId.set(type.id, renderer);
                    }
                    renderer.applyToHost(element);
                    return renderer;
                }
                case core.ViewEncapsulation.ShadowDom:
                    return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);
                default: {
                    if (!this.rendererByCompId.has(type.id)) {
                        var styles = flattenStyles(type.id, type.styles, []);
                        this.sharedStylesHost.addStyles(styles);
                        this.rendererByCompId.set(type.id, this.defaultRenderer);
                    }
                    return this.defaultRenderer;
                }
            }
        };
        return CanvasDomRendererFactory;
    }());
    CanvasDomRendererFactory.decorators = [
        { type: core.Injectable }
    ];
    CanvasDomRendererFactory.ctorParameters = function () { return [
        { type: platformBrowser.EventManager },
        { type: platformBrowser.ɵDomSharedStylesHost },
        { type: String },
        { type: core.NgZone },
        { type: undefined, decorators: [{ type: core.Inject, args: [CanvasRenderConfig,] }] }
    ]; };
    var CanvasRenderer = /** @class */ (function () {
        function CanvasRenderer(eventManager, sharedStylesHost, component, appId, ngZone, config) {
            this.component = component;
            this.ngZone = ngZone;
            this.config = config;
            this.canvasElements = getMetadataArgsStorage().elements;
            var styles = flattenStyles(appId + '-' + component.id, component.styles, []);
            sharedStylesHost.addStyles(styles);
            this.contentAttr = shimContentAttribute(appId + '-' + component.id);
            this.hostAttr = shimHostAttribute(appId + '-' + component.id);
        }
        // tslint:disable-next-line:typedef
        CanvasRenderer.prototype.applyToHost = function (element) {
            this.setAttribute(element, this.hostAttr, '');
        };
        CanvasRenderer.prototype.createElement = function (name, namespace) {
            var Component = this.canvasElements.get(name);
            if (Component) {
                return new Component();
            }
            else if (name === 'canvas') {
                var canvas = new NgCanvas(this.ngZone, this.config);
                canvas.element.setAttribute(this.contentAttr, '');
                return canvas;
            }
            else {
                var element = void 0;
                if (namespace) {
                    // In cases where Ivy (not ViewEngine) is giving us the actual namespace, the look up by key
                    // will result in undefined, so we just return the namespace here.
                    element = document.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);
                }
                else {
                    element = document.createElement(name);
                }
                this.setAttribute(element, this.contentAttr, '');
                return element;
            }
        };
        CanvasRenderer.prototype.createText = function (value) {
            return document.createTextNode(value);
        };
        CanvasRenderer.prototype.selectRootElement = function (selectorOrNode, preserveContent) {
            var el = typeof selectorOrNode === 'string'
                ? document.querySelector(selectorOrNode)
                : selectorOrNode;
            if (!el) {
                throw new Error("The selector \"" + selectorOrNode + "\" did not match any elements");
            }
            if (!preserveContent) {
                el.textContent = '';
            }
            return el;
        };
        CanvasRenderer.prototype.addClass = function (el, name) {
            if (el.classList) {
                el.classList.add(name);
            }
            else {
                el.addClass(name);
            }
        };
        CanvasRenderer.prototype.removeClass = function (el, name) {
            if (el.classList) {
                el.classList.add(name);
            }
            else {
                el.removeClass(name);
            }
        };
        CanvasRenderer.prototype.appendChild = function (parent, newChild) {
            // parent.appendChild(newChild);
            if (!newChild) {
                return;
            }
            newChild.parent = parent;
            if (newChild instanceof NgCanvas) {
                parent.appendChild(newChild.element);
            }
            else {
                parent.appendChild(newChild);
            }
        };
        CanvasRenderer.prototype.removeChild = function (parent, oldChild) {
            // tslint:disable-next-line:no-unused-expression
            oldChild.destroy && oldChild.destroy();
            if (parent) {
                parent.removeChild(oldChild);
            }
            if (oldChild && oldChild.parent instanceof NgCanvas) {
                oldChild.parent.removeChild(oldChild);
            }
        };
        CanvasRenderer.prototype.createComment = function (value) {
            return document.createComment(value);
        };
        CanvasRenderer.prototype.destroy = function () { };
        CanvasRenderer.prototype.insertBefore = function (parent, newChild, refChild) {
            if (parent && parent.insertBefore) {
                newChild.parent = parent;
                if (newChild instanceof NgCanvas) {
                    parent.insertBefore(newChild.element, refChild);
                }
                else {
                    parent.insertBefore(newChild, refChild);
                }
            }
        };
        CanvasRenderer.prototype.listen = function (target, eventName, callback) {
            var callbackFunc = function (e) { return callback.call(target, e); };
            if (target instanceof NgCanvas) {
                target = target.element;
            }
            target.addEventListener(eventName, callbackFunc);
            return function () { return target.removeEventListener(eventName, callbackFunc); };
        };
        // tslint:disable-next-line:typedef
        CanvasRenderer.prototype.nextSibling = function (node) {
            return {
                previous: node,
                next: node.nextSibling,
            };
        };
        CanvasRenderer.prototype.parentNode = function (node) {
            return node.parent ? node.parent : node;
        };
        CanvasRenderer.prototype.removeAttribute = function (el, name, namespace) {
            if (namespace) {
                // TODO(FW-811): Ivy may cause issues here because it's passing around
                // full URIs for namespaces, therefore this lookup will fail.
                var namespaceUri = NAMESPACE_URIS[namespace];
                if (namespaceUri) {
                    el.removeAttributeNS(namespaceUri, name);
                }
                else {
                    // TODO(FW-811): Since ivy is passing around full URIs for namespaces
                    // this could result in properties like `http://www.w3.org/2000/svg:cx="123"`,
                    // which is wrong.
                    el.removeAttribute(namespace + ":" + name);
                }
            }
            else {
                el.removeAttribute(name);
            }
        };
        CanvasRenderer.prototype.removeStyle = function (el, style, flags) {
            el.removeStyle(style, flags);
        };
        CanvasRenderer.prototype.setAttribute = function (el, name, value, namespace) {
            if (namespace) {
                name = namespace + ':' + name;
                // TODO(FW-811): Ivy may cause issues here because it's passing around
                // full URIs for namespaces, therefore this lookup will fail.
                var namespaceUri = NAMESPACE_URIS[namespace];
                if (namespaceUri) {
                    el.setAttributeNS(namespaceUri, name, value);
                }
                else {
                    el.setAttribute(name, value);
                }
            }
            else {
                el.setAttribute(name, value);
            }
        };
        CanvasRenderer.prototype.setProperty = function (el, name, value) {
            el.setNgProperty(name, value);
        };
        CanvasRenderer.prototype.setStyle = function (el, style, value, flags) {
            if (el.style) {
                // tslint:disable-next-line:no-bitwise
                if (flags & core.RendererStyleFlags2.DashCase) {
                    el.style.setProperty(
                    // tslint:disable-next-line:no-bitwise
                    style, value, flags & core.RendererStyleFlags2.Important ? 'important' : '');
                }
                else {
                    el.style[style] = value;
                }
            }
            else {
                el.setStyle(style, value, flags);
            }
        };
        CanvasRenderer.prototype.setValue = function (node, value) {
            if (node.setValue) {
                node.setValue(value);
            }
            else {
                node.nodeValue = value;
            }
        };
        return CanvasRenderer;
    }());

    var CanvasDomModule = /** @class */ (function () {
        function CanvasDomModule() {
        }
        // tslint:disable-next-line:typedef
        CanvasDomModule.forRoot = function (elements) {
            return {
                ngModule: CanvasDomModule,
            };
        };
        return CanvasDomModule;
    }());
    CanvasDomModule.decorators = [
        { type: core.NgModule, args: [{
                    imports: [common.CommonModule],
                    providers: [
                        {
                            provide: core.RendererFactory2,
                            useClass: CanvasDomRendererFactory,
                            deps: [platformBrowser.EventManager, platformBrowser.ɵDomSharedStylesHost, core.APP_ID, core.NgZone],
                        },
                    ],
                    schemas: [core.NO_ERRORS_SCHEMA],
                },] }
    ];

    // tslint:disable-next-line:typedef
    function CanvasComponent(target) {
        target.isCanvasComponent = true;
    }

    // tslint:disable-next-line:typedef
    // tslint:disable-next-line:typedef
    function CanvasElement(config) {
        // tslint:disable-next-line:only-arrow-functions typedef
        return function (target) {
            getMetadataArgsStorage().elements.set(config.selector, target);
        };
    }

    /**
     * Generated bundle index. Do not edit.
     */

    exports.CanvasComponent = CanvasComponent;
    exports.CanvasDomModule = CanvasDomModule;
    exports.CanvasDomRendererFactory = CanvasDomRendererFactory;
    exports.CanvasElement = CanvasElement;
    exports.CanvasRenderer = CanvasRenderer;
    exports.MetadataArgsStorage = MetadataArgsStorage;
    exports.NgCanvas = NgCanvas;
    exports.getMetadataArgsStorage = getMetadataArgsStorage;
    exports.ɵb = CanvasRenderConfig;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=angular-canvas.umd.js.map
