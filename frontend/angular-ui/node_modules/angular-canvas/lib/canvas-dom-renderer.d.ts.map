{"version":3,"file":"canvas-dom-renderer.d.ts","sources":["canvas-dom-renderer.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import { NgZone, Renderer2, RendererFactory2, RendererStyleFlags2, RendererType2 } from '@angular/core';\nimport { NgCanvasElement } from './components/ng-canvas-element';\nimport { EventManager, ÉµDomSharedStylesHost as DomSharedStylesHost } from '@angular/platform-browser';\nimport { CanvasRenderConfigModel } from './tokens/canvas-resize-obserer-enable-token';\nexport declare class CanvasDomRendererFactory implements RendererFactory2 {\n    private readonly eventManager;\n    private readonly sharedStylesHost;\n    private readonly appId;\n    private readonly ngZone;\n    private readonly canvasConfig;\n    private rendererByCompId;\n    private defaultRenderer;\n    constructor(eventManager: EventManager, sharedStylesHost: DomSharedStylesHost, appId: string, ngZone: NgZone, canvasConfig: CanvasRenderConfigModel);\n    end(): void;\n    createRenderer(element: any, type: RendererType2 | null): Renderer2;\n}\nexport declare class CanvasRenderer implements Renderer2 {\n    private component;\n    private ngZone;\n    private config;\n    private contentAttr;\n    private hostAttr;\n    private readonly canvasElements;\n    readonly data: {\n        [p: string]: any;\n    };\n    destroyNode: ((node: any) => void) | null;\n    constructor(eventManager: EventManager, sharedStylesHost: DomSharedStylesHost, component: RendererType2, appId: string, ngZone: NgZone, config: any);\n    applyToHost(element: any): void;\n    createElement(name: string, namespace?: string | null): any;\n    createText(value: string): any;\n    selectRootElement(selectorOrNode: any, preserveContent?: boolean): any;\n    addClass(el: NgCanvasElement, name: string): void;\n    removeClass(el: NgCanvasElement, name: string): void;\n    appendChild(parent: NgCanvasElement, newChild: NgCanvasElement): void;\n    removeChild(parent: NgCanvasElement, oldChild: any): void;\n    createComment(value: string): any;\n    destroy(): void;\n    insertBefore(parent: NgCanvasElement, newChild: any, refChild: any): void;\n    listen(target: any, eventName: string, callback: (event: any) => boolean | void): () => void;\n    nextSibling(node: any): {\n        previous: any;\n        next: any;\n    };\n    parentNode(node: any): any;\n    removeAttribute(el: NgCanvasElement, name: string, namespace?: string | null): void;\n    removeStyle(el: NgCanvasElement, style: string, flags?: RendererStyleFlags2): void;\n    setAttribute(el: NgCanvasElement, name: string, value: string, namespace?: string | null): void;\n    setProperty(el: NgCanvasElement, name: string, value: any): void;\n    setStyle(el: NgCanvasElement, style: string, value: any, flags?: RendererStyleFlags2): void;\n    setValue(node: any, value: string): void;\n}\n"]}