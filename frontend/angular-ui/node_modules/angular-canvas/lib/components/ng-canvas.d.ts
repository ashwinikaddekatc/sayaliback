import { NgCanvasElement } from './ng-canvas-element';
import { NgZone, RendererStyleFlags2 } from '@angular/core';
import { CanvasRenderConfigModel } from '../tokens/canvas-resize-obserer-enable-token';
export declare class NgCanvas {
    private readonly ngZone;
    private readonly config;
    static nodeName: string;
    readonly context: CanvasRenderingContext2D;
    readonly element: HTMLCanvasElement;
    get width(): number;
    get height(): number;
    private requestId;
    private _width;
    private _height;
    private _parentElement;
    set parent(element: any);
    private subResizeEvent;
    resetCanvasSize(): void;
    get parent(): any;
    private _parent;
    private readonly componentSet;
    private componentsDrawings;
    private resizeObserver;
    constructor(ngZone: NgZone, config: CanvasRenderConfigModel);
    destroy(): void;
    addClass(name: any): void;
    appendChild(newChild: NgCanvasElement): void;
    removeChild(oldChild: NgCanvasElement): void;
    insertBefore(newChild: any, refChild: any): void;
    recalculateElementsDraw(): void;
    removeAttribute(name: string, namespace?: string | null): void;
    removeClass(name: string): void;
    removeStyle(style: string, flags?: RendererStyleFlags2): void;
    setAttribute(name: string, value: string): void;
    setNgAttribute(name: string, value: string, namespace?: string | null): void;
    setNgProperty(name: string, value: any): void;
    setStyle(style: string, value: any, flags?: RendererStyleFlags2): void;
    setValue(value: any): void;
    drawAll(clear?: boolean): void;
    private drawWithoutRequestAnimation;
    draw(time: number, clear?: boolean): void;
}
