import { NgZone, Renderer2, RendererFactory2, RendererStyleFlags2, RendererType2 } from '@angular/core';
import { NgCanvasElement } from './components/ng-canvas-element';
import { EventManager, ÉµDomSharedStylesHost as DomSharedStylesHost } from '@angular/platform-browser';
import { CanvasRenderConfigModel } from './tokens/canvas-resize-obserer-enable-token';
export declare class CanvasDomRendererFactory implements RendererFactory2 {
    private readonly eventManager;
    private readonly sharedStylesHost;
    private readonly appId;
    private readonly ngZone;
    private readonly canvasConfig;
    private rendererByCompId;
    private defaultRenderer;
    constructor(eventManager: EventManager, sharedStylesHost: DomSharedStylesHost, appId: string, ngZone: NgZone, canvasConfig: CanvasRenderConfigModel);
    end(): void;
    createRenderer(element: any, type: RendererType2 | null): Renderer2;
}
export declare class CanvasRenderer implements Renderer2 {
    private component;
    private ngZone;
    private config;
    private contentAttr;
    private hostAttr;
    private readonly canvasElements;
    readonly data: {
        [p: string]: any;
    };
    destroyNode: ((node: any) => void) | null;
    constructor(eventManager: EventManager, sharedStylesHost: DomSharedStylesHost, component: RendererType2, appId: string, ngZone: NgZone, config: any);
    applyToHost(element: any): void;
    createElement(name: string, namespace?: string | null): any;
    createText(value: string): any;
    selectRootElement(selectorOrNode: any, preserveContent?: boolean): any;
    addClass(el: NgCanvasElement, name: string): void;
    removeClass(el: NgCanvasElement, name: string): void;
    appendChild(parent: NgCanvasElement, newChild: NgCanvasElement): void;
    removeChild(parent: NgCanvasElement, oldChild: any): void;
    createComment(value: string): any;
    destroy(): void;
    insertBefore(parent: NgCanvasElement, newChild: any, refChild: any): void;
    listen(target: any, eventName: string, callback: (event: any) => boolean | void): () => void;
    nextSibling(node: any): {
        previous: any;
        next: any;
    };
    parentNode(node: any): any;
    removeAttribute(el: NgCanvasElement, name: string, namespace?: string | null): void;
    removeStyle(el: NgCanvasElement, style: string, flags?: RendererStyleFlags2): void;
    setAttribute(el: NgCanvasElement, name: string, value: string, namespace?: string | null): void;
    setProperty(el: NgCanvasElement, name: string, value: any): void;
    setStyle(el: NgCanvasElement, style: string, value: any, flags?: RendererStyleFlags2): void;
    setValue(node: any, value: string): void;
}
