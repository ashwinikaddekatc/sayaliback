import { Renderer2, RendererStyleFlags2, RendererType2 } from '@angular/core';
import { EventManager, ÉµDomSharedStylesHost as DomSharedStylesHost } from '@angular/platform-browser';
export declare class DefaultDomRenderer2 implements Renderer2 {
    private eventManager;
    constructor(eventManager: EventManager);
    data: {
        [key: string]: any;
    };
    destroyNode: null;
    destroy(): void;
    createElement(name: string, namespace?: string): any;
    createComment(value: string): any;
    createText(value: string): any;
    appendChild(parent: any, newChild: any): void;
    insertBefore(parent: any, newChild: any, refChild: any): void;
    removeChild(parent: any, oldChild: any): void;
    selectRootElement(selectorOrNode: string | any, preserveContent?: boolean): any;
    parentNode(node: any): any;
    nextSibling(node: any): any;
    setAttribute(el: any, name: string, value: string, namespace?: string): void;
    removeAttribute(el: any, name: string, namespace?: string): void;
    addClass(el: any, name: string): void;
    removeClass(el: any, name: string): void;
    setStyle(el: any, style: string, value: any, flags: RendererStyleFlags2): void;
    removeStyle(el: any, style: string, flags: RendererStyleFlags2): void;
    setProperty(el: any, name: string, value: any): void;
    setValue(node: any, value: string): void;
    listen(target: 'window' | 'document' | 'body' | any, event: string, callback: (event: any) => boolean): () => void;
}
export declare class EmulatedEncapsulationDomRenderer2 extends DefaultDomRenderer2 {
    private component;
    private contentAttr;
    private hostAttr;
    constructor(eventManager: EventManager, sharedStylesHost: DomSharedStylesHost, component: RendererType2, appId: string);
    applyToHost(element: any): void;
    createElement(parent: any, name: string): Element;
}
export declare class ShadowDomRenderer extends DefaultDomRenderer2 {
    private sharedStylesHost;
    private hostEl;
    private component;
    private shadowRoot;
    constructor(eventManager: EventManager, sharedStylesHost: DomSharedStylesHost, hostEl: any, component: RendererType2);
    private nodeOrShadowRoot;
    destroy(): void;
    appendChild(parent: any, newChild: any): void;
    insertBefore(parent: any, newChild: any, refChild: any): void;
    removeChild(parent: any, oldChild: any): void;
    parentNode(node: any): any;
}
