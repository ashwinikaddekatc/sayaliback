package com.realnet.ncso.repository1;

import java.util.List;
import java.util.Optional;
import java.util.stream.Stream;

import javax.persistence.QueryHint;
import javax.transaction.Transactional;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.jpa.repository.QueryHints;
import org.springframework.data.repository.query.Param;
import org.springframework.stereotype.Repository;

import com.realnet.ncso.entity1.OrderDetails;
@Repository
@Transactional
public interface OrderDetailsRepository extends JpaRepository<OrderDetails,Long>{
	@Query(value="select * from nc_service_order where billing_id=?1",nativeQuery=true)
	public Optional<OrderDetails> findByBillingId(Long billingId);
	@Query(value="select * from nc_service_order where billing_id is not null",nativeQuery = true)
	public List<OrderDetails> findByCreditNoteNo();
	
	@Query(value="select customer_name from be_cust_master where customer_id"
			+ "  = (select customer_id from customer where customer_code =?1)",nativeQuery=true)
	String findCustomerName(String customerCode);
	
//	@Query(value="")
//	Page<OrderDetails> findAllByGrpLevel(Pageable pageable);

	@Query(value = " select\n"
			+ "        ncso.*  \n"
			+ "    from\n"
			+ "        nc_service_order ncso,\n"
			+ "        sec_users su,\n"
			+ "        sec_user_group su1 \n"
			+ "    where\n"
			+ "        ncso.department_code =:depDesc \n"
			+ "        and su.user_name = ncso.prepared_by \n"
			+ "        and su.usr_grp = su1.usr_grp \n"
			+ "        and su1.group_level >= :grpLevel \n"
			+ "          order by ncso.order_id desc ",
			countQuery= "select\n"
					+ "        count(*) \n"
					+ "    from\n"
					+ "        nc_service_order ncso,\n"
					+ "        sec_users su,\n"
					+ "        sec_user_group su1 \n"
					+ "    where\n"
					+ "        su.user_name = ncso.prepared_by \n"
					+ "        and su.usr_grp = su1.usr_grp \n"
					+ "        and su1.group_level >=:grpLevel \n"
					+ "        and ncso.department_code =:depDesc  "
					+ " 	   order by ncso.order_id desc",
			nativeQuery=true)
	Page<OrderDetails> getAllByDeptByGrpLvl (Pageable pageable,@Param("grpLevel") Long grpLevel,@Param("depDesc") String depDesc);

	@Query(value="SELECT\n"
	
			+ "    so.request_date,\n"
			+ "    it.description invoice_type_desc,\n"
			+ "    so.customer_code,\n"
			+ "    c.customer_name,\n"
			+ "    so.vessel_code,\n"
			+ "    so.vessel_name,\n"
			+ "    so.in_voyage,\n"
			+ "    so.out_voyage,\n"
			+ "    so.prepared_by,\n"
			+ "    so.status,"
			+ "    so.order_id,  "
			+ "	   it.invoice_type	"	
			+ "FROM\n"
			+ "    nc_service_order so,\n"
			+ "    ebs_invoice_type it,\n"
			+ "    ebs_customer     c\n"
			+ "WHERE\n"
			+ "        so.status != 'C'\n"
			+ "    AND so.invoice_type = it.invoice_type\n"
			+ "    AND so.customer_code = c.customer_code\n"
			+ "    AND so.customer_code = c.customer_code\n"
			+ "ORDER BY\n"
			+ "    so.order_id DESC",
			countQuery="SELECT COUNT(*) FROM (SELECT\n"
					+ "    so.request_date,\n"
					+ "    it.description invoice_type_desc,\n"
					+ "    so.customer_code,\n"
					+ "    c.customer_name,\n"
					+ "    so.vessel_code,\n"
					+ "    so.vessel_name,\n"
					+ "    so.in_voyage,\n"
					+ "    so.out_voyage,\n"
					+ "    so.prepared_by,\n"
					+ "    so.status\n"
					+ "FROM\n"
					+ "    nc_service_order so,\n"
					+ "    ebs_invoice_type it,\n"
					+ "    ebs_customer     c\n"
					+ "WHERE\n"
					+ "        so.status != 'C'\n"
					+ "    AND so.invoice_type = it.invoice_type\n"
					+ "    AND so.customer_code = c.customer_code\n"
					+ "    AND so.customer_code = c.customer_code\n"
					+ "ORDER BY\n"
					+ "    so.order_id DESC)"
					,nativeQuery=true)
		public List<Object> findAllCustom();
	
	
	
	  @QueryHints(value = {
	            @QueryHint(name =org.hibernate.jpa.QueryHints.HINT_FETCH_SIZE, value = "" + Integer.MIN_VALUE),
	            @QueryHint(name = org.hibernate.jpa.QueryHints.HINT_CACHEABLE, value = "false"),
	            @QueryHint(name = org.hibernate.jpa.QueryHints.HINT_READONLY, value = "true")
	    })
	@Query(value="SELECT\n"
	
			+ "    so.request_date,\n"
			+ "    it.description invoice_type_desc,\n"
			+ "    so.customer_code,\n"
			+ "    c.customer_name,\n"
			+ "    so.vessel_code,\n"
			+ "    so.vessel_name,\n"
			+ "    so.in_voyage,\n"
			+ "    so.out_voyage,\n"
			+ "    so.prepared_by,\n"
			+ "    so.status,"
			+ "    so.order_id,  "
			+ "	   it.invoice_type	"	
			+ "FROM\n"
			+ "    nc_service_order so,\n"
			+ "    ebs_invoice_type it,\n"
			+ "    ebs_customer     c\n"
			+ "WHERE\n"
			+ "        so.status != 'C'\n"
			+ "    AND so.invoice_type = it.invoice_type\n"
			+ "    AND so.customer_code = c.customer_code\n"
			+ "    AND so.customer_code = c.customer_code\n"
			+ "ORDER BY\n"
			+ "    so.order_id DESC"
					,nativeQuery=true)
		public Stream<Object> findAllCustom1();
	
//	Page<OrderDetails> findAll(Pageable pageable);
	 @Query(value = "SELECT * FROM NC_SERVICE_ORDER WHERE billing_id IS NOT NULL",
			    countQuery = "SELECT count(*) FROM NC_SERVICE_ORDER WHERE billing_id IS NOT NULL",
			    nativeQuery = true)
			  Page<OrderDetails> findByCreditNoteNotNull(Pageable pageable);
	 @Query(value="select * from  nc_service_order where prepared_by=:username",
			 countQuery="select count(*) from  nc_service_order where prepared_by=:username",
			 nativeQuery=true)
	 public List<OrderDetails> findByPreparedBy(Pageable pageable, @Param("username") String username);
	
	 
	 @Query(value="SELECT\n"
	 		+ "    cn.dispute_id,\n"
	 		+ "    cn.credit_note_no,\n"
	 		+ "    cn.billing_id,\n"
	 		+ "    b.invoice_no,\n"
	 		+ "    b.invoice_date,\n"
	 		+ "    so.invoice_type,\n"
	 		+ "    so.customer_order_no,\n"
	 		+ "    so.service_rendered_from,\n"
	 		+ "    so.service_rendered_to,\n"
	 		+ "    so.service_request_by,\n"
	 		+ "    so.customer_code,\n"
	 		+ "    (\n"
	 		+ "        SELECT\n"
	 		+ "            c.customer_name\n"
	 		+ "        FROM\n"
	 		+ "            ebs_customer c\n"
	 		+ "        WHERE\n"
	 		+ "            c.customer_code = so.customer_code\n"
	 		+ "    ) customer_name,\n"
	 		+ "    so.po_number,\n"
	 		+ "    so.vessel_code,\n"
	 		+ "    so.vessel_name,\n"
	 		+ "    so.in_voyage,\n"
	 		+ "    so.out_voyage,\n"
	 		+ "    so.line_code,\n"
	 		+ "    so.call_no,\n"
	 		+ "    so.loa,\n"
	 		+ "    so.loa_uom,\n"
	 		+ "    so.gt,\n"
	 		+ "    so.ata,\n"
	 		+ "    so.atd,\n"
	 		+ "    so.location,\n"
	 		+ "    so.remarks\n"
	 		+ "FROM\n"
	 		+ "    credit_note      cn,\n"
	 		+ "    billing          b,\n"
	 		+ "    nc_service_order so\n"
	 		+ "    WHERE\n"
	 		+ "        cn.billing_id = b.billing_id\n"
	 		+ "    AND EXISTS (\n"
	 		+ "        SELECT\n"
	 		+ "            NULL\n"
	 		+ "        FROM\n"
	 		+ "            billing_source bs\n"
	 		+ "        WHERE\n"
	 		+ "                bs.billing_id = b.billing_id\n"
	 		+ "            AND bs.source_table = 'NC_SERVICE_ORDER'\n"
	 		+ "            AND bs.source_id = so.order_id\n"
	 		+ "    )\n"
	 		+ "    AND cn.dispute_id IS NOT NULL\n"
	 		+ "    AND b.tos_code = 'BFS'\n"
	 		+ "    AND NOT EXISTS (\n"
	 		+ "        SELECT\n"
	 		+ "            NULL\n"
	 		+ "        FROM\n"
	 		+ "            nc_service_order so2\n"
	 		+ "        WHERE\n"
	 		+ "                so2.credit_note_no = cn.credit_note_no\n"
	 		+ "            AND so2.billing_id = cn.billing_id\n"
	 		+ "    )\n"
	 		+ "    AND (\n"
	 		+ "      cn.dispute_id LIKE NVL(:str,cn.dispute_id)\n"
	 		+ "      OR  cn.credit_note_no LIKE NVL(:str,cn.credit_note_no)\n"
	 		+ "      OR  cn.billing_id LIKE NVL(:str,cn.billing_id)\n"
	 		+ "      OR  b.invoice_no LIKE NVL(:str,b.invoice_no)\n"
	 		+ "      OR b.INVOICE_TYPE LIKE NVL(:str,b.INVOICE_TYPE)\n"
	 		+ "      )\n"
	 		+ "    ORDER BY 1 ",
	 		countQuery="SELECT\n"
	 				+ " count(*) "
	 				+ "FROM\n"
	 				+ "    credit_note      cn,\n"
	 				+ "    billing          b,\n"
	 				+ "    nc_service_order so\n"
	 				+ "    WHERE\n"
	 				+ "        cn.billing_id = b.billing_id\n"
	 				+ "    AND EXISTS (\n"
	 				+ "        SELECT\n"
	 				+ "            NULL\n"
	 				+ "        FROM\n"
	 				+ "            billing_source bs\n"
	 				+ "        WHERE\n"
	 				+ "                bs.billing_id = b.billing_id\n"
	 				+ "            AND bs.source_table = 'NC_SERVICE_ORDER'\n"
	 				+ "            AND bs.source_id = so.order_id\n"
	 				+ "    )\n"
	 				+ "    AND cn.dispute_id IS NOT NULL\n"
	 				+ "    AND b.tos_code = 'BFS'\n"
	 				+ "    AND NOT EXISTS (\n"
	 				+ "        SELECT\n"
	 				+ "            NULL\n"
	 				+ "        FROM\n"
	 				+ "            nc_service_order so2\n"
	 				+ "        WHERE\n"
	 				+ "                so2.credit_note_no = cn.credit_note_no\n"
	 				+ "            AND so2.billing_id = cn.billing_id\n"
	 				+ "    )\n"
	 				+ "    AND (\n"
	 				+ "      cn.dispute_id LIKE NVL(:str,cn.dispute_id)\n"
	 				+ "      OR  cn.credit_note_no LIKE NVL(:str,cn.credit_note_no)\n"
	 				+ "      OR  cn.billing_id LIKE NVL(:str,cn.billing_id)\n"
	 				+ "      OR  b.invoice_no LIKE NVL(:str,b.invoice_no)\n"
	 				+ "      OR b.INVOICE_TYPE LIKE NVL(:str,b.INVOICE_TYPE)\n"
	 				+ "      )\n"
	 				+ "    ORDER BY 1 "
	 		,nativeQuery=true)
	 public List<Object> getAllCreditCustom(@Param("str") String str);
	 
	 @Query(value="SELECT\n"
		 		+ "    cn.dispute_id,\n"
		 		+ "    cn.credit_note_no,\n"
		 		+ "    cn.billing_id,\n"
		 		+ "    b.invoice_no,\n"
		 		+ "    b.invoice_date,\n"
		 		+ "    so.invoice_type,\n"
		 		+ "    so.customer_order_no,\n"
		 		+ "    so.service_rendered_from,\n"
		 		+ "    so.service_rendered_to,\n"
		 		+ "    so.service_request_by,\n"
		 		+ "    so.customer_code,\n"
		 		+ "    (\n"
		 		+ "        SELECT\n"
		 		+ "            c.customer_name\n"
		 		+ "        FROM\n"
		 		+ "            ebs_customer c\n"
		 		+ "        WHERE\n"
		 		+ "            c.customer_code = so.customer_code\n"
		 		+ "    ) customer_name,\n"
		 		+ "    so.po_number,\n"
		 		+ "    so.vessel_code,\n"
		 		+ "    so.vessel_name,\n"
		 		+ "    so.in_voyage,\n"
		 		+ "    so.out_voyage,\n"
		 		+ "    so.line_code,\n"
		 		+ "    so.call_no,\n"
		 		+ "    so.loa,\n"
		 		+ "    so.loa_uom,\n"
		 		+ "    so.gt,\n"
		 		+ "    so.ata,\n"
		 		+ "    so.atd,\n"
		 		+ "    so.location,\n"
		 		+ "    so.remarks\n"
		 		+ "FROM\n"
		 		+ "    credit_note      cn,\n"
		 		+ "    billing          b,\n"
		 		+ "    nc_service_order so\n"
		 		+ "WHERE\n"
		 		+ "        cn.billing_id = b.billing_id\n"
		 		+ "    AND EXISTS (\n"
		 		+ "        SELECT\n"
		 		+ "            NULL\n"
		 		+ "        FROM\n"
		 		+ "            billing_source bs\n"
		 		+ "        WHERE\n"
		 		+ "                bs.billing_id = b.billing_id\n"
		 		+ "            AND bs.source_table = 'NC_SERVICE_ORDER'\n"
		 		+ "            AND bs.source_id = so.order_id\n"
		 		+ "    )\n"
		 		+ "    AND cn.dispute_id IS NOT NULL\n"
		 		+ "    AND b.tos_code = 'BFS'\n"
		 		+ "    AND NOT EXISTS (\n"
		 		+ "        SELECT\n"
		 		+ "            NULL\n"
		 		+ "        FROM\n"
		 		+ "            nc_service_order so2\n"
		 		+ "        WHERE\n"
		 		+ "                so2.credit_note_no = cn.credit_note_no\n"
		 		+ "            AND so2.billing_id = cn.billing_id\n"
		 		+ "    ) "
		 		+ "ORDER BY 1",
		 		countQuery="SELECT count(*) FROM (SELECT\n"
		 				+ "    cn.dispute_id,\n"
		 				+ "    cn.credit_note_no,\n"
		 				+ "    cn.billing_id,\n"
		 				+ "    b.invoice_no,\n"
		 				+ "    b.invoice_date,\n"
		 				+ "    so.invoice_type,\n"
		 				+ "    so.customer_order_no,\n"
		 				+ "    so.service_rendered_from,\n"
		 				+ "    so.service_rendered_to,\n"
		 				+ "    so.service_request_by,\n"
		 				+ "    so.customer_code,\n"
		 				+ "    (\n"
		 				+ "        SELECT\n"
		 				+ "            c.customer_name\n"
		 				+ "        FROM\n"
		 				+ "            ebs_customer c\n"
		 				+ "        WHERE\n"
		 				+ "            c.customer_code = so.customer_code\n"
		 				+ "    ) customer_name,\n"
		 				+ "    so.po_number,\n"
		 				+ "    so.vessel_code,\n"
		 				+ "    so.vessel_name,\n"
		 				+ "    so.in_voyage,\n"
		 				+ "    so.out_voyage,\n"
		 				+ "    so.line_code,\n"
		 				+ "    so.call_no,\n"
		 				+ "    so.loa,\n"
		 				+ "    so.loa_uom,\n"
		 				+ "    so.gt,\n"
		 				+ "    so.ata,\n"
		 				+ "    so.atd,\n"
		 				+ "    so.location,\n"
		 				+ "    so.remarks\n"
		 				+ "FROM\n"
		 				+ "    credit_note      cn,\n"
		 				+ "    billing          b,\n"
		 				+ "    nc_service_order so\n"
		 				+ "WHERE\n"
		 				+ "        cn.billing_id = b.billing_id\n"
		 				+ "    AND EXISTS (\n"
		 				+ "        SELECT\n"
		 				+ "            NULL\n"
		 				+ "        FROM\n"
		 				+ "            billing_source bs\n"
		 				+ "        WHERE\n"
		 				+ "                bs.billing_id = b.billing_id\n"
		 				+ "            AND bs.source_table = 'NC_SERVICE_ORDER'\n"
		 				+ "            AND bs.source_id = so.order_id\n"
		 				+ "    )\n"
		 				+ "    AND cn.dispute_id IS NOT NULL\n"
		 				+ "    AND b.tos_code = 'BFS'\n"
		 				+ "    AND NOT EXISTS (\n"
		 				+ "        SELECT\n"
		 				+ "            NULL\n"
		 				+ "        FROM\n"
		 				+ "            nc_service_order so2\n"
		 				+ "        WHERE\n"
		 				+ "                so2.credit_note_no = cn.credit_note_no\n"
		 				+ "            AND so2.billing_id = cn.billing_id\n"
		 				+ "    ) \n"
		 				+ "ORDER BY 1)"
		 		,nativeQuery=true)
		 public List<Object> getAllCreditCustomWithoutPagination();
	 
	 	//findByInvoiceType -> HQL = from orderDetails InvoiceType = ? -> SQl = select * from orderDetails where InvoiceType =?
	// 	List<OrderDetails> findByInvoiceType(String invoiceType);
	
}
